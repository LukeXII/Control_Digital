
Control_Digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007468  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b8  080077b8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c0  080077c0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080077c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004c38  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ca4  20004ca4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      000000b1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017ff6  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e95  00000000  00000000  00038143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011f8  00000000  00000000  0003bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d7f  00000000  00000000  0003d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002af7b  00000000  00000000  0003df4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a209  00000000  00000000  00068eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3654  00000000  00000000  000830d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005230  00000000  00000000  00176728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0017b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0017b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007600 	.word	0x08007600

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007600 	.word	0x08007600

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <receiveData>:

}

// Generación del DAC y captura del ADC
void receiveData (float * buffer)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    float Y, U;
    uint16_t dacValue = 0, outputSample;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	82fb      	strh	r3, [r7, #22]

    // random = limite_inferior + rand() % (limite_superior +1 - limite_inferior);
    dacValue = DAC_REFERENCE_VALUE_LOW + rand() % (DAC_REFERENCE_VALUE_HIGH +1 - DAC_REFERENCE_VALUE_LOW);
 8000dd4:	f005 fbb6 	bl	8006544 <rand>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a37      	ldr	r2, [pc, #220]	; (8000eb8 <receiveData+0xf0>)
 8000ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8000de0:	1211      	asrs	r1, r2, #8
 8000de2:	17da      	asrs	r2, r3, #31
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	f240 41da 	movw	r1, #1242	; 0x4da
 8000dea:	fb01 f202 	mul.w	r2, r1, r2
 8000dee:	1a9a      	subs	r2, r3, r2
 8000df0:	b293      	uxth	r3, r2
 8000df2:	f203 5393 	addw	r3, r3, #1427	; 0x593
 8000df6:	82fb      	strh	r3, [r7, #22]

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 8000df8:	8afb      	ldrh	r3, [r7, #22]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	482f      	ldr	r0, [pc, #188]	; (8000ebc <receiveData+0xf4>)
 8000e00:	f001 faf7 	bl	80023f2 <HAL_DAC_SetValue>

	HAL_ADC_Start(&hadc1);
 8000e04:	482e      	ldr	r0, [pc, #184]	; (8000ec0 <receiveData+0xf8>)
 8000e06:	f000 fe8d 	bl	8001b24 <HAL_ADC_Start>

    U = (float) dacValue * 3.3 / 4095.0;
 8000e0a:	8afb      	ldrh	r3, [r7, #22]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e14:	ee17 0a90 	vmov	r0, s15
 8000e18:	f7ff fb9e 	bl	8000558 <__aeabi_f2d>
 8000e1c:	a322      	add	r3, pc, #136	; (adr r3, 8000ea8 <receiveData+0xe0>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fbf1 	bl	8000608 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	a320      	add	r3, pc, #128	; (adr r3, 8000eb0 <receiveData+0xe8>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff fd12 	bl	800085c <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fdf4 	bl	8000a2c <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	613b      	str	r3, [r7, #16]

	outputSample = HAL_ADC_GetValue(&hadc1);
 8000e48:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <receiveData+0xf8>)
 8000e4a:	f000 ff3d 	bl	8001cc8 <HAL_ADC_GetValue>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	81fb      	strh	r3, [r7, #14]

	Y = (float) outputSample * 3.3 / 4095.0;
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e5c:	ee17 0a90 	vmov	r0, s15
 8000e60:	f7ff fb7a 	bl	8000558 <__aeabi_f2d>
 8000e64:	a310      	add	r3, pc, #64	; (adr r3, 8000ea8 <receiveData+0xe0>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fbcd 	bl	8000608 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	a30e      	add	r3, pc, #56	; (adr r3, 8000eb0 <receiveData+0xe8>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fcee 	bl	800085c <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fdd0 	bl	8000a2c <__aeabi_d2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60bb      	str	r3, [r7, #8]
#if (WAVEFORM_DEBUG == 1)
	vPrintNumber(dacValue);
	vPrintStringAndNumber(",", outputSample);
#endif

	buffer[0] = U;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]
	buffer[1] = Y;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	66666666 	.word	0x66666666
 8000eac:	400a6666 	.word	0x400a6666
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	40affe00 	.word	0x40affe00
 8000eb8:	34c439b7 	.word	0x34c439b7
 8000ebc:	200000d0 	.word	0x200000d0
 8000ec0:	20000088 	.word	0x20000088

08000ec4 <TaskPolePlacement>:
 */

#include "TaskPolePlacement.h"

void TaskPolePlacement(void * argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	uint32_t xLastWakeTime, outputSample;
	uint16_t setpoint = SQUARE_VALUE_2V;
 8000ecc:	f640 13b2 	movw	r3, #2482	; 0x9b2
 8000ed0:	83fb      	strh	r3, [r7, #30]
	float controlSignal, res = 3.3/4095.0;
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <TaskPolePlacement+0xb0>)
 8000ed4:	61bb      	str	r3, [r7, #24]
	uint8_t samplesCounter = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	4826      	ldr	r0, [pc, #152]	; (8000f78 <TaskPolePlacement+0xb4>)
 8000ede:	f001 fa36 	bl	800234e <HAL_DAC_Start>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, SQUARE_VALUE_1V);
 8000ee2:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4823      	ldr	r0, [pc, #140]	; (8000f78 <TaskPolePlacement+0xb4>)
 8000eec:	f001 fa81 	bl	80023f2 <HAL_DAC_SetValue>
	vTaskDelay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f003 fe2c 	bl	8004b50 <vTaskDelay>

	vPrintString("start--------");
 8000ef8:	4820      	ldr	r0, [pc, #128]	; (8000f7c <TaskPolePlacement+0xb8>)
 8000efa:	f000 fc77 	bl	80017ec <vPrintString>
	vPrintNewLine();
 8000efe:	f000 fcab 	bl	8001858 <vPrintNewLine>

	xLastWakeTime = xTaskGetTickCount();
 8000f02:	f003 ff75 	bl	8004df0 <xTaskGetTickCount>
 8000f06:	4603      	mov	r3, r0
 8000f08:	60bb      	str	r3, [r7, #8]

	for(;;)
	{


		HAL_ADC_Start(&hadc1);
 8000f0a:	481d      	ldr	r0, [pc, #116]	; (8000f80 <TaskPolePlacement+0xbc>)
 8000f0c:	f000 fe0a 	bl	8001b24 <HAL_ADC_Start>
		outputSample = HAL_ADC_GetValue(&hadc1);
 8000f10:	481b      	ldr	r0, [pc, #108]	; (8000f80 <TaskPolePlacement+0xbc>)
 8000f12:	f000 fed9 	bl	8001cc8 <HAL_ADC_GetValue>
 8000f16:	6138      	str	r0, [r7, #16]


		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((float)controlSignal/res) );
 8000f18:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f28:	ee17 3a90 	vmov	r3, s15
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4811      	ldr	r0, [pc, #68]	; (8000f78 <TaskPolePlacement+0xb4>)
 8000f32:	f001 fa5e 	bl	80023f2 <HAL_DAC_SetValue>

		vPrintNumber(setpoint);
 8000f36:	8bfb      	ldrh	r3, [r7, #30]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fc3d 	bl	80017b8 <vPrintNumber>
		vPrintStringAndNumber(",", outputSample);
 8000f3e:	6939      	ldr	r1, [r7, #16]
 8000f40:	4810      	ldr	r0, [pc, #64]	; (8000f84 <TaskPolePlacement+0xc0>)
 8000f42:	f000 fc6d 	bl	8001820 <vPrintStringAndNumber>
		vPrintStringAndNumber(",", (uint32_t)((float)controlSignal/res));
 8000f46:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f56:	ee17 1a90 	vmov	r1, s15
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <TaskPolePlacement+0xc0>)
 8000f5c:	f000 fc60 	bl	8001820 <vPrintStringAndNumber>
		vPrintNewLine();
 8000f60:	f000 fc7a 	bl	8001858 <vPrintNewLine>

		vTaskDelayUntil(&xLastWakeTime, LOOP_SAMPLING_TIME);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fd72 	bl	8004a54 <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 8000f70:	e7cb      	b.n	8000f0a <TaskPolePlacement+0x46>
 8000f72:	bf00      	nop
 8000f74:	3a534067 	.word	0x3a534067
 8000f78:	200000d0 	.word	0x200000d0
 8000f7c:	08007618 	.word	0x08007618
 8000f80:	20000088 	.word	0x20000088
 8000f84:	08007628 	.word	0x08007628

08000f88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_ADC1_Init+0x98>)
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <MX_ADC1_Init+0x9c>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <MX_ADC1_Init+0xa0>)
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_ADC1_Init+0x98>)
 8000fea:	f000 fd57 	bl	8001a9c <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ff4:	f000 faa2 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_ADC1_Init+0x98>)
 800100a:	f000 fe6b 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001014:	f000 fa92 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000088 	.word	0x20000088
 8001024:	40012000 	.word	0x40012000
 8001028:	0f000001 	.word	0x0f000001

0800102c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_ADC_MspInit+0x7c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d127      	bne.n	800109e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_ADC_MspInit+0x80>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <HAL_ADC_MspInit+0x80>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_ADC_MspInit+0x80>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_ADC_MspInit+0x80>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_ADC_MspInit+0x80>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_ADC_MspInit+0x80>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001086:	2308      	movs	r3, #8
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_ADC_MspInit+0x84>)
 800109a:	f001 fa1f 	bl	80024dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40012000 	.word	0x40012000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_DAC_Init+0x4c>)
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <MX_DAC_Init+0x50>)
 80010c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_DAC_Init+0x4c>)
 80010ca:	f001 f91e 	bl	800230a <HAL_DAC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010d4:	f000 fa32 	bl	800153c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_DAC_Init+0x4c>)
 80010e8:	f001 f9a8 	bl	800243c <HAL_DAC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010f2:	f000 fa23 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000d0 	.word	0x200000d0
 8001104:	40007400 	.word	0x40007400

08001108 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_DAC_MspInit+0x7c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d127      	bne.n	800117a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_DAC_MspInit+0x80>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_DAC_MspInit+0x80>)
 8001134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_DAC_MspInit+0x80>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_DAC_MspInit+0x80>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_DAC_MspInit+0x80>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_DAC_MspInit+0x80>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001162:	2310      	movs	r3, #16
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_DAC_MspInit+0x84>)
 8001176:	f001 f9b1 	bl	80024dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40007400 	.word	0x40007400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Create the thread(s) */

	//TaskIdentificationHandle = osThreadNew(TaskIdentification, (void*)tILS1, &IdentificationTask_attributes);
	//TaskOLResponseHandle = osThreadNew(TaskOLResponse, NULL, &OLResponseTask_attributes);
	//TaskPIDControlHandle = osThreadNew(TaskPIDControl, NULL, &PIDControlTask_attributes);
	TaskPolePlacementHandle = osThreadNew(TaskPolePlacement, NULL, &PolePlacementTask_attributes);
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <MX_FREERTOS_Init+0x18>)
 8001196:	2100      	movs	r1, #0
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_FREERTOS_Init+0x1c>)
 800119a:	f002 fc3d 	bl	8003a18 <osThreadNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <MX_FREERTOS_Init+0x20>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0800769c 	.word	0x0800769c
 80011ac:	08000ec5 	.word	0x08000ec5
 80011b0:	200000e4 	.word	0x200000e4

080011b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b49      	ldr	r3, [pc, #292]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a44      	ldr	r2, [pc, #272]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <MX_GPIO_Init+0x14c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <MX_GPIO_Init+0x14c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_GPIO_Init+0x14c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_GPIO_Init+0x14c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0x14c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f244 0181 	movw	r1, #16513	; 0x4081
 8001278:	4822      	ldr	r0, [pc, #136]	; (8001304 <MX_GPIO_Init+0x150>)
 800127a:	f001 fadb 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	4821      	ldr	r0, [pc, #132]	; (8001308 <MX_GPIO_Init+0x154>)
 8001284:	f001 fad6 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <MX_GPIO_Init+0x158>)
 80012a0:	f001 f91c 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_GPIO_Init+0x150>)
 80012be:	f001 f90d 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012c2:	2340      	movs	r3, #64	; 0x40
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <MX_GPIO_Init+0x154>)
 80012da:	f001 f8ff 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_GPIO_Init+0x154>)
 80012f2:	f001 f8f3 	bl	80024dc <HAL_GPIO_Init>

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400
 8001308:	40021800 	.word	0x40021800
 800130c:	40020800 	.word	0x40020800

08001310 <ILS_Init>:

/*=====[Implementations of public functions]=================================*/

// Configura la estructura de datos del Identificador
void ILS_Init (t_ILSdata* iData, uint32_t n, uint32_t ts_Ms, void (*pfR)(float32_t*))
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	iData->N = n;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	609a      	str	r2, [r3, #8]
	iData->ts_Ms = ts_Ms;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]
	iData->p_receive = pfR;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	605a      	str	r2, [r3, #4]
	iData->i = 2;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2202      	movs	r2, #2
 8001334:	60da      	str	r2, [r3, #12]
    *                          matrix structure.
    * @param[in]     nRows     number of rows in the matrix.
    * @param[in]     nColumns  number of columns in the matrix.
    * @param[in]     pData     points to the matrix data array.
    */
	arm_mat_init_f32(&Y, iData->N, 1, iData->buffer_Y);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	b299      	uxth	r1, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8001342:	3304      	adds	r3, #4
 8001344:	2201      	movs	r2, #1
 8001346:	482d      	ldr	r0, [pc, #180]	; (80013fc <ILS_Init+0xec>)
 8001348:	f005 f8f8 	bl	800653c <arm_mat_init_f32>
	arm_mat_init_f32(&T, M_SIZE, 1, iData->buffer_T);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3314      	adds	r3, #20
 8001350:	2201      	movs	r2, #1
 8001352:	2105      	movs	r1, #5
 8001354:	482a      	ldr	r0, [pc, #168]	; (8001400 <ILS_Init+0xf0>)
 8001356:	f005 f8f1 	bl	800653c <arm_mat_init_f32>
	arm_mat_init_f32(&F, iData->N, M_SIZE, iData->buffer_F);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	b299      	uxth	r1, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3328      	adds	r3, #40	; 0x28
 8001364:	2205      	movs	r2, #5
 8001366:	4827      	ldr	r0, [pc, #156]	; (8001404 <ILS_Init+0xf4>)
 8001368:	f005 f8e8 	bl	800653c <arm_mat_init_f32>
	arm_mat_init_f32(&FT, M_SIZE, iData->N, iData->buffer_FT);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f603 73c8 	addw	r3, r3, #4040	; 0xfc8
 8001378:	2105      	movs	r1, #5
 800137a:	4823      	ldr	r0, [pc, #140]	; (8001408 <ILS_Init+0xf8>)
 800137c:	f005 f8de 	bl	800653c <arm_mat_init_f32>
	arm_mat_init_f32(&aux0, M_SIZE, M_SIZE, iData->buffer_aux0);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8001386:	3308      	adds	r3, #8
 8001388:	2205      	movs	r2, #5
 800138a:	2105      	movs	r1, #5
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <ILS_Init+0xfc>)
 800138e:	f005 f8d5 	bl	800653c <arm_mat_init_f32>
	arm_mat_init_f32(&aux1, M_SIZE, M_SIZE, iData->buffer_aux1);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f503 53fe 	add.w	r3, r3, #8128	; 0x1fc0
 8001398:	330c      	adds	r3, #12
 800139a:	2205      	movs	r2, #5
 800139c:	2105      	movs	r1, #5
 800139e:	481c      	ldr	r0, [pc, #112]	; (8001410 <ILS_Init+0x100>)
 80013a0:	f005 f8cc 	bl	800653c <arm_mat_init_f32>
	arm_mat_init_f32(&aux2, M_SIZE, 1, iData->buffer_aux2);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80013aa:	3330      	adds	r3, #48	; 0x30
 80013ac:	2201      	movs	r2, #1
 80013ae:	2105      	movs	r1, #5
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <ILS_Init+0x104>)
 80013b2:	f005 f8c3 	bl	800653c <arm_mat_init_f32>

	// Valores iniciales
	iData->buffer_Y[1] = 0;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80013bc:	461a      	mov	r2, r3
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	6493      	str	r3, [r2, #72]	; 0x48
	iData->buffer_Y[0] = 0;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80013ca:	461a      	mov	r2, r3
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
	iData->buffer_U[1] = 0;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80013d8:	461a      	mov	r2, r3
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	f8c2 3368 	str.w	r3, [r2, #872]	; 0x368
	iData->buffer_U[0] = 0;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80013e8:	461a      	mov	r2, r3
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000e8 	.word	0x200000e8
 8001400:	200000f0 	.word	0x200000f0
 8001404:	200000f8 	.word	0x200000f8
 8001408:	20000100 	.word	0x20000100
 800140c:	20000108 	.word	0x20000108
 8001410:	20000110 	.word	0x20000110
 8001414:	20000118 	.word	0x20000118

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141c:	f000 facc 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f822 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001424:	f7ff fec6 	bl	80011b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001428:	f000 fa2a 	bl	8001880 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800142c:	f7ff fdac 	bl	8000f88 <MX_ADC1_Init>
  MX_DAC_Init();
 8001430:	f7ff fe40 	bl	80010b4 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  tILS1 = (t_ILSdata*) pvPortMalloc (sizeof(t_ILSdata));
 8001434:	f242 6084 	movw	r0, #9860	; 0x2684
 8001438:	f004 fe96 	bl	8006168 <pvPortMalloc>
 800143c:	4603      	mov	r3, r0
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <main+0x48>)
 8001440:	6013      	str	r3, [r2, #0]
  ILS_Init(tILS1, 140, 15, receiveData);
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <main+0x48>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <main+0x4c>)
 8001448:	220f      	movs	r2, #15
 800144a:	218c      	movs	r1, #140	; 0x8c
 800144c:	f7ff ff60 	bl	8001310 <ILS_Init>

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001450:	f002 fa98 	bl	8003984 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001454:	f7ff fe9c 	bl	8001190 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001458:	f002 fab8 	bl	80039cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800145c:	e7fe      	b.n	800145c <main+0x44>
 800145e:	bf00      	nop
 8001460:	20000120 	.word	0x20000120
 8001464:	08000dc9 	.word	0x08000dc9

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	; 0x50
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	2230      	movs	r2, #48	; 0x30
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f005 fa69 	bl	800694e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <SystemClock_Config+0xcc>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a27      	ldr	r2, [pc, #156]	; (8001534 <SystemClock_Config+0xcc>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <SystemClock_Config+0xcc>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <SystemClock_Config+0xd0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <SystemClock_Config+0xd0>)
 80014b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <SystemClock_Config+0xd0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014d8:	2304      	movs	r3, #4
 80014da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014dc:	23a8      	movs	r3, #168	; 0xa8
 80014de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014e4:	2307      	movs	r3, #7
 80014e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 f9bb 	bl	8002868 <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f8:	f000 f820 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fc:	230f      	movs	r3, #15
 80014fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001500:	2302      	movs	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001508:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2105      	movs	r1, #5
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fc1c 	bl	8002d58 <HAL_RCC_ClockConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001526:	f000 f809 	bl	800153c <Error_Handler>
  }
}
 800152a:	bf00      	nop
 800152c:	3750      	adds	r7, #80	; 0x50
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_MspInit+0x54>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_MspInit+0x54>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_MspInit+0x54>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_MspInit+0x54>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_MspInit+0x54>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_MspInit+0x54>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	210f      	movs	r1, #15
 800158a:	f06f 0001 	mvn.w	r0, #1
 800158e:	f000 fe94 	bl	80022ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 fa44 	bl	8001a5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015d4:	f003 ff4c 	bl	8005470 <xTaskGetSchedulerState>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015de:	f004 fd33 	bl	8006048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  return 1;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_kill>:

int _kill(int pid, int sig)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001600:	f005 fa4a 	bl	8006a98 <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	2216      	movs	r2, #22
 8001608:	601a      	str	r2, [r3, #0]
  return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_exit>:

void _exit (int status)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800161e:	f04f 31ff 	mov.w	r1, #4294967295
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffe7 	bl	80015f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001628:	e7fe      	b.n	8001628 <_exit+0x12>

0800162a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00a      	b.n	8001652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800163c:	f3af 8000 	nop.w
 8001640:	4601      	mov	r1, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	b2ca      	uxtb	r2, r1
 800164a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf0      	blt.n	800163c <_read+0x12>
  }

  return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e009      	b.n	800168a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f888 	bl	8001794 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbf1      	blt.n	8001676 <_write+0x12>
  }
  return len;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_close>:

int _close(int file)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c4:	605a      	str	r2, [r3, #4]
  return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_isatty>:

int _isatty(int file)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f005 f9b0 	bl	8006a98 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20030000 	.word	0x20030000
 8001764:	00000400 	.word	0x00000400
 8001768:	20000124 	.word	0x20000124
 800176c:	20004ca8 	.word	0x20004ca8

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__io_putchar>:


UART_HandleTypeDef huart3;

PUTCHAR_PROTOTYPE
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800179c:	1d39      	adds	r1, r7, #4
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	2201      	movs	r2, #1
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <__io_putchar+0x20>)
 80017a6:	f001 fd44 	bl	8003232 <HAL_UART_Transmit>

	return ch;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000128 	.word	0x20000128

080017b8 <vPrintNumber>:

/*-----------------------------------------------------------*/

void vPrintNumber( uint32_t ulValue )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 80017c0:	f004 fbb0 	bl	8005f24 <vPortEnterCritical>
	{
		printf( "%lu", ulValue );
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <vPrintNumber+0x2c>)
 80017c8:	f005 f86c 	bl	80068a4 <iprintf>
		fflush( stdout );
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <vPrintNumber+0x30>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 ffa2 	bl	800671c <fflush>
	}
	taskEXIT_CRITICAL();
 80017d8:	f004 fbd4 	bl	8005f84 <vPortExitCritical>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	08007674 	.word	0x08007674
 80017e8:	20000068 	.word	0x20000068

080017ec <vPrintString>:
/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 80017f4:	f004 fb96 	bl	8005f24 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <vPrintString+0x2c>)
 80017fc:	f005 f852 	bl	80068a4 <iprintf>
		fflush( stdout );
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <vPrintString+0x30>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 ff88 	bl	800671c <fflush>
	}
	taskEXIT_CRITICAL();
 800180c:	f004 fbba 	bl	8005f84 <vPortExitCritical>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	08007678 	.word	0x08007678
 800181c:	20000068 	.word	0x20000068

08001820 <vPrintStringAndNumber>:
/*-----------------------------------------------------------*/

void vPrintStringAndNumber( const char *pcString, uint32_t ulValue )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 800182a:	f004 fb7b 	bl	8005f24 <vPortEnterCritical>
	{
		printf( "%s %lu", pcString, ulValue );
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <vPrintStringAndNumber+0x30>)
 8001834:	f005 f836 	bl	80068a4 <iprintf>
		fflush( stdout );
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <vPrintStringAndNumber+0x34>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4618      	mov	r0, r3
 8001840:	f004 ff6c 	bl	800671c <fflush>
	}
	taskEXIT_CRITICAL();
 8001844:	f004 fb9e 	bl	8005f84 <vPortExitCritical>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	0800767c 	.word	0x0800767c
 8001854:	20000068 	.word	0x20000068

08001858 <vPrintNewLine>:
/*-----------------------------------------------------------*/

void vPrintNewLine( void )
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
	char newLineChars[2] = {13, 10};
 800185e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001862:	80bb      	strh	r3, [r7, #4]

	HAL_UART_Transmit(&huart3, (uint8_t *)newLineChars, 2, 0xFFFF);
 8001864:	1d39      	adds	r1, r7, #4
 8001866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186a:	2202      	movs	r2, #2
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <vPrintNewLine+0x24>)
 800186e:	f001 fce0 	bl	8003232 <HAL_UART_Transmit>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000128 	.word	0x20000128

08001880 <MX_USART3_UART_Init>:
/*-----------------------------------------------------------*/

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART3_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018b8:	f001 fc6e 	bl	8003198 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f7ff fe3b 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000128 	.word	0x20000128
 80018d0:	40004800 	.word	0x40004800

080018d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <HAL_UART_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12c      	bne.n	8001950 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_UART_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_UART_MspInit+0x88>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_UART_MspInit+0x88>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_UART_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_UART_MspInit+0x88>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_UART_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800192e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001940:	2307      	movs	r3, #7
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_MspInit+0x8c>)
 800194c:	f000 fdc6 	bl	80024dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40004800 	.word	0x40004800
 800195c:	40023800 	.word	0x40023800
 8001960:	40020c00 	.word	0x40020c00

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196a:	490e      	ldr	r1, [pc, #56]	; (80019a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001980:	4c0b      	ldr	r4, [pc, #44]	; (80019b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198e:	f7ff feef 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f005 f887 	bl	8006aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff fd3f 	bl	8001418 <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800199c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019a8:	080077c8 	.word	0x080077c8
  ldr r2, =_sbss
 80019ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80019b0:	20004ca4 	.word	0x20004ca4

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 fc5f 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fdac 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fc69 	bl	80022f2 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 fc3f 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	2000016c 	.word	0x2000016c

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000016c 	.word	0x2000016c

08001a9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e033      	b.n	8001b1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fab6 	bl	800102c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae2:	f023 0302 	bic.w	r3, r3, #2
 8001ae6:	f043 0202 	orr.w	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fa2a 	bl	8001f48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
 8001b0a:	e001      	b.n	8001b10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Start+0x1a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e0b2      	b.n	8001ca4 <HAL_ADC_Start+0x180>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d018      	beq.n	8001b86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b64:	4b52      	ldr	r3, [pc, #328]	; (8001cb0 <HAL_ADC_Start+0x18c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_ADC_Start+0x190>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9a      	lsrs	r2, r3, #18
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b78:	e002      	b.n	8001b80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f9      	bne.n	8001b7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d17a      	bne.n	8001c8a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd2:	d106      	bne.n	8001be2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	f023 0206 	bic.w	r2, r3, #6
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44
 8001be0:	e002      	b.n	8001be8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_ADC_Start+0x194>)
 8001bf2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bfc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12a      	bne.n	8001c60 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <HAL_ADC_Start+0x198>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d015      	beq.n	8001c40 <HAL_ADC_Start+0x11c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <HAL_ADC_Start+0x19c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d105      	bne.n	8001c2a <HAL_ADC_Start+0x106>
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_ADC_Start+0x194>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00a      	beq.n	8001c40 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_ADC_Start+0x1a0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d136      	bne.n	8001ca2 <HAL_ADC_Start+0x17e>
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_ADC_Start+0x194>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d130      	bne.n	8001ca2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d129      	bne.n	8001ca2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	e020      	b.n	8001ca2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <HAL_ADC_Start+0x198>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d11b      	bne.n	8001ca2 <HAL_ADC_Start+0x17e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d114      	bne.n	8001ca2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	e00b      	b.n	8001ca2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f043 0210 	orr.w	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	40012300 	.word	0x40012300
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	40012100 	.word	0x40012100
 8001cc4:	40012200 	.word	0x40012200

08001cc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1c>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e113      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x244>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d925      	bls.n	8001d5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68d9      	ldr	r1, [r3, #12]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	3b1e      	subs	r3, #30
 8001d26:	2207      	movs	r2, #7
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	400a      	ands	r2, r1
 8001d34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68d9      	ldr	r1, [r3, #12]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4403      	add	r3, r0
 8001d4e:	3b1e      	subs	r3, #30
 8001d50:	409a      	lsls	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e022      	b.n	8001da2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	2207      	movs	r2, #7
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4403      	add	r3, r0
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d824      	bhi.n	8001df4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b05      	subs	r3, #5
 8001dbc:	221f      	movs	r2, #31
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b05      	subs	r3, #5
 8001de6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
 8001df2:	e04c      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d824      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b23      	subs	r3, #35	; 0x23
 8001e0e:	221f      	movs	r2, #31
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43da      	mvns	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b23      	subs	r3, #35	; 0x23
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
 8001e44:	e023      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b41      	subs	r3, #65	; 0x41
 8001e58:	221f      	movs	r2, #31
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	400a      	ands	r2, r1
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b41      	subs	r3, #65	; 0x41
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_ADC_ConfigChannel+0x250>)
 8001e90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a28      	ldr	r2, [pc, #160]	; (8001f38 <HAL_ADC_ConfigChannel+0x254>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10f      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1d8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b12      	cmp	r3, #18
 8001ea2:	d10b      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_ADC_ConfigChannel+0x254>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12b      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x23a>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_ADC_ConfigChannel+0x258>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b11      	cmp	r3, #17
 8001ed6:	d122      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_ADC_ConfigChannel+0x258>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d111      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_ADC_ConfigChannel+0x25c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <HAL_ADC_ConfigChannel+0x260>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	0c9a      	lsrs	r2, r3, #18
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f10:	e002      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f9      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40012300 	.word	0x40012300
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	10000012 	.word	0x10000012
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f50:	4b79      	ldr	r3, [pc, #484]	; (8002138 <ADC_Init+0x1f0>)
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	021a      	lsls	r2, r3, #8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	4a58      	ldr	r2, [pc, #352]	; (800213c <ADC_Init+0x1f4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e00f      	b.n	8002046 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002044:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0202 	bic.w	r2, r2, #2
 8002054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
 8002060:	005a      	lsls	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01b      	beq.n	80020ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002082:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002092:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	035a      	lsls	r2, r3, #13
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	e007      	b.n	80020bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	051a      	lsls	r2, r3, #20
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020fe:	025a      	lsls	r2, r3, #9
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	029a      	lsls	r2, r3, #10
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40012300 	.word	0x40012300
 800213c:	0f000001 	.word	0x0f000001

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	; (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	; (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
         );
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff8e 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff47 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff5c 	bl	8002188 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff8e 	bl	80021f8 <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5d 	bl	80021a4 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ffb0 	bl	8002260 <SysTick_Config>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e014      	b.n	8002346 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe feeb 	bl	8001108 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	795b      	ldrb	r3, [r3, #5]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_DAC_Start+0x16>
 8002360:	2302      	movs	r3, #2
 8002362:	e040      	b.n	80023e6 <HAL_DAC_Start+0x98>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2202      	movs	r2, #2
 800236e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2201      	movs	r2, #1
 800237e:	409a      	lsls	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002398:	2b3c      	cmp	r3, #60	; 0x3c
 800239a:	d11d      	bne.n	80023d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	e014      	b.n	80023d8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	213c      	movs	r1, #60	; 0x3c
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0202 	orr.w	r2, r2, #2
 80023d6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3308      	adds	r3, #8
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e004      	b.n	8002426 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	3314      	adds	r3, #20
 8002424:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	461a      	mov	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	795b      	ldrb	r3, [r3, #5]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_DAC_ConfigChannel+0x18>
 8002450:	2302      	movs	r3, #2
 8002452:	e03c      	b.n	80024ce <HAL_DAC_ConfigChannel+0x92>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2202      	movs	r2, #2
 800245e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4013      	ands	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	22c0      	movs	r2, #192	; 0xc0
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	400a      	ands	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e177      	b.n	80027e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8166 	bne.w	80027e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80c0 	beq.w	80027e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a65      	ldr	r2, [pc, #404]	; (8002800 <HAL_GPIO_Init+0x324>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a61      	ldr	r2, [pc, #388]	; (8002804 <HAL_GPIO_Init+0x328>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_GPIO_Init+0x32c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d037      	beq.n	800271a <HAL_GPIO_Init+0x23e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_GPIO_Init+0x330>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d031      	beq.n	8002716 <HAL_GPIO_Init+0x23a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a56      	ldr	r2, [pc, #344]	; (8002810 <HAL_GPIO_Init+0x334>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <HAL_GPIO_Init+0x236>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_GPIO_Init+0x338>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x232>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_GPIO_Init+0x33c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x22e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_GPIO_Init+0x340>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x22a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_GPIO_Init+0x344>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x226>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x348>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a50      	ldr	r2, [pc, #320]	; (8002828 <HAL_GPIO_Init+0x34c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4f      	ldr	r2, [pc, #316]	; (800282c <HAL_GPIO_Init+0x350>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026f2:	2309      	movs	r3, #9
 80026f4:	e012      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026f6:	230a      	movs	r3, #10
 80026f8:	e010      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fa:	2308      	movs	r3, #8
 80026fc:	e00e      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00c      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002702:	2306      	movs	r3, #6
 8002704:	e00a      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002706:	2305      	movs	r3, #5
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270a:	2304      	movs	r3, #4
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x240>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_GPIO_Init+0x328>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_GPIO_Init+0x354>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_GPIO_Init+0x354>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f ae84 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40021400 	.word	0x40021400
 8002820:	40021800 	.word	0x40021800
 8002824:	40021c00 	.word	0x40021c00
 8002828:	40022000 	.word	0x40022000
 800282c:	40022400 	.word	0x40022400
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e267      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d075      	beq.n	8002972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x108>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e242      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x74>
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6f      	ldr	r2, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6c      	ldr	r2, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff f8b0 	bl	8001a84 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7ff f8ac 	bl	8001a84 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e207      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5b      	ldr	r3, [pc, #364]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xc0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff f89c 	bl	8001a84 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff f898 	bl	8001a84 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1f3      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0xe8>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c7      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7ff f851 	bl	8001a84 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff f84d 	bl	8001a84 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a8      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4925      	ldr	r1, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff f830 	bl	8001a84 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7ff f82c 	bl	8001a84 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e187      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff f810 	bl	8001a84 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff f80c 	bl	8001a84 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e167      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x200>
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fff9 	bl	8001a84 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00e      	b.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe fff5 	bl	8001a84 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e150      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
 8002ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ea      	bne.n	8002a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8097 	beq.w	8002bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b77      	ldr	r3, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b74      	ldr	r3, [pc, #464]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a73      	ldr	r2, [pc, #460]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7fe ffb5 	bl	8001a84 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe ffb1 	bl	8001a84 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e10c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x30c>
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5e      	ldr	r2, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b74:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe ff76 	bl	8001a84 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe ff72 	bl	8001a84 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0cb      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x334>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe ff60 	bl	8001a84 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe ff5c 	bl	8001a84 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b5      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	4a38      	ldr	r2, [pc, #224]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a1 	beq.w	8002d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d05c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d141      	bne.n	8002c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe ff30 	bl	8001a84 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe ff2c 	bl	8001a84 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e087      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	491b      	ldr	r1, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe ff05 	bl	8001a84 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe ff01 	bl	8001a84 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e05c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x416>
 8002c9c:	e054      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe feee 	bl	8001a84 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe feea 	bl	8001a84 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e045      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x444>
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e038      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fe1c 	bl	8001a84 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe fe18 	bl	8001a84 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fd7c 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	080076c0 	.word	0x080076c0
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b094      	sub	sp, #80	; 0x50
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b79      	ldr	r3, [pc, #484]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80e1 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e0db      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f5c:	e0db      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f62:	e0d8      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
 8002f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4621      	mov	r1, r4
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	6139      	str	r1, [r7, #16]
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	018a      	lsls	r2, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fdc:	4659      	mov	r1, fp
 8002fde:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff6:	4690      	mov	r8, r2
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	eb18 0303 	adds.w	r3, r8, r3
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	462b      	mov	r3, r5
 8003004:	eb49 0303 	adc.w	r3, r9, r3
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003016:	4629      	mov	r1, r5
 8003018:	024b      	lsls	r3, r1, #9
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003020:	4621      	mov	r1, r4
 8003022:	024a      	lsls	r2, r1, #9
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003034:	f7fd fd4a 	bl	8000acc <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	e058      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	2200      	movs	r2, #0
 800304a:	4618      	mov	r0, r3
 800304c:	4611      	mov	r1, r2
 800304e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	0159      	lsls	r1, r3, #5
 800306a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306e:	0150      	lsls	r0, r2, #5
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4641      	mov	r1, r8
 8003076:	ebb2 0a01 	subs.w	sl, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800308c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003094:	ebb2 040a 	subs.w	r4, r2, sl
 8003098:	eb63 050b 	sbc.w	r5, r3, fp
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00eb      	lsls	r3, r5, #3
 80030a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030aa:	00e2      	lsls	r2, r4, #3
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	18e3      	adds	r3, r4, r3
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ca:	4629      	mov	r1, r5
 80030cc:	028b      	lsls	r3, r1, #10
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d4:	4621      	mov	r1, r4
 80030d6:	028a      	lsls	r2, r1, #10
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e8:	f7fd fcf0 	bl	8000acc <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003118:	4618      	mov	r0, r3
 800311a:	3750      	adds	r7, #80	; 0x50
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800314c:	f7ff fff0 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	; (800316c <HAL_RCC_GetPCLK1Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	080076d0 	.word	0x080076d0

08003170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003174:	f7ff ffdc 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0b5b      	lsrs	r3, r3, #13
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	080076d0 	.word	0x080076d0

08003198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e03f      	b.n	800322a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fb88 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f929 	bl	8003434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08a      	sub	sp, #40	; 0x28
 8003236:	af02      	add	r7, sp, #8
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b20      	cmp	r3, #32
 8003250:	d17c      	bne.n	800334c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_UART_Transmit+0x2c>
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e075      	b.n	800334e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_UART_Transmit+0x3e>
 800326c:	2302      	movs	r3, #2
 800326e:	e06e      	b.n	800334e <HAL_UART_Transmit+0x11c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2221      	movs	r2, #33	; 0x21
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003286:	f7fe fbfd 	bl	8001a84 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a0:	d108      	bne.n	80032b4 <HAL_UART_Transmit+0x82>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	e003      	b.n	80032bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032c4:	e02a      	b.n	800331c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2180      	movs	r1, #128	; 0x80
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f840 	bl	8003356 <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e036      	b.n	800334e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	3302      	adds	r3, #2
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	e007      	b.n	800330e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3301      	adds	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1cf      	bne.n	80032c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	2140      	movs	r1, #64	; 0x40
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f810 	bl	8003356 <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e006      	b.n	800334e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b090      	sub	sp, #64	; 0x40
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	e050      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d04c      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0x30>
 8003376:	f7fe fb85 	bl	8001a84 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003382:	429a      	cmp	r2, r3
 8003384:	d241      	bcs.n	800340a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a6:	637a      	str	r2, [r7, #52]	; 0x34
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e5      	bne.n	8003386 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	613b      	str	r3, [r7, #16]
   return(result);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033da:	623a      	str	r2, [r7, #32]
 80033dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	69f9      	ldr	r1, [r7, #28]
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e00f      	b.n	800342a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4013      	ands	r3, r2
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	429a      	cmp	r2, r3
 8003426:	d09f      	beq.n	8003368 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3740      	adds	r7, #64	; 0x40
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b0c0      	sub	sp, #256	; 0x100
 800343a:	af00      	add	r7, sp, #0
 800343c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	68d9      	ldr	r1, [r3, #12]
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	ea40 0301 	orr.w	r3, r0, r1
 800345c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800348c:	f021 010c 	bic.w	r1, r1, #12
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800349a:	430b      	orrs	r3, r1
 800349c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	6999      	ldr	r1, [r3, #24]
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	ea40 0301 	orr.w	r3, r0, r1
 80034ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b8f      	ldr	r3, [pc, #572]	; (8003700 <UART_SetConfig+0x2cc>)
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d005      	beq.n	80034d4 <UART_SetConfig+0xa0>
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b8d      	ldr	r3, [pc, #564]	; (8003704 <UART_SetConfig+0x2d0>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d104      	bne.n	80034de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff fe4c 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 80034d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034dc:	e003      	b.n	80034e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034de:	f7ff fe33 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 80034e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f0:	f040 810c 	bne.w	800370c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	1891      	adds	r1, r2, r2
 800350c:	65b9      	str	r1, [r7, #88]	; 0x58
 800350e:	415b      	adcs	r3, r3
 8003510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003516:	4621      	mov	r1, r4
 8003518:	eb12 0801 	adds.w	r8, r2, r1
 800351c:	4629      	mov	r1, r5
 800351e:	eb43 0901 	adc.w	r9, r3, r1
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800352e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003536:	4690      	mov	r8, r2
 8003538:	4699      	mov	r9, r3
 800353a:	4623      	mov	r3, r4
 800353c:	eb18 0303 	adds.w	r3, r8, r3
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003544:	462b      	mov	r3, r5
 8003546:	eb49 0303 	adc.w	r3, r9, r3
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800355a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800355e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003562:	460b      	mov	r3, r1
 8003564:	18db      	adds	r3, r3, r3
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
 8003568:	4613      	mov	r3, r2
 800356a:	eb42 0303 	adc.w	r3, r2, r3
 800356e:	657b      	str	r3, [r7, #84]	; 0x54
 8003570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003578:	f7fd faa8 	bl	8000acc <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4b61      	ldr	r3, [pc, #388]	; (8003708 <UART_SetConfig+0x2d4>)
 8003582:	fba3 2302 	umull	r2, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	011c      	lsls	r4, r3, #4
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003594:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80035a4:	415b      	adcs	r3, r3
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035ac:	4641      	mov	r1, r8
 80035ae:	eb12 0a01 	adds.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb43 0b01 	adc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035cc:	4692      	mov	sl, r2
 80035ce:	469b      	mov	fp, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	eb1a 0303 	adds.w	r3, sl, r3
 80035d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035da:	464b      	mov	r3, r9
 80035dc:	eb4b 0303 	adc.w	r3, fp, r3
 80035e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035f8:	460b      	mov	r3, r1
 80035fa:	18db      	adds	r3, r3, r3
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
 80035fe:	4613      	mov	r3, r2
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	647b      	str	r3, [r7, #68]	; 0x44
 8003606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800360a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800360e:	f7fd fa5d 	bl	8000acc <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4611      	mov	r1, r2
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <UART_SetConfig+0x2d4>)
 800361a:	fba3 2301 	umull	r2, r3, r3, r1
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2264      	movs	r2, #100	; 0x64
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	1acb      	subs	r3, r1, r3
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <UART_SetConfig+0x2d4>)
 8003630:	fba3 2302 	umull	r2, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800363c:	441c      	add	r4, r3
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800364c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	1891      	adds	r1, r2, r2
 8003656:	63b9      	str	r1, [r7, #56]	; 0x38
 8003658:	415b      	adcs	r3, r3
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003660:	4641      	mov	r1, r8
 8003662:	1851      	adds	r1, r2, r1
 8003664:	6339      	str	r1, [r7, #48]	; 0x30
 8003666:	4649      	mov	r1, r9
 8003668:	414b      	adcs	r3, r1
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003678:	4659      	mov	r1, fp
 800367a:	00cb      	lsls	r3, r1, #3
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003682:	4651      	mov	r1, sl
 8003684:	00ca      	lsls	r2, r1, #3
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	4603      	mov	r3, r0
 800368c:	4642      	mov	r2, r8
 800368e:	189b      	adds	r3, r3, r2
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003694:	464b      	mov	r3, r9
 8003696:	460a      	mov	r2, r1
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ca:	f7fd f9ff 	bl	8000acc <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <UART_SetConfig+0x2d4>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	; 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	4a08      	ldr	r2, [pc, #32]	; (8003708 <UART_SetConfig+0x2d4>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	f003 0207 	and.w	r2, r3, #7
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4422      	add	r2, r4
 80036fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036fc:	e106      	b.n	800390c <UART_SetConfig+0x4d8>
 80036fe:	bf00      	nop
 8003700:	40011000 	.word	0x40011000
 8003704:	40011400 	.word	0x40011400
 8003708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003710:	2200      	movs	r2, #0
 8003712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003716:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800371a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800371e:	4642      	mov	r2, r8
 8003720:	464b      	mov	r3, r9
 8003722:	1891      	adds	r1, r2, r2
 8003724:	6239      	str	r1, [r7, #32]
 8003726:	415b      	adcs	r3, r3
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800372e:	4641      	mov	r1, r8
 8003730:	1854      	adds	r4, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb43 0501 	adc.w	r5, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003754:	464b      	mov	r3, r9
 8003756:	eb45 0303 	adc.w	r3, r5, r3
 800375a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800376a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800377a:	4629      	mov	r1, r5
 800377c:	008b      	lsls	r3, r1, #2
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003784:	4621      	mov	r1, r4
 8003786:	008a      	lsls	r2, r1, #2
 8003788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800378c:	f7fd f99e 	bl	8000acc <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <UART_SetConfig+0x4e4>)
 8003796:	fba3 2302 	umull	r2, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	011c      	lsls	r4, r3, #4
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	61b9      	str	r1, [r7, #24]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c0:	4641      	mov	r1, r8
 80037c2:	1851      	adds	r1, r2, r1
 80037c4:	6139      	str	r1, [r7, #16]
 80037c6:	4649      	mov	r1, r9
 80037c8:	414b      	adcs	r3, r1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d8:	4659      	mov	r1, fp
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4651      	mov	r1, sl
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4642      	mov	r2, r8
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037f4:	464b      	mov	r3, r9
 80037f6:	460a      	mov	r2, r1
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	67bb      	str	r3, [r7, #120]	; 0x78
 800380a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003818:	4649      	mov	r1, r9
 800381a:	008b      	lsls	r3, r1, #2
 800381c:	4641      	mov	r1, r8
 800381e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003822:	4641      	mov	r1, r8
 8003824:	008a      	lsls	r2, r1, #2
 8003826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800382a:	f7fd f94f 	bl	8000acc <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4611      	mov	r1, r2
 8003834:	4b38      	ldr	r3, [pc, #224]	; (8003918 <UART_SetConfig+0x4e4>)
 8003836:	fba3 2301 	umull	r2, r3, r3, r1
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2264      	movs	r2, #100	; 0x64
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	3332      	adds	r3, #50	; 0x32
 8003848:	4a33      	ldr	r2, [pc, #204]	; (8003918 <UART_SetConfig+0x4e4>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003854:	441c      	add	r4, r3
 8003856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385a:	2200      	movs	r2, #0
 800385c:	673b      	str	r3, [r7, #112]	; 0x70
 800385e:	677a      	str	r2, [r7, #116]	; 0x74
 8003860:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	415b      	adcs	r3, r3
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003874:	4641      	mov	r1, r8
 8003876:	1851      	adds	r1, r2, r1
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800388c:	4659      	mov	r1, fp
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4651      	mov	r1, sl
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4642      	mov	r2, r8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a6:	464b      	mov	r3, r9
 80038a8:	460a      	mov	r2, r1
 80038aa:	eb42 0303 	adc.w	r3, r2, r3
 80038ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ba:	667a      	str	r2, [r7, #100]	; 0x64
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038c8:	4649      	mov	r1, r9
 80038ca:	008b      	lsls	r3, r1, #2
 80038cc:	4641      	mov	r1, r8
 80038ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d2:	4641      	mov	r1, r8
 80038d4:	008a      	lsls	r2, r1, #2
 80038d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038da:	f7fd f8f7 	bl	8000acc <__aeabi_uldivmod>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <UART_SetConfig+0x4e4>)
 80038e4:	fba3 1302 	umull	r1, r3, r3, r2
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	2164      	movs	r1, #100	; 0x64
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	3332      	adds	r3, #50	; 0x32
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <UART_SetConfig+0x4e4>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	f003 020f 	and.w	r2, r3, #15
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4422      	add	r2, r4
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003912:	46bd      	mov	sp, r7
 8003914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003918:	51eb851f 	.word	0x51eb851f

0800391c <__NVIC_SetPriority>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003974:	2100      	movs	r1, #0
 8003976:	f06f 0004 	mvn.w	r0, #4
 800397a:	f7ff ffcf 	bl	800391c <__NVIC_SetPriority>
#endif
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398a:	f3ef 8305 	mrs	r3, IPSR
 800398e:	603b      	str	r3, [r7, #0]
  return(result);
 8003990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003996:	f06f 0305 	mvn.w	r3, #5
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	e00c      	b.n	80039b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <osKernelInitialize+0x44>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <osKernelInitialize+0x44>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	e002      	b.n	80039b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039b8:	687b      	ldr	r3, [r7, #4]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000170 	.word	0x20000170

080039cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d2:	f3ef 8305 	mrs	r3, IPSR
 80039d6:	603b      	str	r3, [r7, #0]
  return(result);
 80039d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80039de:	f06f 0305 	mvn.w	r3, #5
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e010      	b.n	8003a08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <osKernelStart+0x48>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d109      	bne.n	8003a02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039ee:	f7ff ffbf 	bl	8003970 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <osKernelStart+0x48>)
 80039f4:	2202      	movs	r2, #2
 80039f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039f8:	f001 f8de 	bl	8004bb8 <vTaskStartScheduler>
      stat = osOK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	e002      	b.n	8003a08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295
 8003a06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a08:	687b      	ldr	r3, [r7, #4]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000170 	.word	0x20000170

08003a18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af04      	add	r7, sp, #16
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a28:	f3ef 8305 	mrs	r3, IPSR
 8003a2c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d17e      	bne.n	8003b32 <osThreadNew+0x11a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d07b      	beq.n	8003b32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a3e:	2318      	movs	r3, #24
 8003a40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d045      	beq.n	8003ade <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <osThreadNew+0x48>
        name = attr->name;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <osThreadNew+0x6e>
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b38      	cmp	r3, #56	; 0x38
 8003a78:	d805      	bhi.n	8003a86 <osThreadNew+0x6e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <osThreadNew+0x72>
        return (NULL);
 8003a86:	2300      	movs	r3, #0
 8003a88:	e054      	b.n	8003b34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <osThreadNew+0xa8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2ba7      	cmp	r3, #167	; 0xa7
 8003aa8:	d90a      	bls.n	8003ac0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <osThreadNew+0xa8>
        mem = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e010      	b.n	8003ae2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10c      	bne.n	8003ae2 <osThreadNew+0xca>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d108      	bne.n	8003ae2 <osThreadNew+0xca>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <osThreadNew+0xca>
          mem = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e001      	b.n	8003ae2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d110      	bne.n	8003b0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003af0:	9202      	str	r2, [sp, #8]
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fdf0 	bl	80046e4 <xTaskCreateStatic>
 8003b04:	4603      	mov	r3, r0
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e013      	b.n	8003b32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d110      	bne.n	8003b32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	f107 0310 	add.w	r3, r7, #16
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fe3b 	bl	800479e <xTaskCreate>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <osThreadNew+0x11a>
            hTask = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b32:	693b      	ldr	r3, [r7, #16]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3728      	adds	r7, #40	; 0x28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4a06      	ldr	r2, [pc, #24]	; (8003b6c <vApplicationGetIdleTaskMemory+0x30>)
 8003b52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000174 	.word	0x20000174
 8003b6c:	2000021c 	.word	0x2000021c

08003b70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003b80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <vApplicationGetTimerTaskMemory+0x30>)
 8003b86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	2000041c 	.word	0x2000041c
 8003ba0:	200004c4 	.word	0x200004c4

08003ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f103 0208 	add.w	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f103 0208 	add.w	r2, r3, #8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f103 0208 	add.w	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d103      	bne.n	8003c66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e00c      	b.n	8003c80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e002      	b.n	8003c74 <vListInsert+0x2e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d2f6      	bcs.n	8003c6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6892      	ldr	r2, [r2, #8]
 8003cce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6852      	ldr	r2, [r2, #4]
 8003cd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d103      	bne.n	8003cec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	1e5a      	subs	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d36:	f002 f8f5 	bl	8005f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	3b01      	subs	r3, #1
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	22ff      	movs	r2, #255	; 0xff
 8003d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d114      	bne.n	8003db6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01a      	beq.n	8003dca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3310      	adds	r3, #16
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 f9a7 	bl	80050ec <xTaskRemoveFromEventList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <xQueueGenericReset+0xcc>)
 8003da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	e009      	b.n	8003dca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3310      	adds	r3, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fef2 	bl	8003ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3324      	adds	r3, #36	; 0x24
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff feed 	bl	8003ba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dca:	f002 f8db 	bl	8005f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dce:	2301      	movs	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	; 0x38
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <xQueueGenericCreateStatic+0x52>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <xQueueGenericCreateStatic+0x56>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <xQueueGenericCreateStatic+0x58>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	623b      	str	r3, [r7, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <xQueueGenericCreateStatic+0x7e>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <xQueueGenericCreateStatic+0x82>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <xQueueGenericCreateStatic+0x84>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	61fb      	str	r3, [r7, #28]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e7a:	2350      	movs	r3, #80	; 0x50
 8003e7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d00a      	beq.n	8003e9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	61bb      	str	r3, [r7, #24]
}
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f805 	bl	8003ecc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e002      	b.n	8003eee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003efa:	2101      	movs	r1, #1
 8003efc:	69b8      	ldr	r0, [r7, #24]
 8003efe:	f7ff ff05 	bl	8003d0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f22:	2300      	movs	r3, #0
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xQueueGenericSend+0x32>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <xQueueGenericSend+0x40>
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <xQueueGenericSend+0x44>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <xQueueGenericSend+0x46>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <xQueueGenericSend+0x60>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d103      	bne.n	8003f82 <xQueueGenericSend+0x6e>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <xQueueGenericSend+0x72>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <xQueueGenericSend+0x74>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	623b      	str	r3, [r7, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fa2:	f001 fa65 	bl	8005470 <xTaskGetSchedulerState>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <xQueueGenericSend+0x9e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <xQueueGenericSend+0xa2>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <xQueueGenericSend+0xa4>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	61fb      	str	r3, [r7, #28]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fd2:	f001 ffa7 	bl	8005f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <xQueueGenericSend+0xd4>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d129      	bne.n	800403c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fee:	f000 fa0b 	bl	8004408 <prvCopyDataToQueue>
 8003ff2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	3324      	adds	r3, #36	; 0x24
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f873 	bl	80050ec <xTaskRemoveFromEventList>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800400c:	4b3f      	ldr	r3, [pc, #252]	; (800410c <xQueueGenericSend+0x1f8>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	e00a      	b.n	8004034 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004024:	4b39      	ldr	r3, [pc, #228]	; (800410c <xQueueGenericSend+0x1f8>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004034:	f001 ffa6 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8004038:	2301      	movs	r3, #1
 800403a:	e063      	b.n	8004104 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004042:	f001 ff9f 	bl	8005f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004046:	2300      	movs	r3, #0
 8004048:	e05c      	b.n	8004104 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f8ad 	bl	80051b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800405e:	f001 ff91 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004062:	f000 fe19 	bl	8004c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004066:	f001 ff5d 	bl	8005f24 <vPortEnterCritical>
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d103      	bne.n	8004080 <xQueueGenericSend+0x16c>
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004086:	b25b      	sxtb	r3, r3
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x182>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004096:	f001 ff75 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800409a:	1d3a      	adds	r2, r7, #4
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 f89c 	bl	80051e0 <xTaskCheckForTimeOut>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d124      	bne.n	80040f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b0:	f000 faa2 	bl	80045f8 <prvIsQueueFull>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	3310      	adds	r3, #16
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 ffc2 	bl	800504c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ca:	f000 fa2d 	bl	8004528 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ce:	f000 fdf1 	bl	8004cb4 <xTaskResumeAll>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f af7c 	bne.w	8003fd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <xQueueGenericSend+0x1f8>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	e772      	b.n	8003fd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ee:	f000 fa1b 	bl	8004528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040f2:	f000 fddf 	bl	8004cb4 <xTaskResumeAll>
 80040f6:	e76c      	b.n	8003fd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040fa:	f000 fa15 	bl	8004528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040fe:	f000 fdd9 	bl	8004cb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004104:	4618      	mov	r0, r3
 8004106:	3738      	adds	r7, #56	; 0x38
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b090      	sub	sp, #64	; 0x40
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <xQueueGenericSendFromISR+0x3c>
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <xQueueGenericSendFromISR+0x40>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <xQueueGenericSendFromISR+0x42>
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d103      	bne.n	800417a <xQueueGenericSendFromISR+0x6a>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <xQueueGenericSendFromISR+0x6e>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericSendFromISR+0x70>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800419a:	f001 ffa5 	bl	80060e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800419e:	f3ef 8211 	mrs	r2, BASEPRI
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	61fa      	str	r2, [r7, #28]
 80041b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <xQueueGenericSendFromISR+0xbc>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d12f      	bne.n	800422c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041e2:	f000 f911 	bl	8004408 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d112      	bne.n	8004216 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d016      	beq.n	8004226 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	3324      	adds	r3, #36	; 0x24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 ff75 	bl	80050ec <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800421a:	3301      	adds	r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	b25a      	sxtb	r2, r3
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004226:	2301      	movs	r3, #1
 8004228:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800422a:	e001      	b.n	8004230 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800422c:	2300      	movs	r3, #0
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800423a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800423c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800423e:	4618      	mov	r0, r3
 8004240:	3740      	adds	r7, #64	; 0x40
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <xQueueReceive+0x30>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	623b      	str	r3, [r7, #32]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <xQueueReceive+0x3e>
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <xQueueReceive+0x42>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <xQueueReceive+0x44>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <xQueueReceive+0x5e>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	61fb      	str	r3, [r7, #28]
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042a6:	f001 f8e3 	bl	8005470 <xTaskGetSchedulerState>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <xQueueReceive+0x6e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <xQueueReceive+0x72>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <xQueueReceive+0x74>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xQueueReceive+0x8e>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	61bb      	str	r3, [r7, #24]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042d6:	f001 fe25 	bl	8005f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01f      	beq.n	8004326 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ea:	f000 f8f7 	bl	80044dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	1e5a      	subs	r2, r3, #1
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00f      	beq.n	800431e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	3310      	adds	r3, #16
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fef2 	bl	80050ec <xTaskRemoveFromEventList>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800430e:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <xQueueReceive+0x1bc>)
 8004310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800431e:	f001 fe31 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8004322:	2301      	movs	r3, #1
 8004324:	e069      	b.n	80043fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800432c:	f001 fe2a 	bl	8005f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004330:	2300      	movs	r3, #0
 8004332:	e062      	b.n	80043fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800433a:	f107 0310 	add.w	r3, r7, #16
 800433e:	4618      	mov	r0, r3
 8004340:	f000 ff38 	bl	80051b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004348:	f001 fe1c 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800434c:	f000 fca4 	bl	8004c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004350:	f001 fde8 	bl	8005f24 <vPortEnterCritical>
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800435a:	b25b      	sxtb	r3, r3
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d103      	bne.n	800436a <xQueueReceive+0x122>
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004370:	b25b      	sxtb	r3, r3
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d103      	bne.n	8004380 <xQueueReceive+0x138>
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004380:	f001 fe00 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004384:	1d3a      	adds	r2, r7, #4
 8004386:	f107 0310 	add.w	r3, r7, #16
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 ff27 	bl	80051e0 <xTaskCheckForTimeOut>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d123      	bne.n	80043e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800439a:	f000 f917 	bl	80045cc <prvIsQueueEmpty>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d017      	beq.n	80043d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	3324      	adds	r3, #36	; 0x24
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fe4d 	bl	800504c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b4:	f000 f8b8 	bl	8004528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043b8:	f000 fc7c 	bl	8004cb4 <xTaskResumeAll>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d189      	bne.n	80042d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <xQueueReceive+0x1bc>)
 80043c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	e780      	b.n	80042d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d6:	f000 f8a7 	bl	8004528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043da:	f000 fc6b 	bl	8004cb4 <xTaskResumeAll>
 80043de:	e77a      	b.n	80042d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e2:	f000 f8a1 	bl	8004528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043e6:	f000 fc65 	bl	8004cb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ec:	f000 f8ee 	bl	80045cc <prvIsQueueEmpty>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f43f af6f 	beq.w	80042d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3730      	adds	r7, #48	; 0x30
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d14d      	bne.n	80044ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f83a 	bl	80054ac <xTaskPriorityDisinherit>
 8004438:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e043      	b.n	80044ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d119      	bne.n	800447c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6858      	ldr	r0, [r3, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	461a      	mov	r2, r3
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	f002 fb4c 	bl	8006af0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	441a      	add	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d32b      	bcc.n	80044ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	e026      	b.n	80044ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68d8      	ldr	r0, [r3, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	461a      	mov	r2, r3
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	f002 fb32 	bl	8006af0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	425b      	negs	r3, r3
 8004496:	441a      	add	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d207      	bcs.n	80044b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	425b      	negs	r3, r3
 80044b2:	441a      	add	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d105      	bne.n	80044ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	441a      	add	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d303      	bcc.n	8004510 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68d9      	ldr	r1, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	461a      	mov	r2, r3
 800451a:	6838      	ldr	r0, [r7, #0]
 800451c:	f002 fae8 	bl	8006af0 <memcpy>
	}
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004530:	f001 fcf8 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800453a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800453c:	e011      	b.n	8004562 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3324      	adds	r3, #36	; 0x24
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fdce 	bl	80050ec <xTaskRemoveFromEventList>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004556:	f000 fea5 	bl	80052a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3b01      	subs	r3, #1
 800455e:	b2db      	uxtb	r3, r3
 8004560:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	dce9      	bgt.n	800453e <prvUnlockQueue+0x16>
 800456a:	e000      	b.n	800456e <prvUnlockQueue+0x46>
					break;
 800456c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	22ff      	movs	r2, #255	; 0xff
 8004572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004576:	f001 fd05 	bl	8005f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800457a:	f001 fcd3 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004584:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004586:	e011      	b.n	80045ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3310      	adds	r3, #16
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fda9 	bl	80050ec <xTaskRemoveFromEventList>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045a0:	f000 fe80 	bl	80052a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dce9      	bgt.n	8004588 <prvUnlockQueue+0x60>
 80045b4:	e000      	b.n	80045b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045c0:	f001 fce0 	bl	8005f84 <vPortExitCritical>
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045d4:	f001 fca6 	bl	8005f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e001      	b.n	80045ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ea:	f001 fccb 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004600:	f001 fc90 	bl	8005f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	429a      	cmp	r2, r3
 800460e:	d102      	bne.n	8004616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e001      	b.n	800461a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800461a:	f001 fcb3 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e014      	b.n	8004662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004638:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <vQueueAddToRegistry+0x50>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <vQueueAddToRegistry+0x50>)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <vQueueAddToRegistry+0x50>)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800465a:	e006      	b.n	800466a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b07      	cmp	r3, #7
 8004666:	d9e7      	bls.n	8004638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200008c4 	.word	0x200008c4

0800467c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800468c:	f001 fc4a 	bl	8005f24 <vPortEnterCritical>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004696:	b25b      	sxtb	r3, r3
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d103      	bne.n	80046a6 <vQueueWaitForMessageRestricted+0x2a>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d103      	bne.n	80046bc <vQueueWaitForMessageRestricted+0x40>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046bc:	f001 fc62 	bl	8005f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3324      	adds	r3, #36	; 0x24
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fcdf 	bl	8005094 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff ff26 	bl	8004528 <prvUnlockQueue>
	}
 80046dc:	bf00      	nop
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	; 0x38
 80046e8:	af04      	add	r7, sp, #16
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xTaskCreateStatic+0x2a>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xTaskCreateStatic+0x46>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61fb      	str	r3, [r7, #28]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800472a:	23a8      	movs	r3, #168	; 0xa8
 800472c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2ba8      	cmp	r3, #168	; 0xa8
 8004732:	d00a      	beq.n	800474a <xTaskCreateStatic+0x66>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61bb      	str	r3, [r7, #24]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800474a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01e      	beq.n	8004790 <xTaskCreateStatic+0xac>
 8004752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01b      	beq.n	8004790 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004760:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	2202      	movs	r2, #2
 8004766:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800476a:	2300      	movs	r3, #0
 800476c:	9303      	str	r3, [sp, #12]
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f850 	bl	8004828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800478a:	f000 f8f3 	bl	8004974 <prvAddNewTaskToReadyList>
 800478e:	e001      	b.n	8004794 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004794:	697b      	ldr	r3, [r7, #20]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	3728      	adds	r7, #40	; 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b08c      	sub	sp, #48	; 0x30
 80047a2:	af04      	add	r7, sp, #16
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 fcd8 	bl	8006168 <pvPortMalloc>
 80047b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047c0:	20a8      	movs	r0, #168	; 0xa8
 80047c2:	f001 fcd1 	bl	8006168 <pvPortMalloc>
 80047c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
 80047d4:	e005      	b.n	80047e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f001 fd92 	bl	8006300 <vPortFree>
 80047dc:	e001      	b.n	80047e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d017      	beq.n	8004818 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9303      	str	r3, [sp, #12]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f80e 	bl	8004828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800480c:	69f8      	ldr	r0, [r7, #28]
 800480e:	f000 f8b1 	bl	8004974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004812:	2301      	movs	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e002      	b.n	800481e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
 800481c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800481e:	69bb      	ldr	r3, [r7, #24]
	}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	461a      	mov	r2, r3
 8004840:	21a5      	movs	r1, #165	; 0xa5
 8004842:	f002 f884 	bl	800694e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004850:	3b01      	subs	r3, #1
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <prvInitialiseNewTask+0x58>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	617b      	str	r3, [r7, #20]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01f      	beq.n	80048c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e012      	b.n	80048b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	7819      	ldrb	r1, [r3, #0]
 8004894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	3334      	adds	r3, #52	; 0x34
 800489c:	460a      	mov	r2, r1
 800489e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3301      	adds	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2b0f      	cmp	r3, #15
 80048b6:	d9e9      	bls.n	800488c <prvInitialiseNewTask+0x64>
 80048b8:	e000      	b.n	80048bc <prvInitialiseNewTask+0x94>
			{
				break;
 80048ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c4:	e003      	b.n	80048ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	2b37      	cmp	r3, #55	; 0x37
 80048d2:	d901      	bls.n	80048d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048d4:	2337      	movs	r3, #55	; 0x37
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	2200      	movs	r2, #0
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff f978 	bl	8003be4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	3318      	adds	r3, #24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff f973 	bl	8003be4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004902:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004912:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	2200      	movs	r2, #0
 8004920:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	3354      	adds	r3, #84	; 0x54
 8004928:	224c      	movs	r2, #76	; 0x4c
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f002 f80e 	bl	800694e <memset>
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <prvInitialiseNewTask+0x140>)
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	4a0c      	ldr	r2, [pc, #48]	; (800496c <prvInitialiseNewTask+0x144>)
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <prvInitialiseNewTask+0x148>)
 8004942:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	69b8      	ldr	r0, [r7, #24]
 800494a:	f001 f9bf 	bl	8005ccc <pxPortInitialiseStack>
 800494e:	4602      	mov	r2, r0
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004960:	bf00      	nop
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20004b58 	.word	0x20004b58
 800496c:	20004bc0 	.word	0x20004bc0
 8004970:	20004c28 	.word	0x20004c28

08004974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800497c:	f001 fad2 	bl	8005f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004980:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 8004988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004992:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d110      	bne.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049a0:	f000 fca4 	bl	80052ec <prvInitialiseTaskLists>
 80049a4:	e00d      	b.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049a6:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <prvAddNewTaskToReadyList+0xcc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d802      	bhi.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <prvAddNewTaskToReadyList+0xd4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <prvAddNewTaskToReadyList+0x74>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <prvAddNewTaskToReadyList+0xd4>)
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <prvAddNewTaskToReadyList+0xd8>)
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7ff f8fd 	bl	8003bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a04:	f001 fabe 	bl	8005f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <prvAddNewTaskToReadyList+0xcc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d207      	bcs.n	8004a2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <prvAddNewTaskToReadyList+0xdc>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000dd8 	.word	0x20000dd8
 8004a3c:	20000904 	.word	0x20000904
 8004a40:	20000de4 	.word	0x20000de4
 8004a44:	20000df4 	.word	0x20000df4
 8004a48:	20000de0 	.word	0x20000de0
 8004a4c:	20000908 	.word	0x20000908
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <vTaskDelayUntil+0x2a>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	617b      	str	r3, [r7, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <vTaskDelayUntil+0x46>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	613b      	str	r3, [r7, #16]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004a9a:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <vTaskDelayUntil+0xf0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <vTaskDelayUntil+0x64>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60fb      	str	r3, [r7, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004ab8:	f000 f8ee 	bl	8004c98 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004abc:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <vTaskDelayUntil+0xf4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	4413      	add	r3, r2
 8004aca:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a3a      	ldr	r2, [r7, #32]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d20b      	bcs.n	8004aee <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d211      	bcs.n	8004b04 <vTaskDelayUntil+0xb0>
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d90d      	bls.n	8004b04 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
 8004aec:	e00a      	b.n	8004b04 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d303      	bcc.n	8004b00 <vTaskDelayUntil+0xac>
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d901      	bls.n	8004b04 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fd35 	bl	8005588 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004b1e:	f000 f8c9 	bl	8004cb4 <xTaskResumeAll>
 8004b22:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004b2a:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <vTaskDelayUntil+0xf8>)
 8004b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b3a:	bf00      	nop
 8004b3c:	3728      	adds	r7, #40	; 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000e00 	.word	0x20000e00
 8004b48:	20000ddc 	.word	0x20000ddc
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d017      	beq.n	8004b92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b62:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <vTaskDelay+0x60>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <vTaskDelay+0x30>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b80:	f000 f88a 	bl	8004c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b84:	2100      	movs	r1, #0
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fcfe 	bl	8005588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b8c:	f000 f892 	bl	8004cb4 <xTaskResumeAll>
 8004b90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d107      	bne.n	8004ba8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <vTaskDelay+0x64>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000e00 	.word	0x20000e00
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bc6:	463a      	mov	r2, r7
 8004bc8:	1d39      	adds	r1, r7, #4
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe ffb4 	bl	8003b3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	9202      	str	r2, [sp, #8]
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	2300      	movs	r3, #0
 8004be4:	460a      	mov	r2, r1
 8004be6:	4924      	ldr	r1, [pc, #144]	; (8004c78 <vTaskStartScheduler+0xc0>)
 8004be8:	4824      	ldr	r0, [pc, #144]	; (8004c7c <vTaskStartScheduler+0xc4>)
 8004bea:	f7ff fd7b 	bl	80046e4 <xTaskCreateStatic>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4a23      	ldr	r2, [pc, #140]	; (8004c80 <vTaskStartScheduler+0xc8>)
 8004bf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bf4:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <vTaskStartScheduler+0xc8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e001      	b.n	8004c06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d102      	bne.n	8004c12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c0c:	f000 fd10 	bl	8005630 <xTimerCreateTimerTask>
 8004c10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d11b      	bne.n	8004c50 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	613b      	str	r3, [r7, #16]
}
 8004c2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c2c:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <vTaskStartScheduler+0xcc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3354      	adds	r3, #84	; 0x54
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <vTaskStartScheduler+0xd0>)
 8004c34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <vTaskStartScheduler+0xd4>)
 8004c38:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <vTaskStartScheduler+0xd8>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <vTaskStartScheduler+0xdc>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c4a:	f001 f8c9 	bl	8005de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c4e:	e00e      	b.n	8004c6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d10a      	bne.n	8004c6e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	60fb      	str	r3, [r7, #12]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <vTaskStartScheduler+0xb4>
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	08007684 	.word	0x08007684
 8004c7c:	080052bd 	.word	0x080052bd
 8004c80:	20000dfc 	.word	0x20000dfc
 8004c84:	20000904 	.word	0x20000904
 8004c88:	20000068 	.word	0x20000068
 8004c8c:	20000df8 	.word	0x20000df8
 8004c90:	20000de4 	.word	0x20000de4
 8004c94:	20000ddc 	.word	0x20000ddc

08004c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <vTaskSuspendAll+0x18>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a03      	ldr	r2, [pc, #12]	; (8004cb0 <vTaskSuspendAll+0x18>)
 8004ca4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ca6:	bf00      	nop
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000e00 	.word	0x20000e00

08004cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cc2:	4b42      	ldr	r3, [pc, #264]	; (8004dcc <xTaskResumeAll+0x118>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	603b      	str	r3, [r7, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ce0:	f001 f920 	bl	8005f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ce4:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <xTaskResumeAll+0x118>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4a38      	ldr	r2, [pc, #224]	; (8004dcc <xTaskResumeAll+0x118>)
 8004cec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cee:	4b37      	ldr	r3, [pc, #220]	; (8004dcc <xTaskResumeAll+0x118>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d162      	bne.n	8004dbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <xTaskResumeAll+0x11c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d05e      	beq.n	8004dbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cfe:	e02f      	b.n	8004d60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d00:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <xTaskResumeAll+0x120>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe ffd3 	bl	8003cb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe ffce 	bl	8003cb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <xTaskResumeAll+0x124>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d903      	bls.n	8004d30 <xTaskResumeAll+0x7c>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <xTaskResumeAll+0x124>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <xTaskResumeAll+0x128>)
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7fe ff59 	bl	8003bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <xTaskResumeAll+0x12c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d5a:	4b22      	ldr	r3, [pc, #136]	; (8004de4 <xTaskResumeAll+0x130>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d60:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <xTaskResumeAll+0x120>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1cb      	bne.n	8004d00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d6e:	f000 fb5f 	bl	8005430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <xTaskResumeAll+0x134>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d7e:	f000 f847 	bl	8004e10 <xTaskIncrementTick>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <xTaskResumeAll+0x130>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f1      	bne.n	8004d7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <xTaskResumeAll+0x134>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <xTaskResumeAll+0x130>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <xTaskResumeAll+0x138>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dbc:	f001 f8e2 	bl	8005f84 <vPortExitCritical>

	return xAlreadyYielded;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000e00 	.word	0x20000e00
 8004dd0:	20000dd8 	.word	0x20000dd8
 8004dd4:	20000d98 	.word	0x20000d98
 8004dd8:	20000de0 	.word	0x20000de0
 8004ddc:	20000908 	.word	0x20000908
 8004de0:	20000904 	.word	0x20000904
 8004de4:	20000dec 	.word	0x20000dec
 8004de8:	20000de8 	.word	0x20000de8
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <xTaskGetTickCount+0x1c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dfc:	687b      	ldr	r3, [r7, #4]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000ddc 	.word	0x20000ddc

08004e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e1a:	4b4f      	ldr	r3, [pc, #316]	; (8004f58 <xTaskIncrementTick+0x148>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 808f 	bne.w	8004f42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e24:	4b4d      	ldr	r3, [pc, #308]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e2c:	4a4b      	ldr	r2, [pc, #300]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d120      	bne.n	8004e7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e38:	4b49      	ldr	r3, [pc, #292]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	603b      	str	r3, [r7, #0]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <xTaskIncrementTick+0x46>
 8004e58:	4b41      	ldr	r3, [pc, #260]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <xTaskIncrementTick+0x154>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a3f      	ldr	r2, [pc, #252]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	4a3f      	ldr	r2, [pc, #252]	; (8004f64 <xTaskIncrementTick+0x154>)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	4a3d      	ldr	r2, [pc, #244]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	f000 fadb 	bl	8005430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e7a:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <xTaskIncrementTick+0x15c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d349      	bcc.n	8004f18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e84:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8e:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <xTaskIncrementTick+0x15c>)
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295
 8004e94:	601a      	str	r2, [r3, #0]
					break;
 8004e96:	e03f      	b.n	8004f18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e98:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d203      	bcs.n	8004eb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eb0:	4a2e      	ldr	r2, [pc, #184]	; (8004f6c <xTaskIncrementTick+0x15c>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004eb6:	e02f      	b.n	8004f18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fefb 	bl	8003cb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3318      	adds	r3, #24
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe fef2 	bl	8003cb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <xTaskIncrementTick+0x160>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d903      	bls.n	8004ee8 <xTaskIncrementTick+0xd8>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <xTaskIncrementTick+0x160>)
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <xTaskIncrementTick+0x164>)
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f7fe fe7d 	bl	8003bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <xTaskIncrementTick+0x168>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d3b8      	bcc.n	8004e84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f12:	2301      	movs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f16:	e7b5      	b.n	8004e84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <xTaskIncrementTick+0x168>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	4915      	ldr	r1, [pc, #84]	; (8004f74 <xTaskIncrementTick+0x164>)
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d901      	bls.n	8004f34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f30:	2301      	movs	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <xTaskIncrementTick+0x16c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e004      	b.n	8004f4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <xTaskIncrementTick+0x170>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3301      	adds	r3, #1
 8004f48:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <xTaskIncrementTick+0x170>)
 8004f4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f4c:	697b      	ldr	r3, [r7, #20]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000e00 	.word	0x20000e00
 8004f5c:	20000ddc 	.word	0x20000ddc
 8004f60:	20000d90 	.word	0x20000d90
 8004f64:	20000d94 	.word	0x20000d94
 8004f68:	20000df0 	.word	0x20000df0
 8004f6c:	20000df8 	.word	0x20000df8
 8004f70:	20000de0 	.word	0x20000de0
 8004f74:	20000908 	.word	0x20000908
 8004f78:	20000904 	.word	0x20000904
 8004f7c:	20000dec 	.word	0x20000dec
 8004f80:	20000de8 	.word	0x20000de8

08004f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <vTaskSwitchContext+0xb0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f92:	4b29      	ldr	r3, [pc, #164]	; (8005038 <vTaskSwitchContext+0xb4>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f98:	e046      	b.n	8005028 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004f9a:	4b27      	ldr	r3, [pc, #156]	; (8005038 <vTaskSwitchContext+0xb4>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa0:	4b26      	ldr	r3, [pc, #152]	; (800503c <vTaskSwitchContext+0xb8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e010      	b.n	8004fca <vTaskSwitchContext+0x46>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	607b      	str	r3, [r7, #4]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <vTaskSwitchContext+0x3e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	491d      	ldr	r1, [pc, #116]	; (8005040 <vTaskSwitchContext+0xbc>)
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0e4      	beq.n	8004fa8 <vTaskSwitchContext+0x24>
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4a15      	ldr	r2, [pc, #84]	; (8005040 <vTaskSwitchContext+0xbc>)
 8004fea:	4413      	add	r3, r2
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3308      	adds	r3, #8
 8005000:	429a      	cmp	r2, r3
 8005002:	d104      	bne.n	800500e <vTaskSwitchContext+0x8a>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <vTaskSwitchContext+0xc0>)
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4a08      	ldr	r2, [pc, #32]	; (800503c <vTaskSwitchContext+0xb8>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <vTaskSwitchContext+0xc0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3354      	adds	r3, #84	; 0x54
 8005024:	4a08      	ldr	r2, [pc, #32]	; (8005048 <vTaskSwitchContext+0xc4>)
 8005026:	6013      	str	r3, [r2, #0]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	20000e00 	.word	0x20000e00
 8005038:	20000dec 	.word	0x20000dec
 800503c:	20000de0 	.word	0x20000de0
 8005040:	20000908 	.word	0x20000908
 8005044:	20000904 	.word	0x20000904
 8005048:	20000068 	.word	0x20000068

0800504c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	60fb      	str	r3, [r7, #12]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <vTaskPlaceOnEventList+0x44>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3318      	adds	r3, #24
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fe fde3 	bl	8003c46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005080:	2101      	movs	r1, #1
 8005082:	6838      	ldr	r0, [r7, #0]
 8005084:	f000 fa80 	bl	8005588 <prvAddCurrentTaskToDelayedList>
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000904 	.word	0x20000904

08005094 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	617b      	str	r3, [r7, #20]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3318      	adds	r3, #24
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7fe fd9a 	bl	8003bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295
 80050d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	68b8      	ldr	r0, [r7, #8]
 80050da:	f000 fa55 	bl	8005588 <prvAddCurrentTaskToDelayedList>
	}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000904 	.word	0x20000904

080050ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	3318      	adds	r3, #24
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe fdcb 	bl	8003cb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005122:	4b1e      	ldr	r3, [pc, #120]	; (800519c <xTaskRemoveFromEventList+0xb0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11d      	bne.n	8005166 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3304      	adds	r3, #4
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fdc2 	bl	8003cb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <xTaskRemoveFromEventList+0xb4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d903      	bls.n	8005148 <xTaskRemoveFromEventList+0x5c>
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <xTaskRemoveFromEventList+0xb4>)
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <xTaskRemoveFromEventList+0xb8>)
 8005156:	441a      	add	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f7fe fd4d 	bl	8003bfe <vListInsertEnd>
 8005164:	e005      	b.n	8005172 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3318      	adds	r3, #24
 800516a:	4619      	mov	r1, r3
 800516c:	480e      	ldr	r0, [pc, #56]	; (80051a8 <xTaskRemoveFromEventList+0xbc>)
 800516e:	f7fe fd46 	bl	8003bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <xTaskRemoveFromEventList+0xc0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	429a      	cmp	r2, r3
 800517e:	d905      	bls.n	800518c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <xTaskRemoveFromEventList+0xc4>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e001      	b.n	8005190 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005190:	697b      	ldr	r3, [r7, #20]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000e00 	.word	0x20000e00
 80051a0:	20000de0 	.word	0x20000de0
 80051a4:	20000908 	.word	0x20000908
 80051a8:	20000d98 	.word	0x20000d98
 80051ac:	20000904 	.word	0x20000904
 80051b0:	20000dec 	.word	0x20000dec

080051b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <vTaskInternalSetTimeOutState+0x24>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <vTaskInternalSetTimeOutState+0x28>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	605a      	str	r2, [r3, #4]
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000df0 	.word	0x20000df0
 80051dc:	20000ddc 	.word	0x20000ddc

080051e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	613b      	str	r3, [r7, #16]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60fb      	str	r3, [r7, #12]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005222:	f000 fe7f 	bl	8005f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005226:	4b1d      	ldr	r3, [pc, #116]	; (800529c <xTaskCheckForTimeOut+0xbc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d102      	bne.n	8005246 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	e023      	b.n	800528e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <xTaskCheckForTimeOut+0xc0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d007      	beq.n	8005262 <xTaskCheckForTimeOut+0x82>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800525c:	2301      	movs	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	e015      	b.n	800528e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	429a      	cmp	r2, r3
 800526a:	d20b      	bcs.n	8005284 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ff9b 	bl	80051b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	e004      	b.n	800528e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800528e:	f000 fe79 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 8005292:	69fb      	ldr	r3, [r7, #28]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000ddc 	.word	0x20000ddc
 80052a0:	20000df0 	.word	0x20000df0

080052a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <vTaskMissedYield+0x14>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	bf00      	nop
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000dec 	.word	0x20000dec

080052bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052c4:	f000 f852 	bl	800536c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <prvIdleTask+0x28>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d9f9      	bls.n	80052c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <prvIdleTask+0x2c>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052e0:	e7f0      	b.n	80052c4 <prvIdleTask+0x8>
 80052e2:	bf00      	nop
 80052e4:	20000908 	.word	0x20000908
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	e00c      	b.n	8005312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <prvInitialiseTaskLists+0x60>)
 8005304:	4413      	add	r3, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe fc4c 	bl	8003ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3301      	adds	r3, #1
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b37      	cmp	r3, #55	; 0x37
 8005316:	d9ef      	bls.n	80052f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005318:	480d      	ldr	r0, [pc, #52]	; (8005350 <prvInitialiseTaskLists+0x64>)
 800531a:	f7fe fc43 	bl	8003ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800531e:	480d      	ldr	r0, [pc, #52]	; (8005354 <prvInitialiseTaskLists+0x68>)
 8005320:	f7fe fc40 	bl	8003ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005324:	480c      	ldr	r0, [pc, #48]	; (8005358 <prvInitialiseTaskLists+0x6c>)
 8005326:	f7fe fc3d 	bl	8003ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800532a:	480c      	ldr	r0, [pc, #48]	; (800535c <prvInitialiseTaskLists+0x70>)
 800532c:	f7fe fc3a 	bl	8003ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <prvInitialiseTaskLists+0x74>)
 8005332:	f7fe fc37 	bl	8003ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <prvInitialiseTaskLists+0x78>)
 8005338:	4a05      	ldr	r2, [pc, #20]	; (8005350 <prvInitialiseTaskLists+0x64>)
 800533a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <prvInitialiseTaskLists+0x7c>)
 800533e:	4a05      	ldr	r2, [pc, #20]	; (8005354 <prvInitialiseTaskLists+0x68>)
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000908 	.word	0x20000908
 8005350:	20000d68 	.word	0x20000d68
 8005354:	20000d7c 	.word	0x20000d7c
 8005358:	20000d98 	.word	0x20000d98
 800535c:	20000dac 	.word	0x20000dac
 8005360:	20000dc4 	.word	0x20000dc4
 8005364:	20000d90 	.word	0x20000d90
 8005368:	20000d94 	.word	0x20000d94

0800536c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005372:	e019      	b.n	80053a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005374:	f000 fdd6 	bl	8005f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <prvCheckTasksWaitingTermination+0x50>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fc97 	bl	8003cb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <prvCheckTasksWaitingTermination+0x54>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <prvCheckTasksWaitingTermination+0x54>)
 8005392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <prvCheckTasksWaitingTermination+0x58>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3b01      	subs	r3, #1
 800539a:	4a0a      	ldr	r2, [pc, #40]	; (80053c4 <prvCheckTasksWaitingTermination+0x58>)
 800539c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800539e:	f000 fdf1 	bl	8005f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f810 	bl	80053c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <prvCheckTasksWaitingTermination+0x58>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e1      	bne.n	8005374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000dac 	.word	0x20000dac
 80053c0:	20000dd8 	.word	0x20000dd8
 80053c4:	20000dc0 	.word	0x20000dc0

080053c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3354      	adds	r3, #84	; 0x54
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 fad3 	bl	8006980 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d108      	bne.n	80053f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 ff89 	bl	8006300 <vPortFree>
				vPortFree( pxTCB );
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 ff86 	bl	8006300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053f4:	e018      	b.n	8005428 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d103      	bne.n	8005408 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 ff7d 	bl	8006300 <vPortFree>
	}
 8005406:	e00f      	b.n	8005428 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800540e:	2b02      	cmp	r3, #2
 8005410:	d00a      	beq.n	8005428 <prvDeleteTCB+0x60>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60fb      	str	r3, [r7, #12]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <prvDeleteTCB+0x5e>
	}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <prvResetNextTaskUnblockTime+0x38>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005440:	4b0a      	ldr	r3, [pc, #40]	; (800546c <prvResetNextTaskUnblockTime+0x3c>)
 8005442:	f04f 32ff 	mov.w	r2, #4294967295
 8005446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005448:	e008      	b.n	800545c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <prvResetNextTaskUnblockTime+0x38>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a04      	ldr	r2, [pc, #16]	; (800546c <prvResetNextTaskUnblockTime+0x3c>)
 800545a:	6013      	str	r3, [r2, #0]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	20000d90 	.word	0x20000d90
 800546c:	20000df8 	.word	0x20000df8

08005470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <xTaskGetSchedulerState+0x34>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800547e:	2301      	movs	r3, #1
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	e008      	b.n	8005496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005484:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <xTaskGetSchedulerState+0x38>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800548c:	2302      	movs	r3, #2
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	e001      	b.n	8005496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005496:	687b      	ldr	r3, [r7, #4]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	20000de4 	.word	0x20000de4
 80054a8:	20000e00 	.word	0x20000e00

080054ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d056      	beq.n	8005570 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054c2:	4b2e      	ldr	r3, [pc, #184]	; (800557c <xTaskPriorityDisinherit+0xd0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d00a      	beq.n	80054e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60fb      	str	r3, [r7, #12]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	60bb      	str	r3, [r7, #8]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	1e5a      	subs	r2, r3, #1
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	429a      	cmp	r2, r3
 8005514:	d02c      	beq.n	8005570 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	2b00      	cmp	r3, #0
 800551c:	d128      	bne.n	8005570 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3304      	adds	r3, #4
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fbc8 	bl	8003cb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <xTaskPriorityDisinherit+0xd4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d903      	bls.n	8005550 <xTaskPriorityDisinherit+0xa4>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <xTaskPriorityDisinherit+0xd4>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <xTaskPriorityDisinherit+0xd8>)
 800555e:	441a      	add	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fe fb49 	bl	8003bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005570:	697b      	ldr	r3, [r7, #20]
	}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000904 	.word	0x20000904
 8005580:	20000de0 	.word	0x20000de0
 8005584:	20000908 	.word	0x20000908

08005588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005592:	4b21      	ldr	r3, [pc, #132]	; (8005618 <prvAddCurrentTaskToDelayedList+0x90>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005598:	4b20      	ldr	r3, [pc, #128]	; (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fb8a 	bl	8003cb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d10a      	bne.n	80055c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b2:	4b1a      	ldr	r3, [pc, #104]	; (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4819      	ldr	r0, [pc, #100]	; (8005620 <prvAddCurrentTaskToDelayedList+0x98>)
 80055bc:	f7fe fb1f 	bl	8003bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c0:	e026      	b.n	8005610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d209      	bcs.n	80055ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f7fe fb2d 	bl	8003c46 <vListInsert>
}
 80055ec:	e010      	b.n	8005610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ee:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <prvAddCurrentTaskToDelayedList+0x94>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7fe fb23 	bl	8003c46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	d202      	bcs.n	8005610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800560a:	4a08      	ldr	r2, [pc, #32]	; (800562c <prvAddCurrentTaskToDelayedList+0xa4>)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000ddc 	.word	0x20000ddc
 800561c:	20000904 	.word	0x20000904
 8005620:	20000dc4 	.word	0x20000dc4
 8005624:	20000d94 	.word	0x20000d94
 8005628:	20000d90 	.word	0x20000d90
 800562c:	20000df8 	.word	0x20000df8

08005630 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800563a:	f000 fb07 	bl	8005c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800563e:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <xTimerCreateTimerTask+0x80>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d021      	beq.n	800568a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800564e:	1d3a      	adds	r2, r7, #4
 8005650:	f107 0108 	add.w	r1, r7, #8
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fa89 	bl	8003b70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	9202      	str	r2, [sp, #8]
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	2302      	movs	r3, #2
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2300      	movs	r3, #0
 800566e:	460a      	mov	r2, r1
 8005670:	4910      	ldr	r1, [pc, #64]	; (80056b4 <xTimerCreateTimerTask+0x84>)
 8005672:	4811      	ldr	r0, [pc, #68]	; (80056b8 <xTimerCreateTimerTask+0x88>)
 8005674:	f7ff f836 	bl	80046e4 <xTaskCreateStatic>
 8005678:	4603      	mov	r3, r0
 800567a:	4a10      	ldr	r2, [pc, #64]	; (80056bc <xTimerCreateTimerTask+0x8c>)
 800567c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800567e:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <xTimerCreateTimerTask+0x8c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	613b      	str	r3, [r7, #16]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056a6:	697b      	ldr	r3, [r7, #20]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000e34 	.word	0x20000e34
 80056b4:	0800768c 	.word	0x0800768c
 80056b8:	080057f5 	.word	0x080057f5
 80056bc:	20000e38 	.word	0x20000e38

080056c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	623b      	str	r3, [r7, #32]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056ee:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <xTimerGenericCommand+0x98>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d02a      	beq.n	800574c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b05      	cmp	r3, #5
 8005706:	dc18      	bgt.n	800573a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005708:	f7ff feb2 	bl	8005470 <xTaskGetSchedulerState>
 800570c:	4603      	mov	r3, r0
 800570e:	2b02      	cmp	r3, #2
 8005710:	d109      	bne.n	8005726 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <xTimerGenericCommand+0x98>)
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	f107 0110 	add.w	r1, r7, #16
 800571a:	2300      	movs	r3, #0
 800571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571e:	f7fe fbf9 	bl	8003f14 <xQueueGenericSend>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24
 8005724:	e012      	b.n	800574c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <xTimerGenericCommand+0x98>)
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f107 0110 	add.w	r1, r7, #16
 800572e:	2300      	movs	r3, #0
 8005730:	2200      	movs	r2, #0
 8005732:	f7fe fbef 	bl	8003f14 <xQueueGenericSend>
 8005736:	6278      	str	r0, [r7, #36]	; 0x24
 8005738:	e008      	b.n	800574c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <xTimerGenericCommand+0x98>)
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	f107 0110 	add.w	r1, r7, #16
 8005742:	2300      	movs	r3, #0
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	f7fe fce3 	bl	8004110 <xQueueGenericSendFromISR>
 800574a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800574e:	4618      	mov	r0, r3
 8005750:	3728      	adds	r7, #40	; 0x28
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000e34 	.word	0x20000e34

0800575c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af02      	add	r7, sp, #8
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005766:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <prvProcessExpiredTimer+0x94>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	3304      	adds	r3, #4
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fa9f 	bl	8003cb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d022      	beq.n	80057ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	18d1      	adds	r1, r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	6978      	ldr	r0, [r7, #20]
 8005796:	f000 f8d1 	bl	800593c <prvInsertTimerInActiveList>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01f      	beq.n	80057e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057a0:	2300      	movs	r3, #0
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2300      	movs	r3, #0
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	2100      	movs	r1, #0
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	f7ff ff88 	bl	80056c0 <xTimerGenericCommand>
 80057b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d113      	bne.n	80057e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60fb      	str	r3, [r7, #12]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	6978      	ldr	r0, [r7, #20]
 80057e6:	4798      	blx	r3
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000e2c 	.word	0x20000e2c

080057f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057fc:	f107 0308 	add.w	r3, r7, #8
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f857 	bl	80058b4 <prvGetNextExpireTime>
 8005806:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4619      	mov	r1, r3
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f803 	bl	8005818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005812:	f000 f8d5 	bl	80059c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005816:	e7f1      	b.n	80057fc <prvTimerTask+0x8>

08005818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005822:	f7ff fa39 	bl	8004c98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f866 	bl	80058fc <prvSampleTimeNow>
 8005830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d130      	bne.n	800589a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <prvProcessTimerOrBlockTask+0x3c>
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	429a      	cmp	r2, r3
 8005844:	d806      	bhi.n	8005854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005846:	f7ff fa35 	bl	8004cb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ff85 	bl	800575c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005852:	e024      	b.n	800589e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d008      	beq.n	800586c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800585a:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <prvProcessTimerOrBlockTask+0x90>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <prvProcessTimerOrBlockTask+0x50>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <prvProcessTimerOrBlockTask+0x52>
 8005868:	2300      	movs	r3, #0
 800586a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <prvProcessTimerOrBlockTask+0x94>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	4619      	mov	r1, r3
 800587a:	f7fe feff 	bl	800467c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800587e:	f7ff fa19 	bl	8004cb4 <xTaskResumeAll>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <prvProcessTimerOrBlockTask+0x98>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
}
 8005898:	e001      	b.n	800589e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800589a:	f7ff fa0b 	bl	8004cb4 <xTaskResumeAll>
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000e30 	.word	0x20000e30
 80058ac:	20000e34 	.word	0x20000e34
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <prvGetNextExpireTime+0x44>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <prvGetNextExpireTime+0x16>
 80058c6:	2201      	movs	r2, #1
 80058c8:	e000      	b.n	80058cc <prvGetNextExpireTime+0x18>
 80058ca:	2200      	movs	r2, #0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058d8:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <prvGetNextExpireTime+0x44>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e001      	b.n	80058e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000e2c 	.word	0x20000e2c

080058fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005904:	f7ff fa74 	bl	8004df0 <xTaskGetTickCount>
 8005908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800590a:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <prvSampleTimeNow+0x3c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d205      	bcs.n	8005920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005914:	f000 f936 	bl	8005b84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e002      	b.n	8005926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005926:	4a04      	ldr	r2, [pc, #16]	; (8005938 <prvSampleTimeNow+0x3c>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800592c:	68fb      	ldr	r3, [r7, #12]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000e3c 	.word	0x20000e3c

0800593c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d812      	bhi.n	8005988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	1ad2      	subs	r2, r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e01b      	b.n	80059ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <prvInsertTimerInActiveList+0x7c>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f7fe f960 	bl	8003c46 <vListInsert>
 8005986:	e012      	b.n	80059ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d206      	bcs.n	800599e <prvInsertTimerInActiveList+0x62>
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e007      	b.n	80059ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <prvInsertTimerInActiveList+0x80>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe f94c 	bl	8003c46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059ae:	697b      	ldr	r3, [r7, #20]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000e30 	.word	0x20000e30
 80059bc:	20000e2c 	.word	0x20000e2c

080059c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059c6:	e0ca      	b.n	8005b5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da18      	bge.n	8005a00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	3304      	adds	r3, #4
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	61fb      	str	r3, [r7, #28]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f6:	6850      	ldr	r0, [r2, #4]
 80059f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fa:	6892      	ldr	r2, [r2, #8]
 80059fc:	4611      	mov	r1, r2
 80059fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f2c0 80ab 	blt.w	8005b5e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe f94d 	bl	8003cb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a1e:	463b      	mov	r3, r7
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff6b 	bl	80058fc <prvSampleTimeNow>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b09      	cmp	r3, #9
 8005a2c:	f200 8096 	bhi.w	8005b5c <prvProcessReceivedCommands+0x19c>
 8005a30:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <prvProcessReceivedCommands+0x78>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a61 	.word	0x08005a61
 8005a40:	08005a61 	.word	0x08005a61
 8005a44:	08005ad5 	.word	0x08005ad5
 8005a48:	08005ae9 	.word	0x08005ae9
 8005a4c:	08005b33 	.word	0x08005b33
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a61 	.word	0x08005a61
 8005a58:	08005ad5 	.word	0x08005ad5
 8005a5c:	08005ae9 	.word	0x08005ae9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	18d1      	adds	r1, r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a80:	f7ff ff5c 	bl	800593c <prvInsertTimerInActiveList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d069      	beq.n	8005b5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d05e      	beq.n	8005b5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	441a      	add	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab2:	f7ff fe05 	bl	80056c0 <xTimerGenericCommand>
 8005ab6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d14f      	bne.n	8005b5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	61bb      	str	r3, [r7, #24]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ae6:	e03a      	b.n	8005b5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	617b      	str	r3, [r7, #20]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	18d1      	adds	r1, r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2c:	f7ff ff06 	bl	800593c <prvInsertTimerInActiveList>
					break;
 8005b30:	e015      	b.n	8005b5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b42:	f000 fbdd 	bl	8006300 <vPortFree>
 8005b46:	e00a      	b.n	8005b5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b5a:	e000      	b.n	8005b5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005b5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b5e:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <prvProcessReceivedCommands+0x1c0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1d39      	adds	r1, r7, #4
 8005b64:	2200      	movs	r2, #0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fb6e 	bl	8004248 <xQueueReceive>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f47f af2a 	bne.w	80059c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	3730      	adds	r7, #48	; 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000e34 	.word	0x20000e34

08005b84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b8a:	e048      	b.n	8005c1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <prvSwitchTimerLists+0xc0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b96:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <prvSwitchTimerLists+0xc0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe f887 	bl	8003cb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d02e      	beq.n	8005c1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d90e      	bls.n	8005bf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bde:	4b19      	ldr	r3, [pc, #100]	; (8005c44 <prvSwitchTimerLists+0xc0>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7fe f82c 	bl	8003c46 <vListInsert>
 8005bee:	e016      	b.n	8005c1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff fd60 	bl	80056c0 <xTimerGenericCommand>
 8005c00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	603b      	str	r3, [r7, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	e7fe      	b.n	8005c1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c1e:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <prvSwitchTimerLists+0xc0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1b1      	bne.n	8005b8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <prvSwitchTimerLists+0xc0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <prvSwitchTimerLists+0xc4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <prvSwitchTimerLists+0xc0>)
 8005c34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <prvSwitchTimerLists+0xc4>)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6013      	str	r3, [r2, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000e2c 	.word	0x20000e2c
 8005c48:	20000e30 	.word	0x20000e30

08005c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c52:	f000 f967 	bl	8005f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c56:	4b15      	ldr	r3, [pc, #84]	; (8005cac <prvCheckForValidListAndQueue+0x60>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d120      	bne.n	8005ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c5e:	4814      	ldr	r0, [pc, #80]	; (8005cb0 <prvCheckForValidListAndQueue+0x64>)
 8005c60:	f7fd ffa0 	bl	8003ba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c64:	4813      	ldr	r0, [pc, #76]	; (8005cb4 <prvCheckForValidListAndQueue+0x68>)
 8005c66:	f7fd ff9d 	bl	8003ba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c6a:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <prvCheckForValidListAndQueue+0x6c>)
 8005c6c:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <prvCheckForValidListAndQueue+0x64>)
 8005c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c70:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <prvCheckForValidListAndQueue+0x70>)
 8005c72:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <prvCheckForValidListAndQueue+0x68>)
 8005c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c76:	2300      	movs	r3, #0
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <prvCheckForValidListAndQueue+0x74>)
 8005c7c:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <prvCheckForValidListAndQueue+0x78>)
 8005c7e:	2110      	movs	r1, #16
 8005c80:	200a      	movs	r0, #10
 8005c82:	f7fe f8ab 	bl	8003ddc <xQueueGenericCreateStatic>
 8005c86:	4603      	mov	r3, r0
 8005c88:	4a08      	ldr	r2, [pc, #32]	; (8005cac <prvCheckForValidListAndQueue+0x60>)
 8005c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <prvCheckForValidListAndQueue+0x60>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <prvCheckForValidListAndQueue+0x60>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	490b      	ldr	r1, [pc, #44]	; (8005cc8 <prvCheckForValidListAndQueue+0x7c>)
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fcc4 	bl	8004628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ca0:	f000 f970 	bl	8005f84 <vPortExitCritical>
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000e34 	.word	0x20000e34
 8005cb0:	20000e04 	.word	0x20000e04
 8005cb4:	20000e18 	.word	0x20000e18
 8005cb8:	20000e2c 	.word	0x20000e2c
 8005cbc:	20000e30 	.word	0x20000e30
 8005cc0:	20000ee0 	.word	0x20000ee0
 8005cc4:	20000e40 	.word	0x20000e40
 8005cc8:	08007694 	.word	0x08007694

08005ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b04      	subs	r3, #4
 8005cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3b04      	subs	r3, #4
 8005cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cfc:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <pxPortInitialiseStack+0x64>)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3b14      	subs	r3, #20
 8005d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3b04      	subs	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f06f 0202 	mvn.w	r2, #2
 8005d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3b20      	subs	r3, #32
 8005d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d22:	68fb      	ldr	r3, [r7, #12]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	08005d35 	.word	0x08005d35

08005d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <prvTaskExitError+0x54>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d00a      	beq.n	8005d5e <prvTaskExitError+0x2a>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	60fb      	str	r3, [r7, #12]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <prvTaskExitError+0x28>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60bb      	str	r3, [r7, #8]
}
 8005d70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d72:	bf00      	nop
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0fc      	beq.n	8005d74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	2000000c 	.word	0x2000000c
 8005d8c:	00000000 	.word	0x00000000

08005d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <pxCurrentTCBConst2>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f380 8809 	msr	PSP, r0
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	4770      	bx	lr
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst2>:
 8005db0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005db8:	4808      	ldr	r0, [pc, #32]	; (8005ddc <prvPortStartFirstTask+0x24>)
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f380 8808 	msr	MSP, r0
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8814 	msr	CONTROL, r0
 8005dca:	b662      	cpsie	i
 8005dcc:	b661      	cpsie	f
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	df00      	svc	0
 8005dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dda:	bf00      	nop
 8005ddc:	e000ed08 	.word	0xe000ed08

08005de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005de6:	4b46      	ldr	r3, [pc, #280]	; (8005f00 <xPortStartScheduler+0x120>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a46      	ldr	r2, [pc, #280]	; (8005f04 <xPortStartScheduler+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10a      	bne.n	8005e06 <xPortStartScheduler+0x26>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	613b      	str	r3, [r7, #16]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e06:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <xPortStartScheduler+0x120>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3f      	ldr	r2, [pc, #252]	; (8005f08 <xPortStartScheduler+0x128>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10a      	bne.n	8005e26 <xPortStartScheduler+0x46>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <xPortStartScheduler+0x12c>)
 8005e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <xPortStartScheduler+0x130>)
 8005e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e4e:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e54:	e009      	b.n	8005e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d0ef      	beq.n	8005e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1c3 0307 	rsb	r3, r3, #7
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00a      	beq.n	8005e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <xPortStartScheduler+0x134>)
 8005eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <xPortStartScheduler+0x138>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ece:	f000 f8dd 	bl	800608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <xPortStartScheduler+0x13c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ed8:	f000 f8fc 	bl	80060d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0f      	ldr	r2, [pc, #60]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ee8:	f7ff ff66 	bl	8005db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eec:	f7ff f84a 	bl	8004f84 <vTaskSwitchContext>
	prvTaskExitError();
 8005ef0:	f7ff ff20 	bl	8005d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	e000ed00 	.word	0xe000ed00
 8005f04:	410fc271 	.word	0x410fc271
 8005f08:	410fc270 	.word	0x410fc270
 8005f0c:	e000e400 	.word	0xe000e400
 8005f10:	20000f30 	.word	0x20000f30
 8005f14:	20000f34 	.word	0x20000f34
 8005f18:	e000ed20 	.word	0xe000ed20
 8005f1c:	2000000c 	.word	0x2000000c
 8005f20:	e000ef34 	.word	0xe000ef34

08005f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	607b      	str	r3, [r7, #4]
}
 8005f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	4a0d      	ldr	r2, [pc, #52]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d10f      	bne.n	8005f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <vPortEnterCritical+0x5c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	603b      	str	r3, [r7, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <vPortEnterCritical+0x4a>
	}
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	2000000c 	.word	0x2000000c
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <vPortExitCritical+0x50>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <vPortExitCritical+0x24>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	607b      	str	r3, [r7, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <vPortExitCritical+0x50>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <vPortExitCritical+0x42>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f383 8811 	msr	BASEPRI, r3
}
 8005fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	2000000c 	.word	0x2000000c
	...

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f7fe ffb8 	bl	8004f84 <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006062:	f7fe fed5 	bl	8004e10 <xTaskIncrementTick>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <xPortSysTickHandler+0x40>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <vPortSetupTimerInterrupt+0x38>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <vPortSetupTimerInterrupt+0x3c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <vPortSetupTimerInterrupt+0x40>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <vPortSetupTimerInterrupt+0x44>)
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e010 	.word	0xe000e010
 80060c4:	e000e018 	.word	0xe000e018
 80060c8:	20000000 	.word	0x20000000
 80060cc:	10624dd3 	.word	0x10624dd3
 80060d0:	e000e014 	.word	0xe000e014

080060d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060e4 <vPortEnableVFP+0x10>
 80060d8:	6801      	ldr	r1, [r0, #0]
 80060da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060de:	6001      	str	r1, [r0, #0]
 80060e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e000ed88 	.word	0xe000ed88

080060e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d914      	bls.n	8006124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <vPortValidateInterruptPriority+0x70>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006104:	4b15      	ldr	r3, [pc, #84]	; (800615c <vPortValidateInterruptPriority+0x74>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	429a      	cmp	r2, r3
 800610c:	d20a      	bcs.n	8006124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <vPortValidateInterruptPriority+0x78>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800612c:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <vPortValidateInterruptPriority+0x7c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d90a      	bls.n	800614a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	603b      	str	r3, [r7, #0]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <vPortValidateInterruptPriority+0x60>
	}
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000e3f0 	.word	0xe000e3f0
 800615c:	20000f30 	.word	0x20000f30
 8006160:	e000ed0c 	.word	0xe000ed0c
 8006164:	20000f34 	.word	0x20000f34

08006168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006174:	f7fe fd90 	bl	8004c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006178:	4b5b      	ldr	r3, [pc, #364]	; (80062e8 <pvPortMalloc+0x180>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006180:	f000 f920 	bl	80063c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <pvPortMalloc+0x184>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8093 	bne.w	80062b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01d      	beq.n	80061d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006198:	2208      	movs	r2, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <pvPortMalloc+0x6c>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	617b      	str	r3, [r7, #20]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06e      	beq.n	80062b8 <pvPortMalloc+0x150>
 80061da:	4b45      	ldr	r3, [pc, #276]	; (80062f0 <pvPortMalloc+0x188>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d869      	bhi.n	80062b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061e4:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <pvPortMalloc+0x18c>)
 80061e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061e8:	4b42      	ldr	r3, [pc, #264]	; (80062f4 <pvPortMalloc+0x18c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ee:	e004      	b.n	80061fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <pvPortMalloc+0xa4>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f1      	bne.n	80061f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <pvPortMalloc+0x180>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	429a      	cmp	r2, r3
 8006214:	d050      	beq.n	80062b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2208      	movs	r2, #8
 800621c:	4413      	add	r3, r2
 800621e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	2308      	movs	r3, #8
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	d91f      	bls.n	8006278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <pvPortMalloc+0xf8>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	613b      	str	r3, [r7, #16]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006272:	69b8      	ldr	r0, [r7, #24]
 8006274:	f000 f908 	bl	8006488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <pvPortMalloc+0x188>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <pvPortMalloc+0x188>)
 8006284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <pvPortMalloc+0x188>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <pvPortMalloc+0x190>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d203      	bcs.n	800629a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006292:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <pvPortMalloc+0x188>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <pvPortMalloc+0x190>)
 8006298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <pvPortMalloc+0x184>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <pvPortMalloc+0x194>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a11      	ldr	r2, [pc, #68]	; (80062fc <pvPortMalloc+0x194>)
 80062b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062b8:	f7fe fcfc 	bl	8004cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <pvPortMalloc+0x174>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <pvPortMalloc+0x172>
	return pvReturn;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3728      	adds	r7, #40	; 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20004b40 	.word	0x20004b40
 80062ec:	20004b54 	.word	0x20004b54
 80062f0:	20004b44 	.word	0x20004b44
 80062f4:	20004b38 	.word	0x20004b38
 80062f8:	20004b48 	.word	0x20004b48
 80062fc:	20004b4c 	.word	0x20004b4c

08006300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04d      	beq.n	80063ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006312:	2308      	movs	r3, #8
 8006314:	425b      	negs	r3, r3
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <vPortFree+0xb8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <vPortFree+0x44>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <vPortFree+0x62>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60bb      	str	r3, [r7, #8]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <vPortFree+0xb8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11a      	bne.n	80063ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <vPortFree+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006388:	f7fe fc86 	bl	8004c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vPortFree+0xbc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4413      	add	r3, r2
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <vPortFree+0xbc>)
 8006398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f874 	bl	8006488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <vPortFree+0xc0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a06      	ldr	r2, [pc, #24]	; (80063c0 <vPortFree+0xc0>)
 80063a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063aa:	f7fe fc83 	bl	8004cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20004b54 	.word	0x20004b54
 80063bc:	20004b44 	.word	0x20004b44
 80063c0:	20004b50 	.word	0x20004b50

080063c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <prvHeapInit+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <prvHeapInit+0xac>)
 80063f4:	4413      	add	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063fc:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <prvHeapInit+0xb0>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <prvHeapInit+0xb0>)
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006410:	2208      	movs	r2, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <prvHeapInit+0xb4>)
 8006424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <prvHeapInit+0xb4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <prvHeapInit+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <prvHeapInit+0xb4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a0a      	ldr	r2, [pc, #40]	; (800647c <prvHeapInit+0xb8>)
 8006452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a09      	ldr	r2, [pc, #36]	; (8006480 <prvHeapInit+0xbc>)
 800645a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <prvHeapInit+0xc0>)
 800645e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000f38 	.word	0x20000f38
 8006474:	20004b38 	.word	0x20004b38
 8006478:	20004b40 	.word	0x20004b40
 800647c:	20004b48 	.word	0x20004b48
 8006480:	20004b44 	.word	0x20004b44
 8006484:	20004b54 	.word	0x20004b54

08006488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <prvInsertBlockIntoFreeList+0xac>)
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <prvInsertBlockIntoFreeList+0x14>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d8f7      	bhi.n	8006496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d108      	bne.n	80064ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d118      	bne.n	8006510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b15      	ldr	r3, [pc, #84]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d00d      	beq.n	8006506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	e008      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e003      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d002      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20004b38 	.word	0x20004b38
 8006538:	20004b40 	.word	0x20004b40

0800653c <arm_mat_init_f32>:
 800653c:	8001      	strh	r1, [r0, #0]
 800653e:	8042      	strh	r2, [r0, #2]
 8006540:	6043      	str	r3, [r0, #4]
 8006542:	4770      	bx	lr

08006544 <rand>:
 8006544:	4b16      	ldr	r3, [pc, #88]	; (80065a0 <rand+0x5c>)
 8006546:	b510      	push	{r4, lr}
 8006548:	681c      	ldr	r4, [r3, #0]
 800654a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800654c:	b9b3      	cbnz	r3, 800657c <rand+0x38>
 800654e:	2018      	movs	r0, #24
 8006550:	f000 fb46 	bl	8006be0 <malloc>
 8006554:	4602      	mov	r2, r0
 8006556:	6320      	str	r0, [r4, #48]	; 0x30
 8006558:	b920      	cbnz	r0, 8006564 <rand+0x20>
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <rand+0x60>)
 800655c:	4812      	ldr	r0, [pc, #72]	; (80065a8 <rand+0x64>)
 800655e:	2152      	movs	r1, #82	; 0x52
 8006560:	f000 fad4 	bl	8006b0c <__assert_func>
 8006564:	4911      	ldr	r1, [pc, #68]	; (80065ac <rand+0x68>)
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <rand+0x6c>)
 8006568:	e9c0 1300 	strd	r1, r3, [r0]
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <rand+0x70>)
 800656e:	6083      	str	r3, [r0, #8]
 8006570:	230b      	movs	r3, #11
 8006572:	8183      	strh	r3, [r0, #12]
 8006574:	2100      	movs	r1, #0
 8006576:	2001      	movs	r0, #1
 8006578:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800657c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800657e:	480e      	ldr	r0, [pc, #56]	; (80065b8 <rand+0x74>)
 8006580:	690b      	ldr	r3, [r1, #16]
 8006582:	694c      	ldr	r4, [r1, #20]
 8006584:	4a0d      	ldr	r2, [pc, #52]	; (80065bc <rand+0x78>)
 8006586:	4358      	muls	r0, r3
 8006588:	fb02 0004 	mla	r0, r2, r4, r0
 800658c:	fba3 3202 	umull	r3, r2, r3, r2
 8006590:	3301      	adds	r3, #1
 8006592:	eb40 0002 	adc.w	r0, r0, r2
 8006596:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800659a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800659e:	bd10      	pop	{r4, pc}
 80065a0:	20000068 	.word	0x20000068
 80065a4:	080076d8 	.word	0x080076d8
 80065a8:	080076ef 	.word	0x080076ef
 80065ac:	abcd330e 	.word	0xabcd330e
 80065b0:	e66d1234 	.word	0xe66d1234
 80065b4:	0005deec 	.word	0x0005deec
 80065b8:	5851f42d 	.word	0x5851f42d
 80065bc:	4c957f2d 	.word	0x4c957f2d

080065c0 <__sflush_r>:
 80065c0:	898a      	ldrh	r2, [r1, #12]
 80065c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c6:	4605      	mov	r5, r0
 80065c8:	0710      	lsls	r0, r2, #28
 80065ca:	460c      	mov	r4, r1
 80065cc:	d458      	bmi.n	8006680 <__sflush_r+0xc0>
 80065ce:	684b      	ldr	r3, [r1, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dc05      	bgt.n	80065e0 <__sflush_r+0x20>
 80065d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	dc02      	bgt.n	80065e0 <__sflush_r+0x20>
 80065da:	2000      	movs	r0, #0
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	d0f9      	beq.n	80065da <__sflush_r+0x1a>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065ec:	682f      	ldr	r7, [r5, #0]
 80065ee:	6a21      	ldr	r1, [r4, #32]
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	d032      	beq.n	800665a <__sflush_r+0x9a>
 80065f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	075a      	lsls	r2, r3, #29
 80065fa:	d505      	bpl.n	8006608 <__sflush_r+0x48>
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	1ac0      	subs	r0, r0, r3
 8006600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006602:	b10b      	cbz	r3, 8006608 <__sflush_r+0x48>
 8006604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006606:	1ac0      	subs	r0, r0, r3
 8006608:	2300      	movs	r3, #0
 800660a:	4602      	mov	r2, r0
 800660c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800660e:	6a21      	ldr	r1, [r4, #32]
 8006610:	4628      	mov	r0, r5
 8006612:	47b0      	blx	r6
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	d106      	bne.n	8006628 <__sflush_r+0x68>
 800661a:	6829      	ldr	r1, [r5, #0]
 800661c:	291d      	cmp	r1, #29
 800661e:	d82b      	bhi.n	8006678 <__sflush_r+0xb8>
 8006620:	4a29      	ldr	r2, [pc, #164]	; (80066c8 <__sflush_r+0x108>)
 8006622:	410a      	asrs	r2, r1
 8006624:	07d6      	lsls	r6, r2, #31
 8006626:	d427      	bmi.n	8006678 <__sflush_r+0xb8>
 8006628:	2200      	movs	r2, #0
 800662a:	6062      	str	r2, [r4, #4]
 800662c:	04d9      	lsls	r1, r3, #19
 800662e:	6922      	ldr	r2, [r4, #16]
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	d504      	bpl.n	800663e <__sflush_r+0x7e>
 8006634:	1c42      	adds	r2, r0, #1
 8006636:	d101      	bne.n	800663c <__sflush_r+0x7c>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b903      	cbnz	r3, 800663e <__sflush_r+0x7e>
 800663c:	6560      	str	r0, [r4, #84]	; 0x54
 800663e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006640:	602f      	str	r7, [r5, #0]
 8006642:	2900      	cmp	r1, #0
 8006644:	d0c9      	beq.n	80065da <__sflush_r+0x1a>
 8006646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800664a:	4299      	cmp	r1, r3
 800664c:	d002      	beq.n	8006654 <__sflush_r+0x94>
 800664e:	4628      	mov	r0, r5
 8006650:	f000 fa7a 	bl	8006b48 <_free_r>
 8006654:	2000      	movs	r0, #0
 8006656:	6360      	str	r0, [r4, #52]	; 0x34
 8006658:	e7c0      	b.n	80065dc <__sflush_r+0x1c>
 800665a:	2301      	movs	r3, #1
 800665c:	4628      	mov	r0, r5
 800665e:	47b0      	blx	r6
 8006660:	1c41      	adds	r1, r0, #1
 8006662:	d1c8      	bne.n	80065f6 <__sflush_r+0x36>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0c5      	beq.n	80065f6 <__sflush_r+0x36>
 800666a:	2b1d      	cmp	r3, #29
 800666c:	d001      	beq.n	8006672 <__sflush_r+0xb2>
 800666e:	2b16      	cmp	r3, #22
 8006670:	d101      	bne.n	8006676 <__sflush_r+0xb6>
 8006672:	602f      	str	r7, [r5, #0]
 8006674:	e7b1      	b.n	80065da <__sflush_r+0x1a>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	e7ad      	b.n	80065dc <__sflush_r+0x1c>
 8006680:	690f      	ldr	r7, [r1, #16]
 8006682:	2f00      	cmp	r7, #0
 8006684:	d0a9      	beq.n	80065da <__sflush_r+0x1a>
 8006686:	0793      	lsls	r3, r2, #30
 8006688:	680e      	ldr	r6, [r1, #0]
 800668a:	bf08      	it	eq
 800668c:	694b      	ldreq	r3, [r1, #20]
 800668e:	600f      	str	r7, [r1, #0]
 8006690:	bf18      	it	ne
 8006692:	2300      	movne	r3, #0
 8006694:	eba6 0807 	sub.w	r8, r6, r7
 8006698:	608b      	str	r3, [r1, #8]
 800669a:	f1b8 0f00 	cmp.w	r8, #0
 800669e:	dd9c      	ble.n	80065da <__sflush_r+0x1a>
 80066a0:	6a21      	ldr	r1, [r4, #32]
 80066a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066a4:	4643      	mov	r3, r8
 80066a6:	463a      	mov	r2, r7
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b0      	blx	r6
 80066ac:	2800      	cmp	r0, #0
 80066ae:	dc06      	bgt.n	80066be <__sflush_r+0xfe>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	e78e      	b.n	80065dc <__sflush_r+0x1c>
 80066be:	4407      	add	r7, r0
 80066c0:	eba8 0800 	sub.w	r8, r8, r0
 80066c4:	e7e9      	b.n	800669a <__sflush_r+0xda>
 80066c6:	bf00      	nop
 80066c8:	dfbffffe 	.word	0xdfbffffe

080066cc <_fflush_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	690b      	ldr	r3, [r1, #16]
 80066d0:	4605      	mov	r5, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	b913      	cbnz	r3, 80066dc <_fflush_r+0x10>
 80066d6:	2500      	movs	r5, #0
 80066d8:	4628      	mov	r0, r5
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	b118      	cbz	r0, 80066e6 <_fflush_r+0x1a>
 80066de:	6a03      	ldr	r3, [r0, #32]
 80066e0:	b90b      	cbnz	r3, 80066e6 <_fflush_r+0x1a>
 80066e2:	f000 f8a9 	bl	8006838 <__sinit>
 80066e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f3      	beq.n	80066d6 <_fflush_r+0xa>
 80066ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066f0:	07d0      	lsls	r0, r2, #31
 80066f2:	d404      	bmi.n	80066fe <_fflush_r+0x32>
 80066f4:	0599      	lsls	r1, r3, #22
 80066f6:	d402      	bmi.n	80066fe <_fflush_r+0x32>
 80066f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fa:	f000 f9f7 	bl	8006aec <__retarget_lock_acquire_recursive>
 80066fe:	4628      	mov	r0, r5
 8006700:	4621      	mov	r1, r4
 8006702:	f7ff ff5d 	bl	80065c0 <__sflush_r>
 8006706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006708:	07da      	lsls	r2, r3, #31
 800670a:	4605      	mov	r5, r0
 800670c:	d4e4      	bmi.n	80066d8 <_fflush_r+0xc>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	059b      	lsls	r3, r3, #22
 8006712:	d4e1      	bmi.n	80066d8 <_fflush_r+0xc>
 8006714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006716:	f000 f9ea 	bl	8006aee <__retarget_lock_release_recursive>
 800671a:	e7dd      	b.n	80066d8 <_fflush_r+0xc>

0800671c <fflush>:
 800671c:	4601      	mov	r1, r0
 800671e:	b920      	cbnz	r0, 800672a <fflush+0xe>
 8006720:	4a04      	ldr	r2, [pc, #16]	; (8006734 <fflush+0x18>)
 8006722:	4905      	ldr	r1, [pc, #20]	; (8006738 <fflush+0x1c>)
 8006724:	4805      	ldr	r0, [pc, #20]	; (800673c <fflush+0x20>)
 8006726:	f000 b89f 	b.w	8006868 <_fwalk_sglue>
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <fflush+0x24>)
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f7ff bfcd 	b.w	80066cc <_fflush_r>
 8006732:	bf00      	nop
 8006734:	20000010 	.word	0x20000010
 8006738:	080066cd 	.word	0x080066cd
 800673c:	2000001c 	.word	0x2000001c
 8006740:	20000068 	.word	0x20000068

08006744 <std>:
 8006744:	2300      	movs	r3, #0
 8006746:	b510      	push	{r4, lr}
 8006748:	4604      	mov	r4, r0
 800674a:	e9c0 3300 	strd	r3, r3, [r0]
 800674e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006752:	6083      	str	r3, [r0, #8]
 8006754:	8181      	strh	r1, [r0, #12]
 8006756:	6643      	str	r3, [r0, #100]	; 0x64
 8006758:	81c2      	strh	r2, [r0, #14]
 800675a:	6183      	str	r3, [r0, #24]
 800675c:	4619      	mov	r1, r3
 800675e:	2208      	movs	r2, #8
 8006760:	305c      	adds	r0, #92	; 0x5c
 8006762:	f000 f8f4 	bl	800694e <memset>
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <std+0x38>)
 8006768:	6263      	str	r3, [r4, #36]	; 0x24
 800676a:	4b05      	ldr	r3, [pc, #20]	; (8006780 <std+0x3c>)
 800676c:	62a3      	str	r3, [r4, #40]	; 0x28
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <std+0x40>)
 8006770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <std+0x44>)
 8006774:	6224      	str	r4, [r4, #32]
 8006776:	6323      	str	r3, [r4, #48]	; 0x30
 8006778:	bd10      	pop	{r4, pc}
 800677a:	bf00      	nop
 800677c:	080068c9 	.word	0x080068c9
 8006780:	080068eb 	.word	0x080068eb
 8006784:	08006923 	.word	0x08006923
 8006788:	08006947 	.word	0x08006947

0800678c <stdio_exit_handler>:
 800678c:	4a02      	ldr	r2, [pc, #8]	; (8006798 <stdio_exit_handler+0xc>)
 800678e:	4903      	ldr	r1, [pc, #12]	; (800679c <stdio_exit_handler+0x10>)
 8006790:	4803      	ldr	r0, [pc, #12]	; (80067a0 <stdio_exit_handler+0x14>)
 8006792:	f000 b869 	b.w	8006868 <_fwalk_sglue>
 8006796:	bf00      	nop
 8006798:	20000010 	.word	0x20000010
 800679c:	080066cd 	.word	0x080066cd
 80067a0:	2000001c 	.word	0x2000001c

080067a4 <cleanup_stdio>:
 80067a4:	6841      	ldr	r1, [r0, #4]
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <cleanup_stdio+0x34>)
 80067a8:	4299      	cmp	r1, r3
 80067aa:	b510      	push	{r4, lr}
 80067ac:	4604      	mov	r4, r0
 80067ae:	d001      	beq.n	80067b4 <cleanup_stdio+0x10>
 80067b0:	f7ff ff8c 	bl	80066cc <_fflush_r>
 80067b4:	68a1      	ldr	r1, [r4, #8]
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <cleanup_stdio+0x38>)
 80067b8:	4299      	cmp	r1, r3
 80067ba:	d002      	beq.n	80067c2 <cleanup_stdio+0x1e>
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff ff85 	bl	80066cc <_fflush_r>
 80067c2:	68e1      	ldr	r1, [r4, #12]
 80067c4:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <cleanup_stdio+0x3c>)
 80067c6:	4299      	cmp	r1, r3
 80067c8:	d004      	beq.n	80067d4 <cleanup_stdio+0x30>
 80067ca:	4620      	mov	r0, r4
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f7ff bf7c 	b.w	80066cc <_fflush_r>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	bf00      	nop
 80067d8:	20004b58 	.word	0x20004b58
 80067dc:	20004bc0 	.word	0x20004bc0
 80067e0:	20004c28 	.word	0x20004c28

080067e4 <global_stdio_init.part.0>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <global_stdio_init.part.0+0x30>)
 80067e8:	4c0b      	ldr	r4, [pc, #44]	; (8006818 <global_stdio_init.part.0+0x34>)
 80067ea:	4a0c      	ldr	r2, [pc, #48]	; (800681c <global_stdio_init.part.0+0x38>)
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	4620      	mov	r0, r4
 80067f0:	2200      	movs	r2, #0
 80067f2:	2104      	movs	r1, #4
 80067f4:	f7ff ffa6 	bl	8006744 <std>
 80067f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067fc:	2201      	movs	r2, #1
 80067fe:	2109      	movs	r1, #9
 8006800:	f7ff ffa0 	bl	8006744 <std>
 8006804:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006808:	2202      	movs	r2, #2
 800680a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800680e:	2112      	movs	r1, #18
 8006810:	f7ff bf98 	b.w	8006744 <std>
 8006814:	20004c90 	.word	0x20004c90
 8006818:	20004b58 	.word	0x20004b58
 800681c:	0800678d 	.word	0x0800678d

08006820 <__sfp_lock_acquire>:
 8006820:	4801      	ldr	r0, [pc, #4]	; (8006828 <__sfp_lock_acquire+0x8>)
 8006822:	f000 b963 	b.w	8006aec <__retarget_lock_acquire_recursive>
 8006826:	bf00      	nop
 8006828:	20004c99 	.word	0x20004c99

0800682c <__sfp_lock_release>:
 800682c:	4801      	ldr	r0, [pc, #4]	; (8006834 <__sfp_lock_release+0x8>)
 800682e:	f000 b95e 	b.w	8006aee <__retarget_lock_release_recursive>
 8006832:	bf00      	nop
 8006834:	20004c99 	.word	0x20004c99

08006838 <__sinit>:
 8006838:	b510      	push	{r4, lr}
 800683a:	4604      	mov	r4, r0
 800683c:	f7ff fff0 	bl	8006820 <__sfp_lock_acquire>
 8006840:	6a23      	ldr	r3, [r4, #32]
 8006842:	b11b      	cbz	r3, 800684c <__sinit+0x14>
 8006844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006848:	f7ff bff0 	b.w	800682c <__sfp_lock_release>
 800684c:	4b04      	ldr	r3, [pc, #16]	; (8006860 <__sinit+0x28>)
 800684e:	6223      	str	r3, [r4, #32]
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <__sinit+0x2c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f5      	bne.n	8006844 <__sinit+0xc>
 8006858:	f7ff ffc4 	bl	80067e4 <global_stdio_init.part.0>
 800685c:	e7f2      	b.n	8006844 <__sinit+0xc>
 800685e:	bf00      	nop
 8006860:	080067a5 	.word	0x080067a5
 8006864:	20004c90 	.word	0x20004c90

08006868 <_fwalk_sglue>:
 8006868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800686c:	4607      	mov	r7, r0
 800686e:	4688      	mov	r8, r1
 8006870:	4614      	mov	r4, r2
 8006872:	2600      	movs	r6, #0
 8006874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006878:	f1b9 0901 	subs.w	r9, r9, #1
 800687c:	d505      	bpl.n	800688a <_fwalk_sglue+0x22>
 800687e:	6824      	ldr	r4, [r4, #0]
 8006880:	2c00      	cmp	r4, #0
 8006882:	d1f7      	bne.n	8006874 <_fwalk_sglue+0xc>
 8006884:	4630      	mov	r0, r6
 8006886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688a:	89ab      	ldrh	r3, [r5, #12]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d907      	bls.n	80068a0 <_fwalk_sglue+0x38>
 8006890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006894:	3301      	adds	r3, #1
 8006896:	d003      	beq.n	80068a0 <_fwalk_sglue+0x38>
 8006898:	4629      	mov	r1, r5
 800689a:	4638      	mov	r0, r7
 800689c:	47c0      	blx	r8
 800689e:	4306      	orrs	r6, r0
 80068a0:	3568      	adds	r5, #104	; 0x68
 80068a2:	e7e9      	b.n	8006878 <_fwalk_sglue+0x10>

080068a4 <iprintf>:
 80068a4:	b40f      	push	{r0, r1, r2, r3}
 80068a6:	b507      	push	{r0, r1, r2, lr}
 80068a8:	4906      	ldr	r1, [pc, #24]	; (80068c4 <iprintf+0x20>)
 80068aa:	ab04      	add	r3, sp, #16
 80068ac:	6808      	ldr	r0, [r1, #0]
 80068ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b2:	6881      	ldr	r1, [r0, #8]
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	f000 fa71 	bl	8006d9c <_vfiprintf_r>
 80068ba:	b003      	add	sp, #12
 80068bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c0:	b004      	add	sp, #16
 80068c2:	4770      	bx	lr
 80068c4:	20000068 	.word	0x20000068

080068c8 <__sread>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	460c      	mov	r4, r1
 80068cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d0:	f000 f8be 	bl	8006a50 <_read_r>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	bfab      	itete	ge
 80068d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068da:	89a3      	ldrhlt	r3, [r4, #12]
 80068dc:	181b      	addge	r3, r3, r0
 80068de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068e2:	bfac      	ite	ge
 80068e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068e6:	81a3      	strhlt	r3, [r4, #12]
 80068e8:	bd10      	pop	{r4, pc}

080068ea <__swrite>:
 80068ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ee:	461f      	mov	r7, r3
 80068f0:	898b      	ldrh	r3, [r1, #12]
 80068f2:	05db      	lsls	r3, r3, #23
 80068f4:	4605      	mov	r5, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	4616      	mov	r6, r2
 80068fa:	d505      	bpl.n	8006908 <__swrite+0x1e>
 80068fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006900:	2302      	movs	r3, #2
 8006902:	2200      	movs	r2, #0
 8006904:	f000 f892 	bl	8006a2c <_lseek_r>
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800690e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006912:	81a3      	strh	r3, [r4, #12]
 8006914:	4632      	mov	r2, r6
 8006916:	463b      	mov	r3, r7
 8006918:	4628      	mov	r0, r5
 800691a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800691e:	f000 b8a9 	b.w	8006a74 <_write_r>

08006922 <__sseek>:
 8006922:	b510      	push	{r4, lr}
 8006924:	460c      	mov	r4, r1
 8006926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692a:	f000 f87f 	bl	8006a2c <_lseek_r>
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	bf15      	itete	ne
 8006934:	6560      	strne	r0, [r4, #84]	; 0x54
 8006936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800693a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800693e:	81a3      	strheq	r3, [r4, #12]
 8006940:	bf18      	it	ne
 8006942:	81a3      	strhne	r3, [r4, #12]
 8006944:	bd10      	pop	{r4, pc}

08006946 <__sclose>:
 8006946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694a:	f000 b809 	b.w	8006960 <_close_r>

0800694e <memset>:
 800694e:	4402      	add	r2, r0
 8006950:	4603      	mov	r3, r0
 8006952:	4293      	cmp	r3, r2
 8006954:	d100      	bne.n	8006958 <memset+0xa>
 8006956:	4770      	bx	lr
 8006958:	f803 1b01 	strb.w	r1, [r3], #1
 800695c:	e7f9      	b.n	8006952 <memset+0x4>
	...

08006960 <_close_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d06      	ldr	r5, [pc, #24]	; (800697c <_close_r+0x1c>)
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	602b      	str	r3, [r5, #0]
 800696c:	f7fa fe96 	bl	800169c <_close>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_close_r+0x1a>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_close_r+0x1a>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	20004c94 	.word	0x20004c94

08006980 <_reclaim_reent>:
 8006980:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <_reclaim_reent+0xa8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4283      	cmp	r3, r0
 8006986:	b570      	push	{r4, r5, r6, lr}
 8006988:	4604      	mov	r4, r0
 800698a:	d04b      	beq.n	8006a24 <_reclaim_reent+0xa4>
 800698c:	69c3      	ldr	r3, [r0, #28]
 800698e:	b143      	cbz	r3, 80069a2 <_reclaim_reent+0x22>
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d144      	bne.n	8006a20 <_reclaim_reent+0xa0>
 8006996:	69e3      	ldr	r3, [r4, #28]
 8006998:	6819      	ldr	r1, [r3, #0]
 800699a:	b111      	cbz	r1, 80069a2 <_reclaim_reent+0x22>
 800699c:	4620      	mov	r0, r4
 800699e:	f000 f8d3 	bl	8006b48 <_free_r>
 80069a2:	6961      	ldr	r1, [r4, #20]
 80069a4:	b111      	cbz	r1, 80069ac <_reclaim_reent+0x2c>
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f8ce 	bl	8006b48 <_free_r>
 80069ac:	69e1      	ldr	r1, [r4, #28]
 80069ae:	b111      	cbz	r1, 80069b6 <_reclaim_reent+0x36>
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 f8c9 	bl	8006b48 <_free_r>
 80069b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80069b8:	b111      	cbz	r1, 80069c0 <_reclaim_reent+0x40>
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 f8c4 	bl	8006b48 <_free_r>
 80069c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069c2:	b111      	cbz	r1, 80069ca <_reclaim_reent+0x4a>
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 f8bf 	bl	8006b48 <_free_r>
 80069ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069cc:	b111      	cbz	r1, 80069d4 <_reclaim_reent+0x54>
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 f8ba 	bl	8006b48 <_free_r>
 80069d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069d6:	b111      	cbz	r1, 80069de <_reclaim_reent+0x5e>
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f8b5 	bl	8006b48 <_free_r>
 80069de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80069e0:	b111      	cbz	r1, 80069e8 <_reclaim_reent+0x68>
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 f8b0 	bl	8006b48 <_free_r>
 80069e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069ea:	b111      	cbz	r1, 80069f2 <_reclaim_reent+0x72>
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 f8ab 	bl	8006b48 <_free_r>
 80069f2:	6a23      	ldr	r3, [r4, #32]
 80069f4:	b1b3      	cbz	r3, 8006a24 <_reclaim_reent+0xa4>
 80069f6:	4620      	mov	r0, r4
 80069f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069fc:	4718      	bx	r3
 80069fe:	5949      	ldr	r1, [r1, r5]
 8006a00:	b941      	cbnz	r1, 8006a14 <_reclaim_reent+0x94>
 8006a02:	3504      	adds	r5, #4
 8006a04:	69e3      	ldr	r3, [r4, #28]
 8006a06:	2d80      	cmp	r5, #128	; 0x80
 8006a08:	68d9      	ldr	r1, [r3, #12]
 8006a0a:	d1f8      	bne.n	80069fe <_reclaim_reent+0x7e>
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 f89b 	bl	8006b48 <_free_r>
 8006a12:	e7c0      	b.n	8006996 <_reclaim_reent+0x16>
 8006a14:	680e      	ldr	r6, [r1, #0]
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 f896 	bl	8006b48 <_free_r>
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	e7ef      	b.n	8006a00 <_reclaim_reent+0x80>
 8006a20:	2500      	movs	r5, #0
 8006a22:	e7ef      	b.n	8006a04 <_reclaim_reent+0x84>
 8006a24:	bd70      	pop	{r4, r5, r6, pc}
 8006a26:	bf00      	nop
 8006a28:	20000068 	.word	0x20000068

08006a2c <_lseek_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d07      	ldr	r5, [pc, #28]	; (8006a4c <_lseek_r+0x20>)
 8006a30:	4604      	mov	r4, r0
 8006a32:	4608      	mov	r0, r1
 8006a34:	4611      	mov	r1, r2
 8006a36:	2200      	movs	r2, #0
 8006a38:	602a      	str	r2, [r5, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f7fa fe55 	bl	80016ea <_lseek>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_lseek_r+0x1e>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_lseek_r+0x1e>
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	20004c94 	.word	0x20004c94

08006a50 <_read_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d07      	ldr	r5, [pc, #28]	; (8006a70 <_read_r+0x20>)
 8006a54:	4604      	mov	r4, r0
 8006a56:	4608      	mov	r0, r1
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	602a      	str	r2, [r5, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7fa fde3 	bl	800162a <_read>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_read_r+0x1e>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_read_r+0x1e>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20004c94 	.word	0x20004c94

08006a74 <_write_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d07      	ldr	r5, [pc, #28]	; (8006a94 <_write_r+0x20>)
 8006a78:	4604      	mov	r4, r0
 8006a7a:	4608      	mov	r0, r1
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	602a      	str	r2, [r5, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f7fa fdee 	bl	8001664 <_write>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d102      	bne.n	8006a92 <_write_r+0x1e>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b103      	cbz	r3, 8006a92 <_write_r+0x1e>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	20004c94 	.word	0x20004c94

08006a98 <__errno>:
 8006a98:	4b01      	ldr	r3, [pc, #4]	; (8006aa0 <__errno+0x8>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20000068 	.word	0x20000068

08006aa4 <__libc_init_array>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	4d0d      	ldr	r5, [pc, #52]	; (8006adc <__libc_init_array+0x38>)
 8006aa8:	4c0d      	ldr	r4, [pc, #52]	; (8006ae0 <__libc_init_array+0x3c>)
 8006aaa:	1b64      	subs	r4, r4, r5
 8006aac:	10a4      	asrs	r4, r4, #2
 8006aae:	2600      	movs	r6, #0
 8006ab0:	42a6      	cmp	r6, r4
 8006ab2:	d109      	bne.n	8006ac8 <__libc_init_array+0x24>
 8006ab4:	4d0b      	ldr	r5, [pc, #44]	; (8006ae4 <__libc_init_array+0x40>)
 8006ab6:	4c0c      	ldr	r4, [pc, #48]	; (8006ae8 <__libc_init_array+0x44>)
 8006ab8:	f000 fda2 	bl	8007600 <_init>
 8006abc:	1b64      	subs	r4, r4, r5
 8006abe:	10a4      	asrs	r4, r4, #2
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	42a6      	cmp	r6, r4
 8006ac4:	d105      	bne.n	8006ad2 <__libc_init_array+0x2e>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006acc:	4798      	blx	r3
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7ee      	b.n	8006ab0 <__libc_init_array+0xc>
 8006ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad6:	4798      	blx	r3
 8006ad8:	3601      	adds	r6, #1
 8006ada:	e7f2      	b.n	8006ac2 <__libc_init_array+0x1e>
 8006adc:	080077c0 	.word	0x080077c0
 8006ae0:	080077c0 	.word	0x080077c0
 8006ae4:	080077c0 	.word	0x080077c0
 8006ae8:	080077c4 	.word	0x080077c4

08006aec <__retarget_lock_acquire_recursive>:
 8006aec:	4770      	bx	lr

08006aee <__retarget_lock_release_recursive>:
 8006aee:	4770      	bx	lr

08006af0 <memcpy>:
 8006af0:	440a      	add	r2, r1
 8006af2:	4291      	cmp	r1, r2
 8006af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006af8:	d100      	bne.n	8006afc <memcpy+0xc>
 8006afa:	4770      	bx	lr
 8006afc:	b510      	push	{r4, lr}
 8006afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b06:	4291      	cmp	r1, r2
 8006b08:	d1f9      	bne.n	8006afe <memcpy+0xe>
 8006b0a:	bd10      	pop	{r4, pc}

08006b0c <__assert_func>:
 8006b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b0e:	4614      	mov	r4, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <__assert_func+0x2c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4605      	mov	r5, r0
 8006b18:	68d8      	ldr	r0, [r3, #12]
 8006b1a:	b14c      	cbz	r4, 8006b30 <__assert_func+0x24>
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <__assert_func+0x30>)
 8006b1e:	9100      	str	r1, [sp, #0]
 8006b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b24:	4906      	ldr	r1, [pc, #24]	; (8006b40 <__assert_func+0x34>)
 8006b26:	462b      	mov	r3, r5
 8006b28:	f000 fbe2 	bl	80072f0 <fiprintf>
 8006b2c:	f000 fc98 	bl	8007460 <abort>
 8006b30:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <__assert_func+0x38>)
 8006b32:	461c      	mov	r4, r3
 8006b34:	e7f3      	b.n	8006b1e <__assert_func+0x12>
 8006b36:	bf00      	nop
 8006b38:	20000068 	.word	0x20000068
 8006b3c:	08007747 	.word	0x08007747
 8006b40:	08007754 	.word	0x08007754
 8006b44:	08007782 	.word	0x08007782

08006b48 <_free_r>:
 8006b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d044      	beq.n	8006bd8 <_free_r+0x90>
 8006b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b52:	9001      	str	r0, [sp, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5a:	bfb8      	it	lt
 8006b5c:	18e4      	addlt	r4, r4, r3
 8006b5e:	f000 f8e7 	bl	8006d30 <__malloc_lock>
 8006b62:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <_free_r+0x94>)
 8006b64:	9801      	ldr	r0, [sp, #4]
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	b933      	cbnz	r3, 8006b78 <_free_r+0x30>
 8006b6a:	6063      	str	r3, [r4, #4]
 8006b6c:	6014      	str	r4, [r2, #0]
 8006b6e:	b003      	add	sp, #12
 8006b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b74:	f000 b8e2 	b.w	8006d3c <__malloc_unlock>
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	d908      	bls.n	8006b8e <_free_r+0x46>
 8006b7c:	6825      	ldr	r5, [r4, #0]
 8006b7e:	1961      	adds	r1, r4, r5
 8006b80:	428b      	cmp	r3, r1
 8006b82:	bf01      	itttt	eq
 8006b84:	6819      	ldreq	r1, [r3, #0]
 8006b86:	685b      	ldreq	r3, [r3, #4]
 8006b88:	1949      	addeq	r1, r1, r5
 8006b8a:	6021      	streq	r1, [r4, #0]
 8006b8c:	e7ed      	b.n	8006b6a <_free_r+0x22>
 8006b8e:	461a      	mov	r2, r3
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	b10b      	cbz	r3, 8006b98 <_free_r+0x50>
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d9fa      	bls.n	8006b8e <_free_r+0x46>
 8006b98:	6811      	ldr	r1, [r2, #0]
 8006b9a:	1855      	adds	r5, r2, r1
 8006b9c:	42a5      	cmp	r5, r4
 8006b9e:	d10b      	bne.n	8006bb8 <_free_r+0x70>
 8006ba0:	6824      	ldr	r4, [r4, #0]
 8006ba2:	4421      	add	r1, r4
 8006ba4:	1854      	adds	r4, r2, r1
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	d1e0      	bne.n	8006b6e <_free_r+0x26>
 8006bac:	681c      	ldr	r4, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	6053      	str	r3, [r2, #4]
 8006bb2:	440c      	add	r4, r1
 8006bb4:	6014      	str	r4, [r2, #0]
 8006bb6:	e7da      	b.n	8006b6e <_free_r+0x26>
 8006bb8:	d902      	bls.n	8006bc0 <_free_r+0x78>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	6003      	str	r3, [r0, #0]
 8006bbe:	e7d6      	b.n	8006b6e <_free_r+0x26>
 8006bc0:	6825      	ldr	r5, [r4, #0]
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf04      	itt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	6063      	str	r3, [r4, #4]
 8006bce:	bf04      	itt	eq
 8006bd0:	1949      	addeq	r1, r1, r5
 8006bd2:	6021      	streq	r1, [r4, #0]
 8006bd4:	6054      	str	r4, [r2, #4]
 8006bd6:	e7ca      	b.n	8006b6e <_free_r+0x26>
 8006bd8:	b003      	add	sp, #12
 8006bda:	bd30      	pop	{r4, r5, pc}
 8006bdc:	20004c9c 	.word	0x20004c9c

08006be0 <malloc>:
 8006be0:	4b02      	ldr	r3, [pc, #8]	; (8006bec <malloc+0xc>)
 8006be2:	4601      	mov	r1, r0
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	f000 b823 	b.w	8006c30 <_malloc_r>
 8006bea:	bf00      	nop
 8006bec:	20000068 	.word	0x20000068

08006bf0 <sbrk_aligned>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	4e0e      	ldr	r6, [pc, #56]	; (8006c2c <sbrk_aligned+0x3c>)
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	6831      	ldr	r1, [r6, #0]
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	b911      	cbnz	r1, 8006c02 <sbrk_aligned+0x12>
 8006bfc:	f000 fc20 	bl	8007440 <_sbrk_r>
 8006c00:	6030      	str	r0, [r6, #0]
 8006c02:	4621      	mov	r1, r4
 8006c04:	4628      	mov	r0, r5
 8006c06:	f000 fc1b 	bl	8007440 <_sbrk_r>
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	d00a      	beq.n	8006c24 <sbrk_aligned+0x34>
 8006c0e:	1cc4      	adds	r4, r0, #3
 8006c10:	f024 0403 	bic.w	r4, r4, #3
 8006c14:	42a0      	cmp	r0, r4
 8006c16:	d007      	beq.n	8006c28 <sbrk_aligned+0x38>
 8006c18:	1a21      	subs	r1, r4, r0
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 fc10 	bl	8007440 <_sbrk_r>
 8006c20:	3001      	adds	r0, #1
 8006c22:	d101      	bne.n	8006c28 <sbrk_aligned+0x38>
 8006c24:	f04f 34ff 	mov.w	r4, #4294967295
 8006c28:	4620      	mov	r0, r4
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	20004ca0 	.word	0x20004ca0

08006c30 <_malloc_r>:
 8006c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c34:	1ccd      	adds	r5, r1, #3
 8006c36:	f025 0503 	bic.w	r5, r5, #3
 8006c3a:	3508      	adds	r5, #8
 8006c3c:	2d0c      	cmp	r5, #12
 8006c3e:	bf38      	it	cc
 8006c40:	250c      	movcc	r5, #12
 8006c42:	2d00      	cmp	r5, #0
 8006c44:	4607      	mov	r7, r0
 8006c46:	db01      	blt.n	8006c4c <_malloc_r+0x1c>
 8006c48:	42a9      	cmp	r1, r5
 8006c4a:	d905      	bls.n	8006c58 <_malloc_r+0x28>
 8006c4c:	230c      	movs	r3, #12
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	2600      	movs	r6, #0
 8006c52:	4630      	mov	r0, r6
 8006c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d2c <_malloc_r+0xfc>
 8006c5c:	f000 f868 	bl	8006d30 <__malloc_lock>
 8006c60:	f8d8 3000 	ldr.w	r3, [r8]
 8006c64:	461c      	mov	r4, r3
 8006c66:	bb5c      	cbnz	r4, 8006cc0 <_malloc_r+0x90>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7ff ffc0 	bl	8006bf0 <sbrk_aligned>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	4604      	mov	r4, r0
 8006c74:	d155      	bne.n	8006d22 <_malloc_r+0xf2>
 8006c76:	f8d8 4000 	ldr.w	r4, [r8]
 8006c7a:	4626      	mov	r6, r4
 8006c7c:	2e00      	cmp	r6, #0
 8006c7e:	d145      	bne.n	8006d0c <_malloc_r+0xdc>
 8006c80:	2c00      	cmp	r4, #0
 8006c82:	d048      	beq.n	8006d16 <_malloc_r+0xe6>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	4631      	mov	r1, r6
 8006c88:	4638      	mov	r0, r7
 8006c8a:	eb04 0903 	add.w	r9, r4, r3
 8006c8e:	f000 fbd7 	bl	8007440 <_sbrk_r>
 8006c92:	4581      	cmp	r9, r0
 8006c94:	d13f      	bne.n	8006d16 <_malloc_r+0xe6>
 8006c96:	6821      	ldr	r1, [r4, #0]
 8006c98:	1a6d      	subs	r5, r5, r1
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f7ff ffa7 	bl	8006bf0 <sbrk_aligned>
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d037      	beq.n	8006d16 <_malloc_r+0xe6>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	442b      	add	r3, r5
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d038      	beq.n	8006d26 <_malloc_r+0xf6>
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	42a2      	cmp	r2, r4
 8006cb8:	d12b      	bne.n	8006d12 <_malloc_r+0xe2>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	605a      	str	r2, [r3, #4]
 8006cbe:	e00f      	b.n	8006ce0 <_malloc_r+0xb0>
 8006cc0:	6822      	ldr	r2, [r4, #0]
 8006cc2:	1b52      	subs	r2, r2, r5
 8006cc4:	d41f      	bmi.n	8006d06 <_malloc_r+0xd6>
 8006cc6:	2a0b      	cmp	r2, #11
 8006cc8:	d917      	bls.n	8006cfa <_malloc_r+0xca>
 8006cca:	1961      	adds	r1, r4, r5
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	6025      	str	r5, [r4, #0]
 8006cd0:	bf18      	it	ne
 8006cd2:	6059      	strne	r1, [r3, #4]
 8006cd4:	6863      	ldr	r3, [r4, #4]
 8006cd6:	bf08      	it	eq
 8006cd8:	f8c8 1000 	streq.w	r1, [r8]
 8006cdc:	5162      	str	r2, [r4, r5]
 8006cde:	604b      	str	r3, [r1, #4]
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f104 060b 	add.w	r6, r4, #11
 8006ce6:	f000 f829 	bl	8006d3c <__malloc_unlock>
 8006cea:	f026 0607 	bic.w	r6, r6, #7
 8006cee:	1d23      	adds	r3, r4, #4
 8006cf0:	1af2      	subs	r2, r6, r3
 8006cf2:	d0ae      	beq.n	8006c52 <_malloc_r+0x22>
 8006cf4:	1b9b      	subs	r3, r3, r6
 8006cf6:	50a3      	str	r3, [r4, r2]
 8006cf8:	e7ab      	b.n	8006c52 <_malloc_r+0x22>
 8006cfa:	42a3      	cmp	r3, r4
 8006cfc:	6862      	ldr	r2, [r4, #4]
 8006cfe:	d1dd      	bne.n	8006cbc <_malloc_r+0x8c>
 8006d00:	f8c8 2000 	str.w	r2, [r8]
 8006d04:	e7ec      	b.n	8006ce0 <_malloc_r+0xb0>
 8006d06:	4623      	mov	r3, r4
 8006d08:	6864      	ldr	r4, [r4, #4]
 8006d0a:	e7ac      	b.n	8006c66 <_malloc_r+0x36>
 8006d0c:	4634      	mov	r4, r6
 8006d0e:	6876      	ldr	r6, [r6, #4]
 8006d10:	e7b4      	b.n	8006c7c <_malloc_r+0x4c>
 8006d12:	4613      	mov	r3, r2
 8006d14:	e7cc      	b.n	8006cb0 <_malloc_r+0x80>
 8006d16:	230c      	movs	r3, #12
 8006d18:	603b      	str	r3, [r7, #0]
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f000 f80e 	bl	8006d3c <__malloc_unlock>
 8006d20:	e797      	b.n	8006c52 <_malloc_r+0x22>
 8006d22:	6025      	str	r5, [r4, #0]
 8006d24:	e7dc      	b.n	8006ce0 <_malloc_r+0xb0>
 8006d26:	605b      	str	r3, [r3, #4]
 8006d28:	deff      	udf	#255	; 0xff
 8006d2a:	bf00      	nop
 8006d2c:	20004c9c 	.word	0x20004c9c

08006d30 <__malloc_lock>:
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <__malloc_lock+0x8>)
 8006d32:	f7ff bedb 	b.w	8006aec <__retarget_lock_acquire_recursive>
 8006d36:	bf00      	nop
 8006d38:	20004c98 	.word	0x20004c98

08006d3c <__malloc_unlock>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__malloc_unlock+0x8>)
 8006d3e:	f7ff bed6 	b.w	8006aee <__retarget_lock_release_recursive>
 8006d42:	bf00      	nop
 8006d44:	20004c98 	.word	0x20004c98

08006d48 <__sfputc_r>:
 8006d48:	6893      	ldr	r3, [r2, #8]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	b410      	push	{r4}
 8006d50:	6093      	str	r3, [r2, #8]
 8006d52:	da08      	bge.n	8006d66 <__sfputc_r+0x1e>
 8006d54:	6994      	ldr	r4, [r2, #24]
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	db01      	blt.n	8006d5e <__sfputc_r+0x16>
 8006d5a:	290a      	cmp	r1, #10
 8006d5c:	d103      	bne.n	8006d66 <__sfputc_r+0x1e>
 8006d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d62:	f000 bad7 	b.w	8007314 <__swbuf_r>
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	1c58      	adds	r0, r3, #1
 8006d6a:	6010      	str	r0, [r2, #0]
 8006d6c:	7019      	strb	r1, [r3, #0]
 8006d6e:	4608      	mov	r0, r1
 8006d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <__sfputs_r>:
 8006d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	18d5      	adds	r5, r2, r3
 8006d80:	42ac      	cmp	r4, r5
 8006d82:	d101      	bne.n	8006d88 <__sfputs_r+0x12>
 8006d84:	2000      	movs	r0, #0
 8006d86:	e007      	b.n	8006d98 <__sfputs_r+0x22>
 8006d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8c:	463a      	mov	r2, r7
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff ffda 	bl	8006d48 <__sfputc_r>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d1f3      	bne.n	8006d80 <__sfputs_r+0xa>
 8006d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d9c <_vfiprintf_r>:
 8006d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	460d      	mov	r5, r1
 8006da2:	b09d      	sub	sp, #116	; 0x74
 8006da4:	4614      	mov	r4, r2
 8006da6:	4698      	mov	r8, r3
 8006da8:	4606      	mov	r6, r0
 8006daa:	b118      	cbz	r0, 8006db4 <_vfiprintf_r+0x18>
 8006dac:	6a03      	ldr	r3, [r0, #32]
 8006dae:	b90b      	cbnz	r3, 8006db4 <_vfiprintf_r+0x18>
 8006db0:	f7ff fd42 	bl	8006838 <__sinit>
 8006db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db6:	07d9      	lsls	r1, r3, #31
 8006db8:	d405      	bmi.n	8006dc6 <_vfiprintf_r+0x2a>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	059a      	lsls	r2, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_vfiprintf_r+0x2a>
 8006dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc2:	f7ff fe93 	bl	8006aec <__retarget_lock_acquire_recursive>
 8006dc6:	89ab      	ldrh	r3, [r5, #12]
 8006dc8:	071b      	lsls	r3, r3, #28
 8006dca:	d501      	bpl.n	8006dd0 <_vfiprintf_r+0x34>
 8006dcc:	692b      	ldr	r3, [r5, #16]
 8006dce:	b99b      	cbnz	r3, 8006df8 <_vfiprintf_r+0x5c>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 fadc 	bl	8007390 <__swsetup_r>
 8006dd8:	b170      	cbz	r0, 8006df8 <_vfiprintf_r+0x5c>
 8006dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ddc:	07dc      	lsls	r4, r3, #31
 8006dde:	d504      	bpl.n	8006dea <_vfiprintf_r+0x4e>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	b01d      	add	sp, #116	; 0x74
 8006de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	0598      	lsls	r0, r3, #22
 8006dee:	d4f7      	bmi.n	8006de0 <_vfiprintf_r+0x44>
 8006df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df2:	f7ff fe7c 	bl	8006aee <__retarget_lock_release_recursive>
 8006df6:	e7f3      	b.n	8006de0 <_vfiprintf_r+0x44>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfc:	2320      	movs	r3, #32
 8006dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e06:	2330      	movs	r3, #48	; 0x30
 8006e08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006fbc <_vfiprintf_r+0x220>
 8006e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e10:	f04f 0901 	mov.w	r9, #1
 8006e14:	4623      	mov	r3, r4
 8006e16:	469a      	mov	sl, r3
 8006e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e1c:	b10a      	cbz	r2, 8006e22 <_vfiprintf_r+0x86>
 8006e1e:	2a25      	cmp	r2, #37	; 0x25
 8006e20:	d1f9      	bne.n	8006e16 <_vfiprintf_r+0x7a>
 8006e22:	ebba 0b04 	subs.w	fp, sl, r4
 8006e26:	d00b      	beq.n	8006e40 <_vfiprintf_r+0xa4>
 8006e28:	465b      	mov	r3, fp
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff ffa1 	bl	8006d76 <__sfputs_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	f000 80a9 	beq.w	8006f8c <_vfiprintf_r+0x1f0>
 8006e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e3c:	445a      	add	r2, fp
 8006e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e40:	f89a 3000 	ldrb.w	r3, [sl]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80a1 	beq.w	8006f8c <_vfiprintf_r+0x1f0>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e54:	f10a 0a01 	add.w	sl, sl, #1
 8006e58:	9304      	str	r3, [sp, #16]
 8006e5a:	9307      	str	r3, [sp, #28]
 8006e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e60:	931a      	str	r3, [sp, #104]	; 0x68
 8006e62:	4654      	mov	r4, sl
 8006e64:	2205      	movs	r2, #5
 8006e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6a:	4854      	ldr	r0, [pc, #336]	; (8006fbc <_vfiprintf_r+0x220>)
 8006e6c:	f7f9 f9c0 	bl	80001f0 <memchr>
 8006e70:	9a04      	ldr	r2, [sp, #16]
 8006e72:	b9d8      	cbnz	r0, 8006eac <_vfiprintf_r+0x110>
 8006e74:	06d1      	lsls	r1, r2, #27
 8006e76:	bf44      	itt	mi
 8006e78:	2320      	movmi	r3, #32
 8006e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e7e:	0713      	lsls	r3, r2, #28
 8006e80:	bf44      	itt	mi
 8006e82:	232b      	movmi	r3, #43	; 0x2b
 8006e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e88:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8e:	d015      	beq.n	8006ebc <_vfiprintf_r+0x120>
 8006e90:	9a07      	ldr	r2, [sp, #28]
 8006e92:	4654      	mov	r4, sl
 8006e94:	2000      	movs	r0, #0
 8006e96:	f04f 0c0a 	mov.w	ip, #10
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea0:	3b30      	subs	r3, #48	; 0x30
 8006ea2:	2b09      	cmp	r3, #9
 8006ea4:	d94d      	bls.n	8006f42 <_vfiprintf_r+0x1a6>
 8006ea6:	b1b0      	cbz	r0, 8006ed6 <_vfiprintf_r+0x13a>
 8006ea8:	9207      	str	r2, [sp, #28]
 8006eaa:	e014      	b.n	8006ed6 <_vfiprintf_r+0x13a>
 8006eac:	eba0 0308 	sub.w	r3, r0, r8
 8006eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	46a2      	mov	sl, r4
 8006eba:	e7d2      	b.n	8006e62 <_vfiprintf_r+0xc6>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	1d19      	adds	r1, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	9103      	str	r1, [sp, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfbb      	ittet	lt
 8006ec8:	425b      	neglt	r3, r3
 8006eca:	f042 0202 	orrlt.w	r2, r2, #2
 8006ece:	9307      	strge	r3, [sp, #28]
 8006ed0:	9307      	strlt	r3, [sp, #28]
 8006ed2:	bfb8      	it	lt
 8006ed4:	9204      	strlt	r2, [sp, #16]
 8006ed6:	7823      	ldrb	r3, [r4, #0]
 8006ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eda:	d10c      	bne.n	8006ef6 <_vfiprintf_r+0x15a>
 8006edc:	7863      	ldrb	r3, [r4, #1]
 8006ede:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee0:	d134      	bne.n	8006f4c <_vfiprintf_r+0x1b0>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	1d1a      	adds	r2, r3, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	9203      	str	r2, [sp, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bfb8      	it	lt
 8006eee:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ef2:	3402      	adds	r4, #2
 8006ef4:	9305      	str	r3, [sp, #20]
 8006ef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006fcc <_vfiprintf_r+0x230>
 8006efa:	7821      	ldrb	r1, [r4, #0]
 8006efc:	2203      	movs	r2, #3
 8006efe:	4650      	mov	r0, sl
 8006f00:	f7f9 f976 	bl	80001f0 <memchr>
 8006f04:	b138      	cbz	r0, 8006f16 <_vfiprintf_r+0x17a>
 8006f06:	9b04      	ldr	r3, [sp, #16]
 8006f08:	eba0 000a 	sub.w	r0, r0, sl
 8006f0c:	2240      	movs	r2, #64	; 0x40
 8006f0e:	4082      	lsls	r2, r0
 8006f10:	4313      	orrs	r3, r2
 8006f12:	3401      	adds	r4, #1
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1a:	4829      	ldr	r0, [pc, #164]	; (8006fc0 <_vfiprintf_r+0x224>)
 8006f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f20:	2206      	movs	r2, #6
 8006f22:	f7f9 f965 	bl	80001f0 <memchr>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d03f      	beq.n	8006faa <_vfiprintf_r+0x20e>
 8006f2a:	4b26      	ldr	r3, [pc, #152]	; (8006fc4 <_vfiprintf_r+0x228>)
 8006f2c:	bb1b      	cbnz	r3, 8006f76 <_vfiprintf_r+0x1da>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	3307      	adds	r3, #7
 8006f32:	f023 0307 	bic.w	r3, r3, #7
 8006f36:	3308      	adds	r3, #8
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3c:	443b      	add	r3, r7
 8006f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f40:	e768      	b.n	8006e14 <_vfiprintf_r+0x78>
 8006f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f46:	460c      	mov	r4, r1
 8006f48:	2001      	movs	r0, #1
 8006f4a:	e7a6      	b.n	8006e9a <_vfiprintf_r+0xfe>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	3401      	adds	r4, #1
 8006f50:	9305      	str	r3, [sp, #20]
 8006f52:	4619      	mov	r1, r3
 8006f54:	f04f 0c0a 	mov.w	ip, #10
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f5e:	3a30      	subs	r2, #48	; 0x30
 8006f60:	2a09      	cmp	r2, #9
 8006f62:	d903      	bls.n	8006f6c <_vfiprintf_r+0x1d0>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0c6      	beq.n	8006ef6 <_vfiprintf_r+0x15a>
 8006f68:	9105      	str	r1, [sp, #20]
 8006f6a:	e7c4      	b.n	8006ef6 <_vfiprintf_r+0x15a>
 8006f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f70:	4604      	mov	r4, r0
 8006f72:	2301      	movs	r3, #1
 8006f74:	e7f0      	b.n	8006f58 <_vfiprintf_r+0x1bc>
 8006f76:	ab03      	add	r3, sp, #12
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <_vfiprintf_r+0x22c>)
 8006f7e:	a904      	add	r1, sp, #16
 8006f80:	4630      	mov	r0, r6
 8006f82:	f3af 8000 	nop.w
 8006f86:	4607      	mov	r7, r0
 8006f88:	1c78      	adds	r0, r7, #1
 8006f8a:	d1d6      	bne.n	8006f3a <_vfiprintf_r+0x19e>
 8006f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f8e:	07d9      	lsls	r1, r3, #31
 8006f90:	d405      	bmi.n	8006f9e <_vfiprintf_r+0x202>
 8006f92:	89ab      	ldrh	r3, [r5, #12]
 8006f94:	059a      	lsls	r2, r3, #22
 8006f96:	d402      	bmi.n	8006f9e <_vfiprintf_r+0x202>
 8006f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f9a:	f7ff fda8 	bl	8006aee <__retarget_lock_release_recursive>
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	065b      	lsls	r3, r3, #25
 8006fa2:	f53f af1d 	bmi.w	8006de0 <_vfiprintf_r+0x44>
 8006fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fa8:	e71c      	b.n	8006de4 <_vfiprintf_r+0x48>
 8006faa:	ab03      	add	r3, sp, #12
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	462a      	mov	r2, r5
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <_vfiprintf_r+0x22c>)
 8006fb2:	a904      	add	r1, sp, #16
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f000 f879 	bl	80070ac <_printf_i>
 8006fba:	e7e4      	b.n	8006f86 <_vfiprintf_r+0x1ea>
 8006fbc:	08007783 	.word	0x08007783
 8006fc0:	0800778d 	.word	0x0800778d
 8006fc4:	00000000 	.word	0x00000000
 8006fc8:	08006d77 	.word	0x08006d77
 8006fcc:	08007789 	.word	0x08007789

08006fd0 <_printf_common>:
 8006fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	4699      	mov	r9, r3
 8006fd8:	688a      	ldr	r2, [r1, #8]
 8006fda:	690b      	ldr	r3, [r1, #16]
 8006fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	bfb8      	it	lt
 8006fe4:	4613      	movlt	r3, r2
 8006fe6:	6033      	str	r3, [r6, #0]
 8006fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fec:	4607      	mov	r7, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	b10a      	cbz	r2, 8006ff6 <_printf_common+0x26>
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	0699      	lsls	r1, r3, #26
 8006ffa:	bf42      	ittt	mi
 8006ffc:	6833      	ldrmi	r3, [r6, #0]
 8006ffe:	3302      	addmi	r3, #2
 8007000:	6033      	strmi	r3, [r6, #0]
 8007002:	6825      	ldr	r5, [r4, #0]
 8007004:	f015 0506 	ands.w	r5, r5, #6
 8007008:	d106      	bne.n	8007018 <_printf_common+0x48>
 800700a:	f104 0a19 	add.w	sl, r4, #25
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	6832      	ldr	r2, [r6, #0]
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	42ab      	cmp	r3, r5
 8007016:	dc26      	bgt.n	8007066 <_printf_common+0x96>
 8007018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800701c:	1e13      	subs	r3, r2, #0
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	bf18      	it	ne
 8007022:	2301      	movne	r3, #1
 8007024:	0692      	lsls	r2, r2, #26
 8007026:	d42b      	bmi.n	8007080 <_printf_common+0xb0>
 8007028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800702c:	4649      	mov	r1, r9
 800702e:	4638      	mov	r0, r7
 8007030:	47c0      	blx	r8
 8007032:	3001      	adds	r0, #1
 8007034:	d01e      	beq.n	8007074 <_printf_common+0xa4>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	6922      	ldr	r2, [r4, #16]
 800703a:	f003 0306 	and.w	r3, r3, #6
 800703e:	2b04      	cmp	r3, #4
 8007040:	bf02      	ittt	eq
 8007042:	68e5      	ldreq	r5, [r4, #12]
 8007044:	6833      	ldreq	r3, [r6, #0]
 8007046:	1aed      	subeq	r5, r5, r3
 8007048:	68a3      	ldr	r3, [r4, #8]
 800704a:	bf0c      	ite	eq
 800704c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007050:	2500      	movne	r5, #0
 8007052:	4293      	cmp	r3, r2
 8007054:	bfc4      	itt	gt
 8007056:	1a9b      	subgt	r3, r3, r2
 8007058:	18ed      	addgt	r5, r5, r3
 800705a:	2600      	movs	r6, #0
 800705c:	341a      	adds	r4, #26
 800705e:	42b5      	cmp	r5, r6
 8007060:	d11a      	bne.n	8007098 <_printf_common+0xc8>
 8007062:	2000      	movs	r0, #0
 8007064:	e008      	b.n	8007078 <_printf_common+0xa8>
 8007066:	2301      	movs	r3, #1
 8007068:	4652      	mov	r2, sl
 800706a:	4649      	mov	r1, r9
 800706c:	4638      	mov	r0, r7
 800706e:	47c0      	blx	r8
 8007070:	3001      	adds	r0, #1
 8007072:	d103      	bne.n	800707c <_printf_common+0xac>
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	3501      	adds	r5, #1
 800707e:	e7c6      	b.n	800700e <_printf_common+0x3e>
 8007080:	18e1      	adds	r1, r4, r3
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	2030      	movs	r0, #48	; 0x30
 8007086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708a:	4422      	add	r2, r4
 800708c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007094:	3302      	adds	r3, #2
 8007096:	e7c7      	b.n	8007028 <_printf_common+0x58>
 8007098:	2301      	movs	r3, #1
 800709a:	4622      	mov	r2, r4
 800709c:	4649      	mov	r1, r9
 800709e:	4638      	mov	r0, r7
 80070a0:	47c0      	blx	r8
 80070a2:	3001      	adds	r0, #1
 80070a4:	d0e6      	beq.n	8007074 <_printf_common+0xa4>
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7d9      	b.n	800705e <_printf_common+0x8e>
	...

080070ac <_printf_i>:
 80070ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b0:	7e0f      	ldrb	r7, [r1, #24]
 80070b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070b4:	2f78      	cmp	r7, #120	; 0x78
 80070b6:	4691      	mov	r9, r2
 80070b8:	4680      	mov	r8, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	469a      	mov	sl, r3
 80070be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070c2:	d807      	bhi.n	80070d4 <_printf_i+0x28>
 80070c4:	2f62      	cmp	r7, #98	; 0x62
 80070c6:	d80a      	bhi.n	80070de <_printf_i+0x32>
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	f000 80d4 	beq.w	8007276 <_printf_i+0x1ca>
 80070ce:	2f58      	cmp	r7, #88	; 0x58
 80070d0:	f000 80c0 	beq.w	8007254 <_printf_i+0x1a8>
 80070d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070dc:	e03a      	b.n	8007154 <_printf_i+0xa8>
 80070de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e2:	2b15      	cmp	r3, #21
 80070e4:	d8f6      	bhi.n	80070d4 <_printf_i+0x28>
 80070e6:	a101      	add	r1, pc, #4	; (adr r1, 80070ec <_printf_i+0x40>)
 80070e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070ec:	08007145 	.word	0x08007145
 80070f0:	08007159 	.word	0x08007159
 80070f4:	080070d5 	.word	0x080070d5
 80070f8:	080070d5 	.word	0x080070d5
 80070fc:	080070d5 	.word	0x080070d5
 8007100:	080070d5 	.word	0x080070d5
 8007104:	08007159 	.word	0x08007159
 8007108:	080070d5 	.word	0x080070d5
 800710c:	080070d5 	.word	0x080070d5
 8007110:	080070d5 	.word	0x080070d5
 8007114:	080070d5 	.word	0x080070d5
 8007118:	0800725d 	.word	0x0800725d
 800711c:	08007185 	.word	0x08007185
 8007120:	08007217 	.word	0x08007217
 8007124:	080070d5 	.word	0x080070d5
 8007128:	080070d5 	.word	0x080070d5
 800712c:	0800727f 	.word	0x0800727f
 8007130:	080070d5 	.word	0x080070d5
 8007134:	08007185 	.word	0x08007185
 8007138:	080070d5 	.word	0x080070d5
 800713c:	080070d5 	.word	0x080070d5
 8007140:	0800721f 	.word	0x0800721f
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	1d1a      	adds	r2, r3, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	602a      	str	r2, [r5, #0]
 800714c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007154:	2301      	movs	r3, #1
 8007156:	e09f      	b.n	8007298 <_printf_i+0x1ec>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	0607      	lsls	r7, r0, #24
 800715e:	f103 0104 	add.w	r1, r3, #4
 8007162:	6029      	str	r1, [r5, #0]
 8007164:	d501      	bpl.n	800716a <_printf_i+0xbe>
 8007166:	681e      	ldr	r6, [r3, #0]
 8007168:	e003      	b.n	8007172 <_printf_i+0xc6>
 800716a:	0646      	lsls	r6, r0, #25
 800716c:	d5fb      	bpl.n	8007166 <_printf_i+0xba>
 800716e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007172:	2e00      	cmp	r6, #0
 8007174:	da03      	bge.n	800717e <_printf_i+0xd2>
 8007176:	232d      	movs	r3, #45	; 0x2d
 8007178:	4276      	negs	r6, r6
 800717a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800717e:	485a      	ldr	r0, [pc, #360]	; (80072e8 <_printf_i+0x23c>)
 8007180:	230a      	movs	r3, #10
 8007182:	e012      	b.n	80071aa <_printf_i+0xfe>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	6820      	ldr	r0, [r4, #0]
 8007188:	1d19      	adds	r1, r3, #4
 800718a:	6029      	str	r1, [r5, #0]
 800718c:	0605      	lsls	r5, r0, #24
 800718e:	d501      	bpl.n	8007194 <_printf_i+0xe8>
 8007190:	681e      	ldr	r6, [r3, #0]
 8007192:	e002      	b.n	800719a <_printf_i+0xee>
 8007194:	0641      	lsls	r1, r0, #25
 8007196:	d5fb      	bpl.n	8007190 <_printf_i+0xe4>
 8007198:	881e      	ldrh	r6, [r3, #0]
 800719a:	4853      	ldr	r0, [pc, #332]	; (80072e8 <_printf_i+0x23c>)
 800719c:	2f6f      	cmp	r7, #111	; 0x6f
 800719e:	bf0c      	ite	eq
 80071a0:	2308      	moveq	r3, #8
 80071a2:	230a      	movne	r3, #10
 80071a4:	2100      	movs	r1, #0
 80071a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071aa:	6865      	ldr	r5, [r4, #4]
 80071ac:	60a5      	str	r5, [r4, #8]
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	bfa2      	ittt	ge
 80071b2:	6821      	ldrge	r1, [r4, #0]
 80071b4:	f021 0104 	bicge.w	r1, r1, #4
 80071b8:	6021      	strge	r1, [r4, #0]
 80071ba:	b90e      	cbnz	r6, 80071c0 <_printf_i+0x114>
 80071bc:	2d00      	cmp	r5, #0
 80071be:	d04b      	beq.n	8007258 <_printf_i+0x1ac>
 80071c0:	4615      	mov	r5, r2
 80071c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80071c6:	fb03 6711 	mls	r7, r3, r1, r6
 80071ca:	5dc7      	ldrb	r7, [r0, r7]
 80071cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071d0:	4637      	mov	r7, r6
 80071d2:	42bb      	cmp	r3, r7
 80071d4:	460e      	mov	r6, r1
 80071d6:	d9f4      	bls.n	80071c2 <_printf_i+0x116>
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d10b      	bne.n	80071f4 <_printf_i+0x148>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	07de      	lsls	r6, r3, #31
 80071e0:	d508      	bpl.n	80071f4 <_printf_i+0x148>
 80071e2:	6923      	ldr	r3, [r4, #16]
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	4299      	cmp	r1, r3
 80071e8:	bfde      	ittt	le
 80071ea:	2330      	movle	r3, #48	; 0x30
 80071ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071f4:	1b52      	subs	r2, r2, r5
 80071f6:	6122      	str	r2, [r4, #16]
 80071f8:	f8cd a000 	str.w	sl, [sp]
 80071fc:	464b      	mov	r3, r9
 80071fe:	aa03      	add	r2, sp, #12
 8007200:	4621      	mov	r1, r4
 8007202:	4640      	mov	r0, r8
 8007204:	f7ff fee4 	bl	8006fd0 <_printf_common>
 8007208:	3001      	adds	r0, #1
 800720a:	d14a      	bne.n	80072a2 <_printf_i+0x1f6>
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	b004      	add	sp, #16
 8007212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f043 0320 	orr.w	r3, r3, #32
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	4833      	ldr	r0, [pc, #204]	; (80072ec <_printf_i+0x240>)
 8007220:	2778      	movs	r7, #120	; 0x78
 8007222:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	6829      	ldr	r1, [r5, #0]
 800722a:	061f      	lsls	r7, r3, #24
 800722c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007230:	d402      	bmi.n	8007238 <_printf_i+0x18c>
 8007232:	065f      	lsls	r7, r3, #25
 8007234:	bf48      	it	mi
 8007236:	b2b6      	uxthmi	r6, r6
 8007238:	07df      	lsls	r7, r3, #31
 800723a:	bf48      	it	mi
 800723c:	f043 0320 	orrmi.w	r3, r3, #32
 8007240:	6029      	str	r1, [r5, #0]
 8007242:	bf48      	it	mi
 8007244:	6023      	strmi	r3, [r4, #0]
 8007246:	b91e      	cbnz	r6, 8007250 <_printf_i+0x1a4>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	f023 0320 	bic.w	r3, r3, #32
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	2310      	movs	r3, #16
 8007252:	e7a7      	b.n	80071a4 <_printf_i+0xf8>
 8007254:	4824      	ldr	r0, [pc, #144]	; (80072e8 <_printf_i+0x23c>)
 8007256:	e7e4      	b.n	8007222 <_printf_i+0x176>
 8007258:	4615      	mov	r5, r2
 800725a:	e7bd      	b.n	80071d8 <_printf_i+0x12c>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	6826      	ldr	r6, [r4, #0]
 8007260:	6961      	ldr	r1, [r4, #20]
 8007262:	1d18      	adds	r0, r3, #4
 8007264:	6028      	str	r0, [r5, #0]
 8007266:	0635      	lsls	r5, r6, #24
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	d501      	bpl.n	8007270 <_printf_i+0x1c4>
 800726c:	6019      	str	r1, [r3, #0]
 800726e:	e002      	b.n	8007276 <_printf_i+0x1ca>
 8007270:	0670      	lsls	r0, r6, #25
 8007272:	d5fb      	bpl.n	800726c <_printf_i+0x1c0>
 8007274:	8019      	strh	r1, [r3, #0]
 8007276:	2300      	movs	r3, #0
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	4615      	mov	r5, r2
 800727c:	e7bc      	b.n	80071f8 <_printf_i+0x14c>
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	1d1a      	adds	r2, r3, #4
 8007282:	602a      	str	r2, [r5, #0]
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	2100      	movs	r1, #0
 800728a:	4628      	mov	r0, r5
 800728c:	f7f8 ffb0 	bl	80001f0 <memchr>
 8007290:	b108      	cbz	r0, 8007296 <_printf_i+0x1ea>
 8007292:	1b40      	subs	r0, r0, r5
 8007294:	6060      	str	r0, [r4, #4]
 8007296:	6863      	ldr	r3, [r4, #4]
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	2300      	movs	r3, #0
 800729c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a0:	e7aa      	b.n	80071f8 <_printf_i+0x14c>
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	462a      	mov	r2, r5
 80072a6:	4649      	mov	r1, r9
 80072a8:	4640      	mov	r0, r8
 80072aa:	47d0      	blx	sl
 80072ac:	3001      	adds	r0, #1
 80072ae:	d0ad      	beq.n	800720c <_printf_i+0x160>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	079b      	lsls	r3, r3, #30
 80072b4:	d413      	bmi.n	80072de <_printf_i+0x232>
 80072b6:	68e0      	ldr	r0, [r4, #12]
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	4298      	cmp	r0, r3
 80072bc:	bfb8      	it	lt
 80072be:	4618      	movlt	r0, r3
 80072c0:	e7a6      	b.n	8007210 <_printf_i+0x164>
 80072c2:	2301      	movs	r3, #1
 80072c4:	4632      	mov	r2, r6
 80072c6:	4649      	mov	r1, r9
 80072c8:	4640      	mov	r0, r8
 80072ca:	47d0      	blx	sl
 80072cc:	3001      	adds	r0, #1
 80072ce:	d09d      	beq.n	800720c <_printf_i+0x160>
 80072d0:	3501      	adds	r5, #1
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	9903      	ldr	r1, [sp, #12]
 80072d6:	1a5b      	subs	r3, r3, r1
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dcf2      	bgt.n	80072c2 <_printf_i+0x216>
 80072dc:	e7eb      	b.n	80072b6 <_printf_i+0x20a>
 80072de:	2500      	movs	r5, #0
 80072e0:	f104 0619 	add.w	r6, r4, #25
 80072e4:	e7f5      	b.n	80072d2 <_printf_i+0x226>
 80072e6:	bf00      	nop
 80072e8:	08007794 	.word	0x08007794
 80072ec:	080077a5 	.word	0x080077a5

080072f0 <fiprintf>:
 80072f0:	b40e      	push	{r1, r2, r3}
 80072f2:	b503      	push	{r0, r1, lr}
 80072f4:	4601      	mov	r1, r0
 80072f6:	ab03      	add	r3, sp, #12
 80072f8:	4805      	ldr	r0, [pc, #20]	; (8007310 <fiprintf+0x20>)
 80072fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fe:	6800      	ldr	r0, [r0, #0]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	f7ff fd4b 	bl	8006d9c <_vfiprintf_r>
 8007306:	b002      	add	sp, #8
 8007308:	f85d eb04 	ldr.w	lr, [sp], #4
 800730c:	b003      	add	sp, #12
 800730e:	4770      	bx	lr
 8007310:	20000068 	.word	0x20000068

08007314 <__swbuf_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	460e      	mov	r6, r1
 8007318:	4614      	mov	r4, r2
 800731a:	4605      	mov	r5, r0
 800731c:	b118      	cbz	r0, 8007326 <__swbuf_r+0x12>
 800731e:	6a03      	ldr	r3, [r0, #32]
 8007320:	b90b      	cbnz	r3, 8007326 <__swbuf_r+0x12>
 8007322:	f7ff fa89 	bl	8006838 <__sinit>
 8007326:	69a3      	ldr	r3, [r4, #24]
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	071a      	lsls	r2, r3, #28
 800732e:	d525      	bpl.n	800737c <__swbuf_r+0x68>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	b31b      	cbz	r3, 800737c <__swbuf_r+0x68>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	6922      	ldr	r2, [r4, #16]
 8007338:	1a98      	subs	r0, r3, r2
 800733a:	6963      	ldr	r3, [r4, #20]
 800733c:	b2f6      	uxtb	r6, r6
 800733e:	4283      	cmp	r3, r0
 8007340:	4637      	mov	r7, r6
 8007342:	dc04      	bgt.n	800734e <__swbuf_r+0x3a>
 8007344:	4621      	mov	r1, r4
 8007346:	4628      	mov	r0, r5
 8007348:	f7ff f9c0 	bl	80066cc <_fflush_r>
 800734c:	b9e0      	cbnz	r0, 8007388 <__swbuf_r+0x74>
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	3b01      	subs	r3, #1
 8007352:	60a3      	str	r3, [r4, #8]
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	6022      	str	r2, [r4, #0]
 800735a:	701e      	strb	r6, [r3, #0]
 800735c:	6962      	ldr	r2, [r4, #20]
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	429a      	cmp	r2, r3
 8007362:	d004      	beq.n	800736e <__swbuf_r+0x5a>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	07db      	lsls	r3, r3, #31
 8007368:	d506      	bpl.n	8007378 <__swbuf_r+0x64>
 800736a:	2e0a      	cmp	r6, #10
 800736c:	d104      	bne.n	8007378 <__swbuf_r+0x64>
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f7ff f9ab 	bl	80066cc <_fflush_r>
 8007376:	b938      	cbnz	r0, 8007388 <__swbuf_r+0x74>
 8007378:	4638      	mov	r0, r7
 800737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800737c:	4621      	mov	r1, r4
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f806 	bl	8007390 <__swsetup_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	d0d5      	beq.n	8007334 <__swbuf_r+0x20>
 8007388:	f04f 37ff 	mov.w	r7, #4294967295
 800738c:	e7f4      	b.n	8007378 <__swbuf_r+0x64>
	...

08007390 <__swsetup_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4b2a      	ldr	r3, [pc, #168]	; (800743c <__swsetup_r+0xac>)
 8007394:	4605      	mov	r5, r0
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	460c      	mov	r4, r1
 800739a:	b118      	cbz	r0, 80073a4 <__swsetup_r+0x14>
 800739c:	6a03      	ldr	r3, [r0, #32]
 800739e:	b90b      	cbnz	r3, 80073a4 <__swsetup_r+0x14>
 80073a0:	f7ff fa4a 	bl	8006838 <__sinit>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073aa:	0718      	lsls	r0, r3, #28
 80073ac:	d422      	bmi.n	80073f4 <__swsetup_r+0x64>
 80073ae:	06d9      	lsls	r1, r3, #27
 80073b0:	d407      	bmi.n	80073c2 <__swsetup_r+0x32>
 80073b2:	2309      	movs	r3, #9
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	e034      	b.n	800742c <__swsetup_r+0x9c>
 80073c2:	0758      	lsls	r0, r3, #29
 80073c4:	d512      	bpl.n	80073ec <__swsetup_r+0x5c>
 80073c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073c8:	b141      	cbz	r1, 80073dc <__swsetup_r+0x4c>
 80073ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ce:	4299      	cmp	r1, r3
 80073d0:	d002      	beq.n	80073d8 <__swsetup_r+0x48>
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7ff fbb8 	bl	8006b48 <_free_r>
 80073d8:	2300      	movs	r3, #0
 80073da:	6363      	str	r3, [r4, #52]	; 0x34
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	2300      	movs	r3, #0
 80073e6:	6063      	str	r3, [r4, #4]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f043 0308 	orr.w	r3, r3, #8
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b94b      	cbnz	r3, 800740c <__swsetup_r+0x7c>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007402:	d003      	beq.n	800740c <__swsetup_r+0x7c>
 8007404:	4621      	mov	r1, r4
 8007406:	4628      	mov	r0, r5
 8007408:	f000 f857 	bl	80074ba <__smakebuf_r>
 800740c:	89a0      	ldrh	r0, [r4, #12]
 800740e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007412:	f010 0301 	ands.w	r3, r0, #1
 8007416:	d00a      	beq.n	800742e <__swsetup_r+0x9e>
 8007418:	2300      	movs	r3, #0
 800741a:	60a3      	str	r3, [r4, #8]
 800741c:	6963      	ldr	r3, [r4, #20]
 800741e:	425b      	negs	r3, r3
 8007420:	61a3      	str	r3, [r4, #24]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	b943      	cbnz	r3, 8007438 <__swsetup_r+0xa8>
 8007426:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800742a:	d1c4      	bne.n	80073b6 <__swsetup_r+0x26>
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	0781      	lsls	r1, r0, #30
 8007430:	bf58      	it	pl
 8007432:	6963      	ldrpl	r3, [r4, #20]
 8007434:	60a3      	str	r3, [r4, #8]
 8007436:	e7f4      	b.n	8007422 <__swsetup_r+0x92>
 8007438:	2000      	movs	r0, #0
 800743a:	e7f7      	b.n	800742c <__swsetup_r+0x9c>
 800743c:	20000068 	.word	0x20000068

08007440 <_sbrk_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d06      	ldr	r5, [pc, #24]	; (800745c <_sbrk_r+0x1c>)
 8007444:	2300      	movs	r3, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	f7fa f95a 	bl	8001704 <_sbrk>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_sbrk_r+0x1a>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_sbrk_r+0x1a>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	20004c94 	.word	0x20004c94

08007460 <abort>:
 8007460:	b508      	push	{r3, lr}
 8007462:	2006      	movs	r0, #6
 8007464:	f000 f88e 	bl	8007584 <raise>
 8007468:	2001      	movs	r0, #1
 800746a:	f7fa f8d4 	bl	8001616 <_exit>

0800746e <__swhatbuf_r>:
 800746e:	b570      	push	{r4, r5, r6, lr}
 8007470:	460c      	mov	r4, r1
 8007472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007476:	2900      	cmp	r1, #0
 8007478:	b096      	sub	sp, #88	; 0x58
 800747a:	4615      	mov	r5, r2
 800747c:	461e      	mov	r6, r3
 800747e:	da0d      	bge.n	800749c <__swhatbuf_r+0x2e>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	bf0c      	ite	eq
 800748c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007490:	2340      	movne	r3, #64	; 0x40
 8007492:	2000      	movs	r0, #0
 8007494:	6031      	str	r1, [r6, #0]
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	b016      	add	sp, #88	; 0x58
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	466a      	mov	r2, sp
 800749e:	f000 f879 	bl	8007594 <_fstat_r>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	dbec      	blt.n	8007480 <__swhatbuf_r+0x12>
 80074a6:	9901      	ldr	r1, [sp, #4]
 80074a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80074ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80074b0:	4259      	negs	r1, r3
 80074b2:	4159      	adcs	r1, r3
 80074b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074b8:	e7eb      	b.n	8007492 <__swhatbuf_r+0x24>

080074ba <__smakebuf_r>:
 80074ba:	898b      	ldrh	r3, [r1, #12]
 80074bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074be:	079d      	lsls	r5, r3, #30
 80074c0:	4606      	mov	r6, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	d507      	bpl.n	80074d6 <__smakebuf_r+0x1c>
 80074c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	2301      	movs	r3, #1
 80074d0:	6163      	str	r3, [r4, #20]
 80074d2:	b002      	add	sp, #8
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	ab01      	add	r3, sp, #4
 80074d8:	466a      	mov	r2, sp
 80074da:	f7ff ffc8 	bl	800746e <__swhatbuf_r>
 80074de:	9900      	ldr	r1, [sp, #0]
 80074e0:	4605      	mov	r5, r0
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff fba4 	bl	8006c30 <_malloc_r>
 80074e8:	b948      	cbnz	r0, 80074fe <__smakebuf_r+0x44>
 80074ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ee:	059a      	lsls	r2, r3, #22
 80074f0:	d4ef      	bmi.n	80074d2 <__smakebuf_r+0x18>
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	f043 0302 	orr.w	r3, r3, #2
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	e7e3      	b.n	80074c6 <__smakebuf_r+0xc>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	6020      	str	r0, [r4, #0]
 8007502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	9b00      	ldr	r3, [sp, #0]
 800750a:	6163      	str	r3, [r4, #20]
 800750c:	9b01      	ldr	r3, [sp, #4]
 800750e:	6120      	str	r0, [r4, #16]
 8007510:	b15b      	cbz	r3, 800752a <__smakebuf_r+0x70>
 8007512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007516:	4630      	mov	r0, r6
 8007518:	f000 f84e 	bl	80075b8 <_isatty_r>
 800751c:	b128      	cbz	r0, 800752a <__smakebuf_r+0x70>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f023 0303 	bic.w	r3, r3, #3
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	431d      	orrs	r5, r3
 800752e:	81a5      	strh	r5, [r4, #12]
 8007530:	e7cf      	b.n	80074d2 <__smakebuf_r+0x18>

08007532 <_raise_r>:
 8007532:	291f      	cmp	r1, #31
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	d904      	bls.n	8007546 <_raise_r+0x14>
 800753c:	2316      	movs	r3, #22
 800753e:	6003      	str	r3, [r0, #0]
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007548:	b112      	cbz	r2, 8007550 <_raise_r+0x1e>
 800754a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800754e:	b94b      	cbnz	r3, 8007564 <_raise_r+0x32>
 8007550:	4620      	mov	r0, r4
 8007552:	f000 f853 	bl	80075fc <_getpid_r>
 8007556:	462a      	mov	r2, r5
 8007558:	4601      	mov	r1, r0
 800755a:	4620      	mov	r0, r4
 800755c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007560:	f000 b83a 	b.w	80075d8 <_kill_r>
 8007564:	2b01      	cmp	r3, #1
 8007566:	d00a      	beq.n	800757e <_raise_r+0x4c>
 8007568:	1c59      	adds	r1, r3, #1
 800756a:	d103      	bne.n	8007574 <_raise_r+0x42>
 800756c:	2316      	movs	r3, #22
 800756e:	6003      	str	r3, [r0, #0]
 8007570:	2001      	movs	r0, #1
 8007572:	e7e7      	b.n	8007544 <_raise_r+0x12>
 8007574:	2400      	movs	r4, #0
 8007576:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800757a:	4628      	mov	r0, r5
 800757c:	4798      	blx	r3
 800757e:	2000      	movs	r0, #0
 8007580:	e7e0      	b.n	8007544 <_raise_r+0x12>
	...

08007584 <raise>:
 8007584:	4b02      	ldr	r3, [pc, #8]	; (8007590 <raise+0xc>)
 8007586:	4601      	mov	r1, r0
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	f7ff bfd2 	b.w	8007532 <_raise_r>
 800758e:	bf00      	nop
 8007590:	20000068 	.word	0x20000068

08007594 <_fstat_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4d07      	ldr	r5, [pc, #28]	; (80075b4 <_fstat_r+0x20>)
 8007598:	2300      	movs	r3, #0
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	4611      	mov	r1, r2
 80075a0:	602b      	str	r3, [r5, #0]
 80075a2:	f7fa f887 	bl	80016b4 <_fstat>
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	d102      	bne.n	80075b0 <_fstat_r+0x1c>
 80075aa:	682b      	ldr	r3, [r5, #0]
 80075ac:	b103      	cbz	r3, 80075b0 <_fstat_r+0x1c>
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	bd38      	pop	{r3, r4, r5, pc}
 80075b2:	bf00      	nop
 80075b4:	20004c94 	.word	0x20004c94

080075b8 <_isatty_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d06      	ldr	r5, [pc, #24]	; (80075d4 <_isatty_r+0x1c>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7fa f886 	bl	80016d4 <_isatty>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_isatty_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_isatty_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	20004c94 	.word	0x20004c94

080075d8 <_kill_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d07      	ldr	r5, [pc, #28]	; (80075f8 <_kill_r+0x20>)
 80075dc:	2300      	movs	r3, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	f7fa f806 	bl	80015f6 <_kill>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d102      	bne.n	80075f4 <_kill_r+0x1c>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	b103      	cbz	r3, 80075f4 <_kill_r+0x1c>
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	bd38      	pop	{r3, r4, r5, pc}
 80075f6:	bf00      	nop
 80075f8:	20004c94 	.word	0x20004c94

080075fc <_getpid_r>:
 80075fc:	f7f9 bff3 	b.w	80015e6 <_getpid>

08007600 <_init>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr

0800760c <_fini>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr
