
Control_Digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007658  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007994  08007994  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800799c  0800799c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080079a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00004c38  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ce4  20004ce4  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .comment      000000b1  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000182b1  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f77  00000000  00000000  0003843e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001218  00000000  00000000  0003c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d93  00000000  00000000  0003d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b534  00000000  00000000  0003e363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001adc3  00000000  00000000  00069897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f36c8  00000000  00000000  0008465a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005268  00000000  00000000  00177d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0017cf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0017cff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077f0 	.word	0x080077f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	080077f0 	.word	0x080077f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <receiveData>:

}

// Generación del DAC y captura del ADC
void receiveData (float * buffer)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    float Y, U;
    uint16_t dacValue = 0, outputSample;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	82fb      	strh	r3, [r7, #22]

    // random = limite_inferior + rand() % (limite_superior +1 - limite_inferior);
    dacValue = DAC_REFERENCE_VALUE_LOW + rand() % (DAC_REFERENCE_VALUE_HIGH +1 - DAC_REFERENCE_VALUE_LOW);
 8000dd4:	f005 fcae 	bl	8006734 <rand>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a37      	ldr	r2, [pc, #220]	; (8000eb8 <receiveData+0xf0>)
 8000ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8000de0:	1211      	asrs	r1, r2, #8
 8000de2:	17da      	asrs	r2, r3, #31
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	f240 41da 	movw	r1, #1242	; 0x4da
 8000dea:	fb01 f202 	mul.w	r2, r1, r2
 8000dee:	1a9a      	subs	r2, r3, r2
 8000df0:	b293      	uxth	r3, r2
 8000df2:	f203 5393 	addw	r3, r3, #1427	; 0x593
 8000df6:	82fb      	strh	r3, [r7, #22]

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 8000df8:	8afb      	ldrh	r3, [r7, #22]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	482f      	ldr	r0, [pc, #188]	; (8000ebc <receiveData+0xf4>)
 8000e00:	f001 fbeb 	bl	80025da <HAL_DAC_SetValue>

	HAL_ADC_Start(&hadc1);
 8000e04:	482e      	ldr	r0, [pc, #184]	; (8000ec0 <receiveData+0xf8>)
 8000e06:	f000 ff81 	bl	8001d0c <HAL_ADC_Start>

    U = (float) dacValue * 3.3 / 4095.0;
 8000e0a:	8afb      	ldrh	r3, [r7, #22]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e14:	ee17 0a90 	vmov	r0, s15
 8000e18:	f7ff fb9e 	bl	8000558 <__aeabi_f2d>
 8000e1c:	a322      	add	r3, pc, #136	; (adr r3, 8000ea8 <receiveData+0xe0>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fbf1 	bl	8000608 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	a320      	add	r3, pc, #128	; (adr r3, 8000eb0 <receiveData+0xe8>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff fd12 	bl	800085c <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fdf4 	bl	8000a2c <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	613b      	str	r3, [r7, #16]

	outputSample = HAL_ADC_GetValue(&hadc1);
 8000e48:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <receiveData+0xf8>)
 8000e4a:	f001 f831 	bl	8001eb0 <HAL_ADC_GetValue>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	81fb      	strh	r3, [r7, #14]

	Y = (float) outputSample * 3.3 / 4095.0;
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e5c:	ee17 0a90 	vmov	r0, s15
 8000e60:	f7ff fb7a 	bl	8000558 <__aeabi_f2d>
 8000e64:	a310      	add	r3, pc, #64	; (adr r3, 8000ea8 <receiveData+0xe0>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fbcd 	bl	8000608 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	a30e      	add	r3, pc, #56	; (adr r3, 8000eb0 <receiveData+0xe8>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fcee 	bl	800085c <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fdd0 	bl	8000a2c <__aeabi_d2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60bb      	str	r3, [r7, #8]
#if (WAVEFORM_DEBUG == 1)
	vPrintNumber(dacValue);
	vPrintStringAndNumber(",", outputSample);
#endif

	buffer[0] = U;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]
	buffer[1] = Y;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	66666666 	.word	0x66666666
 8000eac:	400a6666 	.word	0x400a6666
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	40affe00 	.word	0x40affe00
 8000eb8:	34c439b7 	.word	0x34c439b7
 8000ebc:	20000110 	.word	0x20000110
 8000ec0:	200000c8 	.word	0x200000c8

08000ec4 <TaskPIDControl>:
    .prevMeasurement = 0.0f,
    .out = 0.0f,
};

void TaskPIDControl(void * argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	uint32_t xLastWakeTime, outputSample;
	uint16_t setpoint = SQUARE_VALUE_2V;
 8000ecc:	f640 13b2 	movw	r3, #2482	; 0x9b2
 8000ed0:	83fb      	strh	r3, [r7, #30]
	float controlSignal, res = 3.3/4095.0;
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <TaskPIDControl+0xe4>)
 8000ed4:	61bb      	str	r3, [r7, #24]
	uint8_t samplesCounter = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	4833      	ldr	r0, [pc, #204]	; (8000fac <TaskPIDControl+0xe8>)
 8000ede:	f001 fb2a 	bl	8002536 <HAL_DAC_Start>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, SQUARE_VALUE_1V);
 8000ee2:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4830      	ldr	r0, [pc, #192]	; (8000fac <TaskPIDControl+0xe8>)
 8000eec:	f001 fb75 	bl	80025da <HAL_DAC_SetValue>
	vTaskDelay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f003 ff20 	bl	8004d38 <vTaskDelay>

	vPrintString("start--------");
 8000ef8:	482d      	ldr	r0, [pc, #180]	; (8000fb0 <TaskPIDControl+0xec>)
 8000efa:	f000 fd6b 	bl	80019d4 <vPrintString>
	vPrintNewLine();
 8000efe:	f000 fd9f 	bl	8001a40 <vPrintNewLine>

	xLastWakeTime = xTaskGetTickCount();
 8000f02:	f004 f869 	bl	8004fd8 <xTaskGetTickCount>
 8000f06:	4603      	mov	r3, r0
 8000f08:	60bb      	str	r3, [r7, #8]
//		{
//			(squareValue == SQUARE_VALUE_1V) ? (squareValue = SQUARE_VALUE_2V) : (squareValue = SQUARE_VALUE_1V);
//			samplesCounter = 0;
//		}

		HAL_ADC_Start(&hadc1);
 8000f0a:	482a      	ldr	r0, [pc, #168]	; (8000fb4 <TaskPIDControl+0xf0>)
 8000f0c:	f000 fefe 	bl	8001d0c <HAL_ADC_Start>
		outputSample = HAL_ADC_GetValue(&hadc1);
 8000f10:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <TaskPIDControl+0xf0>)
 8000f12:	f000 ffcd 	bl	8001eb0 <HAL_ADC_GetValue>
 8000f16:	6138      	str	r0, [r7, #16]

		controlSignal = PIDController_Update(&pid, (float)setpoint*res, (float)outputSample*res);
 8000f18:	8bfb      	ldrh	r3, [r7, #30]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f22:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f26:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f34:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3c:	eef0 0a67 	vmov.f32	s1, s15
 8000f40:	eeb0 0a66 	vmov.f32	s0, s13
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <TaskPIDControl+0xf4>)
 8000f46:	f000 fb1a 	bl	800157e <PIDController_Update>
 8000f4a:	ed87 0a03 	vstr	s0, [r7, #12]

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((float)controlSignal/res) );
 8000f4e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f52:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5e:	ee17 3a90 	vmov	r3, s15
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <TaskPIDControl+0xe8>)
 8000f68:	f001 fb37 	bl	80025da <HAL_DAC_SetValue>

		vPrintNumber(setpoint);
 8000f6c:	8bfb      	ldrh	r3, [r7, #30]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fd16 	bl	80019a0 <vPrintNumber>
		vPrintStringAndNumber(",", outputSample);
 8000f74:	6939      	ldr	r1, [r7, #16]
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <TaskPIDControl+0xf8>)
 8000f78:	f000 fd46 	bl	8001a08 <vPrintStringAndNumber>
		vPrintStringAndNumber(",", (uint32_t)((float)controlSignal/res));
 8000f7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f80:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8c:	ee17 1a90 	vmov	r1, s15
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <TaskPIDControl+0xf8>)
 8000f92:	f000 fd39 	bl	8001a08 <vPrintStringAndNumber>
		vPrintNewLine();
 8000f96:	f000 fd53 	bl	8001a40 <vPrintNewLine>

		vTaskDelayUntil(&xLastWakeTime, LOOP_SAMPLING_TIME);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fe4b 	bl	8004c3c <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 8000fa6:	e7b0      	b.n	8000f0a <TaskPIDControl+0x46>
 8000fa8:	3a534067 	.word	0x3a534067
 8000fac:	20000110 	.word	0x20000110
 8000fb0:	08007808 	.word	0x08007808
 8000fb4:	200000c8 	.word	0x200000c8
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	08007818 	.word	0x08007818

08000fc0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <MX_ADC1_Init+0x9c>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_ADC1_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_ADC1_Init+0x98>)
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <MX_ADC1_Init+0xa0>)
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_ADC1_Init+0x98>)
 800100e:	2201      	movs	r2, #1
 8001010:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC1_Init+0x98>)
 800101c:	2201      	movs	r2, #1
 800101e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC1_Init+0x98>)
 8001022:	f000 fe2f 	bl	8001c84 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800102c:	f000 faa2 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001030:	2303      	movs	r3, #3
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_ADC1_Init+0x98>)
 8001042:	f000 ff43 	bl	8001ecc <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800104c:	f000 fa92 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000c8 	.word	0x200000c8
 800105c:	40012000 	.word	0x40012000
 8001060:	0f000001 	.word	0x0f000001

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_ADC_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d127      	bne.n	80010d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_ADC_MspInit+0x80>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_ADC_MspInit+0x80>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_ADC_MspInit+0x80>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_ADC_MspInit+0x80>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_ADC_MspInit+0x80>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_ADC_MspInit+0x80>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010be:	2308      	movs	r3, #8
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_ADC_MspInit+0x84>)
 80010d2:	f001 faf7 	bl	80026c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40012000 	.word	0x40012000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_DAC_Init+0x4c>)
 80010fc:	4a0f      	ldr	r2, [pc, #60]	; (800113c <MX_DAC_Init+0x50>)
 80010fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_DAC_Init+0x4c>)
 8001102:	f001 f9f6 	bl	80024f2 <HAL_DAC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800110c:	f000 fa32 	bl	8001574 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_DAC_Init+0x4c>)
 8001120:	f001 fa80 	bl	8002624 <HAL_DAC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800112a:	f000 fa23 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000110 	.word	0x20000110
 800113c:	40007400 	.word	0x40007400

08001140 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_DAC_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d127      	bne.n	80011b2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_DAC_MspInit+0x80>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <HAL_DAC_MspInit+0x80>)
 800116c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_DAC_MspInit+0x80>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_DAC_MspInit+0x80>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_DAC_MspInit+0x80>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_DAC_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800119a:	2310      	movs	r3, #16
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_DAC_MspInit+0x84>)
 80011ae:	f001 fa89 	bl	80026c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40007400 	.word	0x40007400
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* Create the thread(s) */
  /* creation of defaultTask */
	//TaskIdentificationHandle = osThreadNew(TaskIdentification, (void*)tILS1, &IdentificationTask_attributes);
	//TaskOLResponseHandle = osThreadNew(TaskOLResponse, NULL, &OLResponseTask_attributes);
	TaskPIDControlHandle = osThreadNew(TaskPIDControl, NULL, &PIDControlTask_attributes);
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <MX_FREERTOS_Init+0x18>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_FREERTOS_Init+0x1c>)
 80011d2:	f002 fd15 	bl	8003c00 <osThreadNew>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <MX_FREERTOS_Init+0x20>)
 80011da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	08007878 	.word	0x08007878
 80011e4:	08000ec5 	.word	0x08000ec5
 80011e8:	20000124 	.word	0x20000124

080011ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <MX_GPIO_Init+0x14c>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a44      	ldr	r2, [pc, #272]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_GPIO_Init+0x14c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <MX_GPIO_Init+0x14c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <MX_GPIO_Init+0x14c>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <MX_GPIO_Init+0x14c>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <MX_GPIO_Init+0x14c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80012b0:	4822      	ldr	r0, [pc, #136]	; (800133c <MX_GPIO_Init+0x150>)
 80012b2:	f001 fbb3 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <MX_GPIO_Init+0x154>)
 80012bc:	f001 fbae 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	481b      	ldr	r0, [pc, #108]	; (8001344 <MX_GPIO_Init+0x158>)
 80012d8:	f001 f9f4 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <MX_GPIO_Init+0x150>)
 80012f6:	f001 f9e5 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <MX_GPIO_Init+0x154>)
 8001312:	f001 f9d7 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_GPIO_Init+0x154>)
 800132a:	f001 f9cb 	bl	80026c4 <HAL_GPIO_Init>

}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400
 8001340:	40021800 	.word	0x40021800
 8001344:	40020800 	.word	0x40020800

08001348 <ILS_Init>:

/*=====[Implementations of public functions]=================================*/

// Configura la estructura de datos del Identificador
void ILS_Init (t_ILSdata* iData, uint32_t n, uint32_t ts_Ms, void (*pfR)(float32_t*))
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
	iData->N = n;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	609a      	str	r2, [r3, #8]
	iData->ts_Ms = ts_Ms;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]
	iData->p_receive = pfR;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	605a      	str	r2, [r3, #4]
	iData->i = 2;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2202      	movs	r2, #2
 800136c:	60da      	str	r2, [r3, #12]
    *                          matrix structure.
    * @param[in]     nRows     number of rows in the matrix.
    * @param[in]     nColumns  number of columns in the matrix.
    * @param[in]     pData     points to the matrix data array.
    */
	arm_mat_init_f32(&Y, iData->N, 1, iData->buffer_Y);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	b299      	uxth	r1, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800137a:	3304      	adds	r3, #4
 800137c:	2201      	movs	r2, #1
 800137e:	482d      	ldr	r0, [pc, #180]	; (8001434 <ILS_Init+0xec>)
 8001380:	f005 f9d4 	bl	800672c <arm_mat_init_f32>
	arm_mat_init_f32(&T, M_SIZE, 1, iData->buffer_T);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3314      	adds	r3, #20
 8001388:	2201      	movs	r2, #1
 800138a:	2105      	movs	r1, #5
 800138c:	482a      	ldr	r0, [pc, #168]	; (8001438 <ILS_Init+0xf0>)
 800138e:	f005 f9cd 	bl	800672c <arm_mat_init_f32>
	arm_mat_init_f32(&F, iData->N, M_SIZE, iData->buffer_F);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	b299      	uxth	r1, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3328      	adds	r3, #40	; 0x28
 800139c:	2205      	movs	r2, #5
 800139e:	4827      	ldr	r0, [pc, #156]	; (800143c <ILS_Init+0xf4>)
 80013a0:	f005 f9c4 	bl	800672c <arm_mat_init_f32>
	arm_mat_init_f32(&FT, M_SIZE, iData->N, iData->buffer_FT);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f603 73c8 	addw	r3, r3, #4040	; 0xfc8
 80013b0:	2105      	movs	r1, #5
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <ILS_Init+0xf8>)
 80013b4:	f005 f9ba 	bl	800672c <arm_mat_init_f32>
	arm_mat_init_f32(&aux0, M_SIZE, M_SIZE, iData->buffer_aux0);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 80013be:	3308      	adds	r3, #8
 80013c0:	2205      	movs	r2, #5
 80013c2:	2105      	movs	r1, #5
 80013c4:	481f      	ldr	r0, [pc, #124]	; (8001444 <ILS_Init+0xfc>)
 80013c6:	f005 f9b1 	bl	800672c <arm_mat_init_f32>
	arm_mat_init_f32(&aux1, M_SIZE, M_SIZE, iData->buffer_aux1);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f503 53fe 	add.w	r3, r3, #8128	; 0x1fc0
 80013d0:	330c      	adds	r3, #12
 80013d2:	2205      	movs	r2, #5
 80013d4:	2105      	movs	r1, #5
 80013d6:	481c      	ldr	r0, [pc, #112]	; (8001448 <ILS_Init+0x100>)
 80013d8:	f005 f9a8 	bl	800672c <arm_mat_init_f32>
	arm_mat_init_f32(&aux2, M_SIZE, 1, iData->buffer_aux2);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80013e2:	3330      	adds	r3, #48	; 0x30
 80013e4:	2201      	movs	r2, #1
 80013e6:	2105      	movs	r1, #5
 80013e8:	4818      	ldr	r0, [pc, #96]	; (800144c <ILS_Init+0x104>)
 80013ea:	f005 f99f 	bl	800672c <arm_mat_init_f32>

	// Valores iniciales
	iData->buffer_Y[1] = 0;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80013f4:	461a      	mov	r2, r3
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	6493      	str	r3, [r2, #72]	; 0x48
	iData->buffer_Y[0] = 0;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001402:	461a      	mov	r2, r3
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
	iData->buffer_U[1] = 0;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001410:	461a      	mov	r2, r3
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	f8c2 3368 	str.w	r3, [r2, #872]	; 0x368
	iData->buffer_U[0] = 0;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001420:	461a      	mov	r2, r3
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000128 	.word	0x20000128
 8001438:	20000130 	.word	0x20000130
 800143c:	20000138 	.word	0x20000138
 8001440:	20000140 	.word	0x20000140
 8001444:	20000148 	.word	0x20000148
 8001448:	20000150 	.word	0x20000150
 800144c:	20000158 	.word	0x20000158

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f000 fba4 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f822 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f7ff fec6 	bl	80011ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001460:	f000 fb02 	bl	8001a68 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001464:	f7ff fdac 	bl	8000fc0 <MX_ADC1_Init>
  MX_DAC_Init();
 8001468:	f7ff fe40 	bl	80010ec <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  tILS1 = (t_ILSdata*) pvPortMalloc (sizeof(t_ILSdata));
 800146c:	f242 6084 	movw	r0, #9860	; 0x2684
 8001470:	f004 ff72 	bl	8006358 <pvPortMalloc>
 8001474:	4603      	mov	r3, r0
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <main+0x48>)
 8001478:	6013      	str	r3, [r2, #0]
  ILS_Init(tILS1, 140, 15, receiveData);
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <main+0x48>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <main+0x4c>)
 8001480:	220f      	movs	r2, #15
 8001482:	218c      	movs	r1, #140	; 0x8c
 8001484:	f7ff ff60 	bl	8001348 <ILS_Init>

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001488:	f002 fb70 	bl	8003b6c <osKernelInitialize>
  MX_FREERTOS_Init();
 800148c:	f7ff fe9c 	bl	80011c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001490:	f002 fb90 	bl	8003bb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001494:	e7fe      	b.n	8001494 <main+0x44>
 8001496:	bf00      	nop
 8001498:	20000160 	.word	0x20000160
 800149c:	08000dc9 	.word	0x08000dc9

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	; 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 fb45 	bl	8006b3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemClock_Config+0xcc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <SystemClock_Config+0xcc>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <SystemClock_Config+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <SystemClock_Config+0xd0>)
 80014ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001500:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2304      	movs	r3, #4
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001514:	23a8      	movs	r3, #168	; 0xa8
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800151c:	2307      	movs	r3, #7
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fa93 	bl	8002a50 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001530:	f000 f820 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2105      	movs	r1, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fcf4 	bl	8002f40 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155e:	f000 f809 	bl	8001574 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	e7fe      	b.n	800157c <Error_Handler+0x8>

0800157e <PIDController_Update>:
 */

#include "pid.h"

float PIDController_Update(PIDController * pid, float setpoint, float measurement)
{
 800157e:	b480      	push	{r7}
 8001580:	b087      	sub	sp, #28
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	ed87 0a02 	vstr	s0, [r7, #8]
 800158a:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid->bypassPid) {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <PIDController_Update+0x1c>
        return setpoint;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	e0c1      	b.n	800171e <PIDController_Update+0x1a0>
    }

    // Error signal
    float error = setpoint - measurement;
 800159a:	ed97 7a02 	vldr	s14, [r7, #8]
 800159e:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a6:	edc7 7a05 	vstr	s15, [r7, #20]

    if (fabs(error) < pid->deadZone) {
 80015aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ae:	eeb0 7ae7 	vabs.f32	s14, s15
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	d502      	bpl.n	80015c8 <PIDController_Update+0x4a>
        return pid->out;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	e0aa      	b.n	800171e <PIDController_Update+0x1a0>
    }

    // Proportional
    float proportional = pid->Kp * error;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral
    pid->integrator =
        pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80015ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 80015fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001602:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->integrator =
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    /* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	dd04      	ble.n	8001634 <PIDController_Update+0xb6>
        pid->integrator = pid->limMaxInt;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a1a      	ldr	r2, [r3, #32]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
 8001632:	e00e      	b.n	8001652 <PIDController_Update+0xd4>

    } else if (pid->integrator < pid->limMinInt) {
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	d503      	bpl.n	8001652 <PIDController_Update+0xd4>
        pid->integrator = pid->limMinInt;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    // Derivative (band-limited differentiator)

    pid->differentiator =
        -(2.0f * pid->Kd *
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	edd3 7a03 	vldr	s15, [r3, #12]
 8001658:	ee37 7aa7 	vadd.f32	s14, s15, s15
              (measurement -
               pid->prevMeasurement) /* Note: derivative on measurement,
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
              (measurement -
 8001662:	edd7 6a01 	vldr	s13, [r7, #4]
 8001666:	ee76 7ae7 	vsub.f32	s15, s13, s15
        -(2.0f * pid->Kd *
 800166a:	ee27 7a27 	vmul.f32	s14, s14, s15
                                        therefore minus sign in front of
                                        equation! */
          + (2.0f * pid->tau - pid->T) * pid->differentiator) /
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	edd3 7a04 	vldr	s15, [r3, #16]
 8001674:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800167e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
        -(2.0f * pid->Kd *
 8001690:	eef1 6a67 	vneg.f32	s13, s15
        (2.0f * pid->tau + pid->T);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edd3 7a04 	vldr	s15, [r3, #16]
 800169a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016a4:	ee37 7a27 	vadd.f32	s14, s14, s15
          + (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80016a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator =
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    // Compute output and apply limits
    pid->out = proportional + pid->integrator + pid->differentiator;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80016b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    if (pid->out > pid->limMax) {
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	dd04      	ble.n	80016f0 <PIDController_Update+0x172>
        pid->out = pid->limMax;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ee:	e00e      	b.n	800170e <PIDController_Update+0x190>

    } else if (pid->out < pid->limMin) {
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80016fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	d503      	bpl.n	800170e <PIDController_Update+0x190>
        pid->out = pid->limMin;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Store error and measurement for later use */
    pid->prevError = error;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
    pid->prevMeasurement = measurement;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
    //vPrintStringAndNumber("prop", (uint32_t)proportional);
    /* Return controller output */
    return pid->out;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb0 0a67 	vmov.f32	s0, s15
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_MspInit+0x54>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_MspInit+0x54>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_MspInit+0x54>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_MspInit+0x54>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_MspInit+0x54>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_MspInit+0x54>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	210f      	movs	r1, #15
 8001772:	f06f 0001 	mvn.w	r0, #1
 8001776:	f000 fe94 	bl	80024a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f000 fa44 	bl	8001c44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017bc:	f003 ff4c 	bl	8005658 <xTaskGetSchedulerState>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d001      	beq.n	80017ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017c6:	f004 fd37 	bl	8006238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_kill>:

int _kill(int pid, int sig)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017e8:	f005 fa4e 	bl	8006c88 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2216      	movs	r2, #22
 80017f0:	601a      	str	r2, [r3, #0]
  return -1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_exit>:

void _exit (int status)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001806:	f04f 31ff 	mov.w	r1, #4294967295
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffe7 	bl	80017de <_kill>
  while (1) {}    /* Make sure we hang here */
 8001810:	e7fe      	b.n	8001810 <_exit+0x12>

08001812 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e00a      	b.n	800183a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001824:	f3af 8000 	nop.w
 8001828:	4601      	mov	r1, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	b2ca      	uxtb	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf0      	blt.n	8001824 <_read+0x12>
  }

  return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e009      	b.n	8001872 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f888 	bl	800197c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbf1      	blt.n	800185e <_write+0x12>
  }
  return len;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_close>:

int _close(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ac:	605a      	str	r2, [r3, #4]
  return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_isatty>:

int _isatty(int file)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f005 f9b4 	bl	8006c88 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20030000 	.word	0x20030000
 800194c:	00000400 	.word	0x00000400
 8001950:	20000164 	.word	0x20000164
 8001954:	20004ce8 	.word	0x20004ce8

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__io_putchar>:


UART_HandleTypeDef huart3;

PUTCHAR_PROTOTYPE
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001984:	1d39      	adds	r1, r7, #4
 8001986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198a:	2201      	movs	r2, #1
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <__io_putchar+0x20>)
 800198e:	f001 fd44 	bl	800341a <HAL_UART_Transmit>

	return ch;
 8001992:	687b      	ldr	r3, [r7, #4]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000168 	.word	0x20000168

080019a0 <vPrintNumber>:

/*-----------------------------------------------------------*/

void vPrintNumber( uint32_t ulValue )
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 80019a8:	f004 fbb4 	bl	8006114 <vPortEnterCritical>
	{
		printf( "%lu", ulValue );
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <vPrintNumber+0x2c>)
 80019b0:	f005 f870 	bl	8006a94 <iprintf>
		fflush( stdout );
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <vPrintNumber+0x30>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 ffa6 	bl	800690c <fflush>
	}
	taskEXIT_CRITICAL();
 80019c0:	f004 fbd8 	bl	8006174 <vPortExitCritical>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	08007850 	.word	0x08007850
 80019d0:	200000a8 	.word	0x200000a8

080019d4 <vPrintString>:
/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 80019dc:	f004 fb9a 	bl	8006114 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <vPrintString+0x2c>)
 80019e4:	f005 f856 	bl	8006a94 <iprintf>
		fflush( stdout );
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <vPrintString+0x30>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 ff8c 	bl	800690c <fflush>
	}
	taskEXIT_CRITICAL();
 80019f4:	f004 fbbe 	bl	8006174 <vPortExitCritical>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	08007854 	.word	0x08007854
 8001a04:	200000a8 	.word	0x200000a8

08001a08 <vPrintStringAndNumber>:
/*-----------------------------------------------------------*/

void vPrintStringAndNumber( const char *pcString, uint32_t ulValue )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8001a12:	f004 fb7f 	bl	8006114 <vPortEnterCritical>
	{
		printf( "%s %lu", pcString, ulValue );
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <vPrintStringAndNumber+0x30>)
 8001a1c:	f005 f83a 	bl	8006a94 <iprintf>
		fflush( stdout );
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <vPrintStringAndNumber+0x34>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 ff70 	bl	800690c <fflush>
	}
	taskEXIT_CRITICAL();
 8001a2c:	f004 fba2 	bl	8006174 <vPortExitCritical>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	08007858 	.word	0x08007858
 8001a3c:	200000a8 	.word	0x200000a8

08001a40 <vPrintNewLine>:
/*-----------------------------------------------------------*/

void vPrintNewLine( void )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	char newLineChars[2] = {13, 10};
 8001a46:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001a4a:	80bb      	strh	r3, [r7, #4]

	HAL_UART_Transmit(&huart3, (uint8_t *)newLineChars, 2, 0xFFFF);
 8001a4c:	1d39      	adds	r1, r7, #4
 8001a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a52:	2202      	movs	r2, #2
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <vPrintNewLine+0x24>)
 8001a56:	f001 fce0 	bl	800341a <HAL_UART_Transmit>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000168 	.word	0x20000168

08001a68 <MX_USART3_UART_Init>:
/*-----------------------------------------------------------*/

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART3_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001aa0:	f001 fc6e 	bl	8003380 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f7ff fd63 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000168 	.word	0x20000168
 8001ab8:	40004800 	.word	0x40004800

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_UART_MspInit+0x84>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12c      	bne.n	8001b38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_UART_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_UART_MspInit+0x88>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_UART_MspInit+0x88>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_UART_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_UART_MspInit+0x88>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_UART_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_UART_MspInit+0x8c>)
 8001b34:	f000 fdc6 	bl	80026c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40004800 	.word	0x40004800
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020c00 	.word	0x40020c00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b76:	f7ff feef 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f005 f88b 	bl	8006c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff fc67 	bl	8001450 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001b90:	080079a4 	.word	0x080079a4
  ldr r2, =_sbss
 8001b94:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001b98:	20004ce4 	.word	0x20004ce4

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fc5f 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fdac 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fc69 	bl	80024da <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 fc3f 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000040 	.word	0x20000040
 8001c3c:	20000048 	.word	0x20000048
 8001c40:	20000044 	.word	0x20000044

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000048 	.word	0x20000048
 8001c68:	200001ac 	.word	0x200001ac

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	200001ac 	.word	0x200001ac

08001c84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e033      	b.n	8001d02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff f9de 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cca:	f023 0302 	bic.w	r3, r3, #2
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa2a 	bl	8002130 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf2:	e001      	b.n	8001cf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Start+0x1a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e0b2      	b.n	8001e8c <HAL_ADC_Start+0x180>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d018      	beq.n	8001d6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4c:	4b52      	ldr	r3, [pc, #328]	; (8001e98 <HAL_ADC_Start+0x18c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_ADC_Start+0x190>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0c9a      	lsrs	r2, r3, #18
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d17a      	bne.n	8001e72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dba:	d106      	bne.n	8001dca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f023 0206 	bic.w	r2, r3, #6
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_ADC_Start+0x194>)
 8001dda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d12a      	bne.n	8001e48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <HAL_ADC_Start+0x198>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d015      	beq.n	8001e28 <HAL_ADC_Start+0x11c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <HAL_ADC_Start+0x19c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d105      	bne.n	8001e12 <HAL_ADC_Start+0x106>
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_ADC_Start+0x194>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_ADC_Start+0x1a0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d136      	bne.n	8001e8a <HAL_ADC_Start+0x17e>
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_ADC_Start+0x194>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d130      	bne.n	8001e8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d129      	bne.n	8001e8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	e020      	b.n	8001e8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_ADC_Start+0x198>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d11b      	bne.n	8001e8a <HAL_ADC_Start+0x17e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d114      	bne.n	8001e8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e00b      	b.n	8001e8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20000040 	.word	0x20000040
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	40012300 	.word	0x40012300
 8001ea4:	40012000 	.word	0x40012000
 8001ea8:	40012100 	.word	0x40012100
 8001eac:	40012200 	.word	0x40012200

08001eb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1c>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e113      	b.n	8002110 <HAL_ADC_ConfigChannel+0x244>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d925      	bls.n	8001f44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68d9      	ldr	r1, [r3, #12]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b1e      	subs	r3, #30
 8001f0e:	2207      	movs	r2, #7
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4403      	add	r3, r0
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	e022      	b.n	8001f8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6919      	ldr	r1, [r3, #16]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	2207      	movs	r2, #7
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4403      	add	r3, r0
 8001f80:	409a      	lsls	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d824      	bhi.n	8001fdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b05      	subs	r3, #5
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b05      	subs	r3, #5
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fda:	e04c      	b.n	8002076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d824      	bhi.n	800202e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b23      	subs	r3, #35	; 0x23
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	400a      	ands	r2, r1
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b23      	subs	r3, #35	; 0x23
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
 800202c:	e023      	b.n	8002076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b41      	subs	r3, #65	; 0x41
 8002040:	221f      	movs	r2, #31
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	400a      	ands	r2, r1
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b41      	subs	r3, #65	; 0x41
 800206a:	fa00 f203 	lsl.w	r2, r0, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <HAL_ADC_ConfigChannel+0x250>)
 8002078:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_ADC_ConfigChannel+0x254>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d10f      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b12      	cmp	r3, #18
 800208a:	d10b      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_ADC_ConfigChannel+0x254>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12b      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x23a>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_ADC_ConfigChannel+0x258>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x1f4>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b11      	cmp	r3, #17
 80020be:	d122      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_ADC_ConfigChannel+0x258>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d111      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_ADC_ConfigChannel+0x25c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_ADC_ConfigChannel+0x260>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9a      	lsrs	r2, r3, #18
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012300 	.word	0x40012300
 8002120:	40012000 	.word	0x40012000
 8002124:	10000012 	.word	0x10000012
 8002128:	20000040 	.word	0x20000040
 800212c:	431bde83 	.word	0x431bde83

08002130 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002138:	4b79      	ldr	r3, [pc, #484]	; (8002320 <ADC_Init+0x1f0>)
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	021a      	lsls	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6899      	ldr	r1, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	4a58      	ldr	r2, [pc, #352]	; (8002324 <ADC_Init+0x1f4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d022      	beq.n	800220e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6899      	ldr	r1, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	e00f      	b.n	800222e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800222c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0202 	bic.w	r2, r2, #2
 800223c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7e1b      	ldrb	r3, [r3, #24]
 8002248:	005a      	lsls	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01b      	beq.n	8002294 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800227a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	035a      	lsls	r2, r3, #13
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e007      	b.n	80022a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	3b01      	subs	r3, #1
 80022c0:	051a      	lsls	r2, r3, #20
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e6:	025a      	lsls	r2, r3, #9
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	029a      	lsls	r2, r3, #10
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40012300 	.word	0x40012300
 8002324:	0f000001 	.word	0x0f000001

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff47 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff5c 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffb0 	bl	8002448 <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e014      	b.n	800252e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	791b      	ldrb	r3, [r3, #4]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fe fe13 	bl	8001140 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	795b      	ldrb	r3, [r3, #5]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_DAC_Start+0x16>
 8002548:	2302      	movs	r3, #2
 800254a:	e040      	b.n	80025ce <HAL_DAC_Start+0x98>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2201      	movs	r2, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002580:	2b3c      	cmp	r3, #60	; 0x3c
 8002582:	d11d      	bne.n	80025c0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	e014      	b.n	80025c0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	213c      	movs	r1, #60	; 0x3c
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d107      	bne.n	80025c0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0202 	orr.w	r2, r2, #2
 80025be:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025da:	b480      	push	{r7}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	3308      	adds	r3, #8
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e004      	b.n	800260e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	3314      	adds	r3, #20
 800260c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	461a      	mov	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	795b      	ldrb	r3, [r3, #5]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_DAC_ConfigChannel+0x18>
 8002638:	2302      	movs	r3, #2
 800263a:	e03c      	b.n	80026b6 <HAL_DAC_ConfigChannel+0x92>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2202      	movs	r2, #2
 8002646:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	f640 72fe 	movw	r2, #4094	; 0xffe
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4013      	ands	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	22c0      	movs	r2, #192	; 0xc0
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	e177      	b.n	80029d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e0:	2201      	movs	r2, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	f040 8166 	bne.w	80029ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d005      	beq.n	8002716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002712:	2b02      	cmp	r3, #2
 8002714:	d130      	bne.n	8002778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 0201 	and.w	r2, r3, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b03      	cmp	r3, #3
 8002782:	d017      	beq.n	80027b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d123      	bne.n	8002808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	220f      	movs	r2, #15
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	08da      	lsrs	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3208      	adds	r2, #8
 8002802:	69b9      	ldr	r1, [r7, #24]
 8002804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0203 	and.w	r2, r3, #3
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80c0 	beq.w	80029ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b66      	ldr	r3, [pc, #408]	; (80029e8 <HAL_GPIO_Init+0x324>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a65      	ldr	r2, [pc, #404]	; (80029e8 <HAL_GPIO_Init+0x324>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_GPIO_Init+0x324>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002866:	4a61      	ldr	r2, [pc, #388]	; (80029ec <HAL_GPIO_Init+0x328>)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <HAL_GPIO_Init+0x32c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d037      	beq.n	8002902 <HAL_GPIO_Init+0x23e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a57      	ldr	r2, [pc, #348]	; (80029f4 <HAL_GPIO_Init+0x330>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d031      	beq.n	80028fe <HAL_GPIO_Init+0x23a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_GPIO_Init+0x334>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d02b      	beq.n	80028fa <HAL_GPIO_Init+0x236>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a55      	ldr	r2, [pc, #340]	; (80029fc <HAL_GPIO_Init+0x338>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d025      	beq.n	80028f6 <HAL_GPIO_Init+0x232>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_GPIO_Init+0x33c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01f      	beq.n	80028f2 <HAL_GPIO_Init+0x22e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a53      	ldr	r2, [pc, #332]	; (8002a04 <HAL_GPIO_Init+0x340>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d019      	beq.n	80028ee <HAL_GPIO_Init+0x22a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	; (8002a08 <HAL_GPIO_Init+0x344>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0x226>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a51      	ldr	r2, [pc, #324]	; (8002a0c <HAL_GPIO_Init+0x348>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00d      	beq.n	80028e6 <HAL_GPIO_Init+0x222>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a50      	ldr	r2, [pc, #320]	; (8002a10 <HAL_GPIO_Init+0x34c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <HAL_GPIO_Init+0x21e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <HAL_GPIO_Init+0x350>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_GPIO_Init+0x21a>
 80028da:	2309      	movs	r3, #9
 80028dc:	e012      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028de:	230a      	movs	r3, #10
 80028e0:	e010      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028e2:	2308      	movs	r3, #8
 80028e4:	e00e      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028e6:	2307      	movs	r3, #7
 80028e8:	e00c      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028ea:	2306      	movs	r3, #6
 80028ec:	e00a      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x240>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x240>
 8002902:	2300      	movs	r3, #0
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f002 0203 	and.w	r2, r2, #3
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4093      	lsls	r3, r2
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002914:	4935      	ldr	r1, [pc, #212]	; (80029ec <HAL_GPIO_Init+0x328>)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002946:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800294c:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_GPIO_Init+0x354>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002970:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002976:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_GPIO_Init+0x354>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_GPIO_Init+0x354>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x354>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <HAL_GPIO_Init+0x354>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	f67f ae84 	bls.w	80026e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40013800 	.word	0x40013800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40021400 	.word	0x40021400
 8002a08:	40021800 	.word	0x40021800
 8002a0c:	40021c00 	.word	0x40021c00
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40022400 	.word	0x40022400
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f8b0 	bl	8001c6c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f8ac 	bl	8001c6c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff f89c 	bl	8001c6c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7ff f898 	bl	8001c6c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7ff f851 	bl	8001c6c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7ff f84d 	bl	8001c6c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f830 	bl	8001c6c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7ff f82c 	bl	8001c6c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7ff f810 	bl	8001c6c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7ff f80c 	bl	8001c6c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fff9 	bl	8001c6c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fff5 	bl	8001c6c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe ffb5 	bl	8001c6c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe ffb1 	bl	8001c6c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe ff76 	bl	8001c6c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe ff72 	bl	8001c6c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe ff60 	bl	8001c6c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe ff5c 	bl	8001c6c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe ff30 	bl	8001c6c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe ff2c 	bl	8001c6c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe ff05 	bl	8001c6c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe ff01 	bl	8001c6c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe feee 	bl	8001c6c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe feea 	bl	8001c6c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe fe1c 	bl	8001c6c <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fe18 	bl	8001c6c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fd7c 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	0800789c 	.word	0x0800789c
 8003104:	20000040 	.word	0x20000040
 8003108:	20000044 	.word	0x20000044

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b094      	sub	sp, #80	; 0x50
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	2300      	movs	r3, #0
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311c:	2300      	movs	r3, #0
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80e1 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e0db      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003144:	e0db      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_GetSysClockFreq+0x208>)
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314a:	e0d8      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b6f      	ldr	r3, [pc, #444]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
 800316c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
 800317a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4621      	mov	r1, r4
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	6139      	str	r1, [r7, #16]
 800319c:	4629      	mov	r1, r5
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b0:	4659      	mov	r1, fp
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4651      	mov	r1, sl
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4651      	mov	r1, sl
 80031c0:	ebb2 0801 	subs.w	r8, r2, r1
 80031c4:	4659      	mov	r1, fp
 80031c6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	462b      	mov	r3, r5
 80031ec:	eb49 0303 	adc.w	r3, r9, r3
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031fe:	4629      	mov	r1, r5
 8003200:	024b      	lsls	r3, r1, #9
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003208:	4621      	mov	r1, r4
 800320a:	024a      	lsls	r2, r1, #9
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
 8003216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800321c:	f7fd fc56 	bl	8000acc <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	e058      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	4618      	mov	r0, r3
 8003234:	4611      	mov	r1, r2
 8003236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0159      	lsls	r1, r3, #5
 8003252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003256:	0150      	lsls	r0, r2, #5
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4641      	mov	r1, r8
 800325e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb63 0b01 	sbc.w	fp, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800327c:	ebb2 040a 	subs.w	r4, r2, sl
 8003280:	eb63 050b 	sbc.w	r5, r3, fp
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	00eb      	lsls	r3, r5, #3
 800328e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	4643      	mov	r3, r8
 800329a:	18e3      	adds	r3, r4, r3
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	464b      	mov	r3, r9
 80032a0:	eb45 0303 	adc.w	r3, r5, r3
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b2:	4629      	mov	r1, r5
 80032b4:	028b      	lsls	r3, r1, #10
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032bc:	4621      	mov	r1, r4
 80032be:	028a      	lsls	r2, r1, #10
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	61fa      	str	r2, [r7, #28]
 80032cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d0:	f7fd fbfc 	bl	8000acc <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003300:	4618      	mov	r0, r3
 8003302:	3750      	adds	r7, #80	; 0x50
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000040 	.word	0x20000040

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	080078ac 	.word	0x080078ac

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffdc 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0b5b      	lsrs	r3, r3, #13
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	080078ac 	.word	0x080078ac

08003380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e03f      	b.n	8003412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe fb88 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f929 	bl	800361c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b08a      	sub	sp, #40	; 0x28
 800341e:	af02      	add	r7, sp, #8
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b20      	cmp	r3, #32
 8003438:	d17c      	bne.n	8003534 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_UART_Transmit+0x2c>
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e075      	b.n	8003536 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_UART_Transmit+0x3e>
 8003454:	2302      	movs	r3, #2
 8003456:	e06e      	b.n	8003536 <HAL_UART_Transmit+0x11c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2221      	movs	r2, #33	; 0x21
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346e:	f7fe fbfd 	bl	8001c6c <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	88fa      	ldrh	r2, [r7, #6]
 800347e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d108      	bne.n	800349c <HAL_UART_Transmit+0x82>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	e003      	b.n	80034a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034ac:	e02a      	b.n	8003504 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f840 	bl	800353e <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e036      	b.n	8003536 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3302      	adds	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e007      	b.n	80034f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1cf      	bne.n	80034ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2140      	movs	r1, #64	; 0x40
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f810 	bl	800353e <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e006      	b.n	8003536 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b090      	sub	sp, #64	; 0x40
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354e:	e050      	b.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d04c      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0x30>
 800355e:	f7fe fb85 	bl	8001c6c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800356a:	429a      	cmp	r2, r3
 800356c:	d241      	bcs.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358e:	637a      	str	r2, [r7, #52]	; 0x34
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	613b      	str	r3, [r7, #16]
   return(result);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c2:	623a      	str	r2, [r7, #32]
 80035c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	69f9      	ldr	r1, [r7, #28]
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e00f      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d09f      	beq.n	8003550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3740      	adds	r7, #64	; 0x40
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800361c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003620:	b0c0      	sub	sp, #256	; 0x100
 8003622:	af00      	add	r7, sp, #0
 8003624:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	68d9      	ldr	r1, [r3, #12]
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	ea40 0301 	orr.w	r3, r0, r1
 8003644:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	431a      	orrs	r2, r3
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	431a      	orrs	r2, r3
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003674:	f021 010c 	bic.w	r1, r1, #12
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003682:	430b      	orrs	r3, r1
 8003684:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	6999      	ldr	r1, [r3, #24]
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	ea40 0301 	orr.w	r3, r0, r1
 80036a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b8f      	ldr	r3, [pc, #572]	; (80038e8 <UART_SetConfig+0x2cc>)
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d005      	beq.n	80036bc <UART_SetConfig+0xa0>
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b8d      	ldr	r3, [pc, #564]	; (80038ec <UART_SetConfig+0x2d0>)
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d104      	bne.n	80036c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036bc:	f7ff fe4c 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 80036c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036c4:	e003      	b.n	80036ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036c6:	f7ff fe33 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80036ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d8:	f040 810c 	bne.w	80038f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036ee:	4622      	mov	r2, r4
 80036f0:	462b      	mov	r3, r5
 80036f2:	1891      	adds	r1, r2, r2
 80036f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80036f6:	415b      	adcs	r3, r3
 80036f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036fe:	4621      	mov	r1, r4
 8003700:	eb12 0801 	adds.w	r8, r2, r1
 8003704:	4629      	mov	r1, r5
 8003706:	eb43 0901 	adc.w	r9, r3, r1
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800371e:	4690      	mov	r8, r2
 8003720:	4699      	mov	r9, r3
 8003722:	4623      	mov	r3, r4
 8003724:	eb18 0303 	adds.w	r3, r8, r3
 8003728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800372c:	462b      	mov	r3, r5
 800372e:	eb49 0303 	adc.w	r3, r9, r3
 8003732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003742:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003746:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800374a:	460b      	mov	r3, r1
 800374c:	18db      	adds	r3, r3, r3
 800374e:	653b      	str	r3, [r7, #80]	; 0x50
 8003750:	4613      	mov	r3, r2
 8003752:	eb42 0303 	adc.w	r3, r2, r3
 8003756:	657b      	str	r3, [r7, #84]	; 0x54
 8003758:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800375c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003760:	f7fd f9b4 	bl	8000acc <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <UART_SetConfig+0x2d4>)
 800376a:	fba3 2302 	umull	r2, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	011c      	lsls	r4, r3, #4
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800377c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003780:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	64b9      	str	r1, [r7, #72]	; 0x48
 800378c:	415b      	adcs	r3, r3
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003790:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003794:	4641      	mov	r1, r8
 8003796:	eb12 0a01 	adds.w	sl, r2, r1
 800379a:	4649      	mov	r1, r9
 800379c:	eb43 0b01 	adc.w	fp, r3, r1
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b4:	4692      	mov	sl, r2
 80037b6:	469b      	mov	fp, r3
 80037b8:	4643      	mov	r3, r8
 80037ba:	eb1a 0303 	adds.w	r3, sl, r3
 80037be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c2:	464b      	mov	r3, r9
 80037c4:	eb4b 0303 	adc.w	r3, fp, r3
 80037c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037e0:	460b      	mov	r3, r1
 80037e2:	18db      	adds	r3, r3, r3
 80037e4:	643b      	str	r3, [r7, #64]	; 0x40
 80037e6:	4613      	mov	r3, r2
 80037e8:	eb42 0303 	adc.w	r3, r2, r3
 80037ec:	647b      	str	r3, [r7, #68]	; 0x44
 80037ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037f6:	f7fd f969 	bl	8000acc <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <UART_SetConfig+0x2d4>)
 8003802:	fba3 2301 	umull	r2, r3, r3, r1
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2264      	movs	r2, #100	; 0x64
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	1acb      	subs	r3, r1, r3
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <UART_SetConfig+0x2d4>)
 8003818:	fba3 2302 	umull	r2, r3, r3, r2
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003824:	441c      	add	r4, r3
 8003826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382a:	2200      	movs	r2, #0
 800382c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003830:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003834:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003838:	4642      	mov	r2, r8
 800383a:	464b      	mov	r3, r9
 800383c:	1891      	adds	r1, r2, r2
 800383e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003840:	415b      	adcs	r3, r3
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003848:	4641      	mov	r1, r8
 800384a:	1851      	adds	r1, r2, r1
 800384c:	6339      	str	r1, [r7, #48]	; 0x30
 800384e:	4649      	mov	r1, r9
 8003850:	414b      	adcs	r3, r1
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003860:	4659      	mov	r1, fp
 8003862:	00cb      	lsls	r3, r1, #3
 8003864:	4651      	mov	r1, sl
 8003866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386a:	4651      	mov	r1, sl
 800386c:	00ca      	lsls	r2, r1, #3
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	4603      	mov	r3, r0
 8003874:	4642      	mov	r2, r8
 8003876:	189b      	adds	r3, r3, r2
 8003878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800387c:	464b      	mov	r3, r9
 800387e:	460a      	mov	r2, r1
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003894:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800389c:	460b      	mov	r3, r1
 800389e:	18db      	adds	r3, r3, r3
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a2:	4613      	mov	r3, r2
 80038a4:	eb42 0303 	adc.w	r3, r2, r3
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038b2:	f7fd f90b 	bl	8000acc <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <UART_SetConfig+0x2d4>)
 80038bc:	fba3 1302 	umull	r1, r3, r3, r2
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	2164      	movs	r1, #100	; 0x64
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	3332      	adds	r3, #50	; 0x32
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <UART_SetConfig+0x2d4>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	f003 0207 	and.w	r2, r3, #7
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4422      	add	r2, r4
 80038e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038e4:	e106      	b.n	8003af4 <UART_SetConfig+0x4d8>
 80038e6:	bf00      	nop
 80038e8:	40011000 	.word	0x40011000
 80038ec:	40011400 	.word	0x40011400
 80038f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003902:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003906:	4642      	mov	r2, r8
 8003908:	464b      	mov	r3, r9
 800390a:	1891      	adds	r1, r2, r2
 800390c:	6239      	str	r1, [r7, #32]
 800390e:	415b      	adcs	r3, r3
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
 8003912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003916:	4641      	mov	r1, r8
 8003918:	1854      	adds	r4, r2, r1
 800391a:	4649      	mov	r1, r9
 800391c:	eb43 0501 	adc.w	r5, r3, r1
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	00eb      	lsls	r3, r5, #3
 800392a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392e:	00e2      	lsls	r2, r4, #3
 8003930:	4614      	mov	r4, r2
 8003932:	461d      	mov	r5, r3
 8003934:	4643      	mov	r3, r8
 8003936:	18e3      	adds	r3, r4, r3
 8003938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800393c:	464b      	mov	r3, r9
 800393e:	eb45 0303 	adc.w	r3, r5, r3
 8003942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003952:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003962:	4629      	mov	r1, r5
 8003964:	008b      	lsls	r3, r1, #2
 8003966:	4621      	mov	r1, r4
 8003968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800396c:	4621      	mov	r1, r4
 800396e:	008a      	lsls	r2, r1, #2
 8003970:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003974:	f7fd f8aa 	bl	8000acc <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4b60      	ldr	r3, [pc, #384]	; (8003b00 <UART_SetConfig+0x4e4>)
 800397e:	fba3 2302 	umull	r2, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	011c      	lsls	r4, r3, #4
 8003986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398a:	2200      	movs	r2, #0
 800398c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003990:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003994:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	1891      	adds	r1, r2, r2
 800399e:	61b9      	str	r1, [r7, #24]
 80039a0:	415b      	adcs	r3, r3
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a8:	4641      	mov	r1, r8
 80039aa:	1851      	adds	r1, r2, r1
 80039ac:	6139      	str	r1, [r7, #16]
 80039ae:	4649      	mov	r1, r9
 80039b0:	414b      	adcs	r3, r1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c0:	4659      	mov	r1, fp
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4651      	mov	r1, sl
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4651      	mov	r1, sl
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4642      	mov	r2, r8
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039dc:	464b      	mov	r3, r9
 80039de:	460a      	mov	r2, r1
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a00:	4649      	mov	r1, r9
 8003a02:	008b      	lsls	r3, r1, #2
 8003a04:	4641      	mov	r1, r8
 8003a06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a0a:	4641      	mov	r1, r8
 8003a0c:	008a      	lsls	r2, r1, #2
 8003a0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a12:	f7fd f85b 	bl	8000acc <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <UART_SetConfig+0x4e4>)
 8003a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2264      	movs	r2, #100	; 0x64
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	1acb      	subs	r3, r1, r3
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	3332      	adds	r3, #50	; 0x32
 8003a30:	4a33      	ldr	r2, [pc, #204]	; (8003b00 <UART_SetConfig+0x4e4>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3c:	441c      	add	r4, r3
 8003a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a42:	2200      	movs	r2, #0
 8003a44:	673b      	str	r3, [r7, #112]	; 0x70
 8003a46:	677a      	str	r2, [r7, #116]	; 0x74
 8003a48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	1891      	adds	r1, r2, r2
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	415b      	adcs	r3, r3
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	1851      	adds	r1, r2, r1
 8003a60:	6039      	str	r1, [r7, #0]
 8003a62:	4649      	mov	r1, r9
 8003a64:	414b      	adcs	r3, r1
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a74:	4659      	mov	r1, fp
 8003a76:	00cb      	lsls	r3, r1, #3
 8003a78:	4651      	mov	r1, sl
 8003a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7e:	4651      	mov	r1, sl
 8003a80:	00ca      	lsls	r2, r1, #3
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	4603      	mov	r3, r0
 8003a88:	4642      	mov	r2, r8
 8003a8a:	189b      	adds	r3, r3, r2
 8003a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a8e:	464b      	mov	r3, r9
 8003a90:	460a      	mov	r2, r1
 8003a92:	eb42 0303 	adc.w	r3, r2, r3
 8003a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa2:	667a      	str	r2, [r7, #100]	; 0x64
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	008b      	lsls	r3, r1, #2
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aba:	4641      	mov	r1, r8
 8003abc:	008a      	lsls	r2, r1, #2
 8003abe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ac2:	f7fd f803 	bl	8000acc <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <UART_SetConfig+0x4e4>)
 8003acc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	2164      	movs	r1, #100	; 0x64
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	3332      	adds	r3, #50	; 0x32
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <UART_SetConfig+0x4e4>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4422      	add	r2, r4
 8003af2:	609a      	str	r2, [r3, #8]
}
 8003af4:	bf00      	nop
 8003af6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003afa:	46bd      	mov	sp, r7
 8003afc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b00:	51eb851f 	.word	0x51eb851f

08003b04 <__NVIC_SetPriority>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db0a      	blt.n	8003b2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	490c      	ldr	r1, [pc, #48]	; (8003b50 <__NVIC_SetPriority+0x4c>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	440b      	add	r3, r1
 8003b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b2c:	e00a      	b.n	8003b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <__NVIC_SetPriority+0x50>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	761a      	strb	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f06f 0004 	mvn.w	r0, #4
 8003b62:	f7ff ffcf 	bl	8003b04 <__NVIC_SetPriority>
#endif
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b72:	f3ef 8305 	mrs	r3, IPSR
 8003b76:	603b      	str	r3, [r7, #0]
  return(result);
 8003b78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b7e:	f06f 0305 	mvn.w	r3, #5
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e00c      	b.n	8003ba0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <osKernelInitialize+0x44>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <osKernelInitialize+0x44>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	e002      	b.n	8003ba0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ba0:	687b      	ldr	r3, [r7, #4]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	200001b0 	.word	0x200001b0

08003bb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bba:	f3ef 8305 	mrs	r3, IPSR
 8003bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8003bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bc6:	f06f 0305 	mvn.w	r3, #5
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	e010      	b.n	8003bf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <osKernelStart+0x48>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d109      	bne.n	8003bea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bd6:	f7ff ffbf 	bl	8003b58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <osKernelStart+0x48>)
 8003bdc:	2202      	movs	r2, #2
 8003bde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003be0:	f001 f8de 	bl	8004da0 <vTaskStartScheduler>
      stat = osOK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	e002      	b.n	8003bf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bf0:	687b      	ldr	r3, [r7, #4]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200001b0 	.word	0x200001b0

08003c00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af04      	add	r7, sp, #16
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c10:	f3ef 8305 	mrs	r3, IPSR
 8003c14:	617b      	str	r3, [r7, #20]
  return(result);
 8003c16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d17e      	bne.n	8003d1a <osThreadNew+0x11a>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d07b      	beq.n	8003d1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c26:	2318      	movs	r3, #24
 8003c28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d045      	beq.n	8003cc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <osThreadNew+0x48>
        name = attr->name;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <osThreadNew+0x6e>
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b38      	cmp	r3, #56	; 0x38
 8003c60:	d805      	bhi.n	8003c6e <osThreadNew+0x6e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <osThreadNew+0x72>
        return (NULL);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e054      	b.n	8003d1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <osThreadNew+0xa8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2ba7      	cmp	r3, #167	; 0xa7
 8003c90:	d90a      	bls.n	8003ca8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d006      	beq.n	8003ca8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <osThreadNew+0xa8>
        mem = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e010      	b.n	8003cca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10c      	bne.n	8003cca <osThreadNew+0xca>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d108      	bne.n	8003cca <osThreadNew+0xca>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <osThreadNew+0xca>
          mem = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e001      	b.n	8003cca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d110      	bne.n	8003cf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd8:	9202      	str	r2, [sp, #8]
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6a3a      	ldr	r2, [r7, #32]
 8003ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fdf0 	bl	80048cc <xTaskCreateStatic>
 8003cec:	4603      	mov	r3, r0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e013      	b.n	8003d1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d110      	bne.n	8003d1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	f107 0310 	add.w	r3, r7, #16
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fe3b 	bl	8004986 <xTaskCreate>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <osThreadNew+0x11a>
            hTask = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d1a:	693b      	ldr	r3, [r7, #16]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3728      	adds	r7, #40	; 0x28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4a06      	ldr	r2, [pc, #24]	; (8003d54 <vApplicationGetIdleTaskMemory+0x30>)
 8003d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	200001b4 	.word	0x200001b4
 8003d54:	2000025c 	.word	0x2000025c

08003d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4a06      	ldr	r2, [pc, #24]	; (8003d88 <vApplicationGetTimerTaskMemory+0x30>)
 8003d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d76:	601a      	str	r2, [r3, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	2000045c 	.word	0x2000045c
 8003d88:	20000504 	.word	0x20000504

08003d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f103 0208 	add.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295
 8003da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f103 0208 	add.w	r2, r3, #8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f103 0208 	add.w	r2, r3, #8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d103      	bne.n	8003e4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e00c      	b.n	8003e68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3308      	adds	r3, #8
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e002      	b.n	8003e5c <vListInsert+0x2e>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d2f6      	bcs.n	8003e56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6892      	ldr	r2, [r2, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6852      	ldr	r2, [r2, #4]
 8003ec0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d103      	bne.n	8003ed4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1e5a      	subs	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f1e:	f002 f8f9 	bl	8006114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	22ff      	movs	r2, #255	; 0xff
 8003f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d114      	bne.n	8003f9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f9a7 	bl	80052d4 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <xQueueGenericReset+0xcc>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	e009      	b.n	8003fb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3310      	adds	r3, #16
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fef2 	bl	8003d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3324      	adds	r3, #36	; 0x24
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff feed 	bl	8003d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fb2:	f002 f8df 	bl	8006174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fb6:	2301      	movs	r3, #1
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08e      	sub	sp, #56	; 0x38
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <xQueueGenericCreateStatic+0x52>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <xQueueGenericCreateStatic+0x56>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueGenericCreateStatic+0x58>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	623b      	str	r3, [r7, #32]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <xQueueGenericCreateStatic+0x7e>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <xQueueGenericCreateStatic+0x82>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <xQueueGenericCreateStatic+0x84>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	61fb      	str	r3, [r7, #28]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004062:	2350      	movs	r3, #80	; 0x50
 8004064:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d00a      	beq.n	8004082 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004082:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004096:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f805 	bl	80040b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3730      	adds	r7, #48	; 0x30
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040e2:	2101      	movs	r1, #1
 80040e4:	69b8      	ldr	r0, [r7, #24]
 80040e6:	f7ff ff05 	bl	8003ef4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08e      	sub	sp, #56	; 0x38
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800410a:	2300      	movs	r3, #0
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <xQueueGenericSend+0x32>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <xQueueGenericSend+0x40>
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <xQueueGenericSend+0x44>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <xQueueGenericSend+0x46>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <xQueueGenericSend+0x60>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004158:	bf00      	nop
 800415a:	e7fe      	b.n	800415a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d103      	bne.n	800416a <xQueueGenericSend+0x6e>
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <xQueueGenericSend+0x72>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueGenericSend+0x74>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xQueueGenericSend+0x8e>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800418a:	f001 fa65 	bl	8005658 <xTaskGetSchedulerState>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <xQueueGenericSend+0x9e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <xQueueGenericSend+0xa2>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueGenericSend+0xa4>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueGenericSend+0xbe>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	61fb      	str	r3, [r7, #28]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ba:	f001 ffab 	bl	8006114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <xQueueGenericSend+0xd4>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d129      	bne.n	8004224 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041d6:	f000 fa0b 	bl	80045f0 <prvCopyDataToQueue>
 80041da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	3324      	adds	r3, #36	; 0x24
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 f873 	bl	80052d4 <xTaskRemoveFromEventList>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041f4:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <xQueueGenericSend+0x1f8>)
 80041f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	e00a      	b.n	800421c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800420c:	4b39      	ldr	r3, [pc, #228]	; (80042f4 <xQueueGenericSend+0x1f8>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800421c:	f001 ffaa 	bl	8006174 <vPortExitCritical>
				return pdPASS;
 8004220:	2301      	movs	r3, #1
 8004222:	e063      	b.n	80042ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800422a:	f001 ffa3 	bl	8006174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800422e:	2300      	movs	r3, #0
 8004230:	e05c      	b.n	80042ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4618      	mov	r0, r3
 800423e:	f001 f8ad 	bl	800539c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004242:	2301      	movs	r3, #1
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004246:	f001 ff95 	bl	8006174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800424a:	f000 fe19 	bl	8004e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800424e:	f001 ff61 	bl	8006114 <vPortEnterCritical>
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004258:	b25b      	sxtb	r3, r3
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d103      	bne.n	8004268 <xQueueGenericSend+0x16c>
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800426e:	b25b      	sxtb	r3, r3
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d103      	bne.n	800427e <xQueueGenericSend+0x182>
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800427e:	f001 ff79 	bl	8006174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004282:	1d3a      	adds	r2, r7, #4
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f001 f89c 	bl	80053c8 <xTaskCheckForTimeOut>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d124      	bne.n	80042e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004298:	f000 faa2 	bl	80047e0 <prvIsQueueFull>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d018      	beq.n	80042d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	3310      	adds	r3, #16
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 ffc2 	bl	8005234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b2:	f000 fa2d 	bl	8004710 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042b6:	f000 fdf1 	bl	8004e9c <xTaskResumeAll>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f af7c 	bne.w	80041ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <xQueueGenericSend+0x1f8>)
 80042c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	e772      	b.n	80041ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d6:	f000 fa1b 	bl	8004710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042da:	f000 fddf 	bl	8004e9c <xTaskResumeAll>
 80042de:	e76c      	b.n	80041ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e2:	f000 fa15 	bl	8004710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042e6:	f000 fdd9 	bl	8004e9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3738      	adds	r7, #56	; 0x38
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b090      	sub	sp, #64	; 0x40
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <xQueueGenericSendFromISR+0x3c>
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <xQueueGenericSendFromISR+0x40>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <xQueueGenericSendFromISR+0x42>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d103      	bne.n	8004362 <xQueueGenericSendFromISR+0x6a>
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <xQueueGenericSendFromISR+0x6e>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericSendFromISR+0x70>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	623b      	str	r3, [r7, #32]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004382:	f001 ffa9 	bl	80062d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004386:	f3ef 8211 	mrs	r2, BASEPRI
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	61fa      	str	r2, [r7, #28]
 800439c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800439e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <xQueueGenericSendFromISR+0xbc>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d12f      	bne.n	8004414 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043ca:	f000 f911 	bl	80045f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d112      	bne.n	80043fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	3324      	adds	r3, #36	; 0x24
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 ff75 	bl	80052d4 <xTaskRemoveFromEventList>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00e      	beq.n	800440e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e007      	b.n	800440e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004402:	3301      	adds	r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	b25a      	sxtb	r2, r3
 8004408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800440e:	2301      	movs	r3, #1
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004412:	e001      	b.n	8004418 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004414:	2300      	movs	r3, #0
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004422:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004426:	4618      	mov	r0, r3
 8004428:	3740      	adds	r7, #64	; 0x40
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800443c:	2300      	movs	r3, #0
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <xQueueReceive+0x30>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	623b      	str	r3, [r7, #32]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <xQueueReceive+0x3e>
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <xQueueReceive+0x42>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <xQueueReceive+0x44>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueReceive+0x5e>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	61fb      	str	r3, [r7, #28]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800448e:	f001 f8e3 	bl	8005658 <xTaskGetSchedulerState>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <xQueueReceive+0x6e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <xQueueReceive+0x72>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <xQueueReceive+0x74>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <xQueueReceive+0x8e>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	61bb      	str	r3, [r7, #24]
}
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044be:	f001 fe29 	bl	8006114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01f      	beq.n	800450e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d2:	f000 f8f7 	bl	80046c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	1e5a      	subs	r2, r3, #1
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00f      	beq.n	8004506 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	3310      	adds	r3, #16
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fef2 	bl	80052d4 <xTaskRemoveFromEventList>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <xQueueReceive+0x1bc>)
 80044f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004506:	f001 fe35 	bl	8006174 <vPortExitCritical>
				return pdPASS;
 800450a:	2301      	movs	r3, #1
 800450c:	e069      	b.n	80045e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004514:	f001 fe2e 	bl	8006174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004518:	2300      	movs	r3, #0
 800451a:	e062      	b.n	80045e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004522:	f107 0310 	add.w	r3, r7, #16
 8004526:	4618      	mov	r0, r3
 8004528:	f000 ff38 	bl	800539c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800452c:	2301      	movs	r3, #1
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004530:	f001 fe20 	bl	8006174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004534:	f000 fca4 	bl	8004e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004538:	f001 fdec 	bl	8006114 <vPortEnterCritical>
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004542:	b25b      	sxtb	r3, r3
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d103      	bne.n	8004552 <xQueueReceive+0x122>
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004558:	b25b      	sxtb	r3, r3
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d103      	bne.n	8004568 <xQueueReceive+0x138>
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004568:	f001 fe04 	bl	8006174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800456c:	1d3a      	adds	r2, r7, #4
 800456e:	f107 0310 	add.w	r3, r7, #16
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f000 ff27 	bl	80053c8 <xTaskCheckForTimeOut>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d123      	bne.n	80045c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004582:	f000 f917 	bl	80047b4 <prvIsQueueEmpty>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d017      	beq.n	80045bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	3324      	adds	r3, #36	; 0x24
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fe4d 	bl	8005234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800459a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800459c:	f000 f8b8 	bl	8004710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045a0:	f000 fc7c 	bl	8004e9c <xTaskResumeAll>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d189      	bne.n	80044be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <xQueueReceive+0x1bc>)
 80045ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	e780      	b.n	80044be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045be:	f000 f8a7 	bl	8004710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045c2:	f000 fc6b 	bl	8004e9c <xTaskResumeAll>
 80045c6:	e77a      	b.n	80044be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ca:	f000 f8a1 	bl	8004710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045ce:	f000 fc65 	bl	8004e9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d4:	f000 f8ee 	bl	80047b4 <prvIsQueueEmpty>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f43f af6f 	beq.w	80044be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3730      	adds	r7, #48	; 0x30
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d14d      	bne.n	80046b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f001 f83a 	bl	8005694 <xTaskPriorityDisinherit>
 8004620:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	e043      	b.n	80046b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d119      	bne.n	8004664 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6858      	ldr	r0, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	461a      	mov	r2, r3
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	f002 fb50 	bl	8006ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	441a      	add	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	d32b      	bcc.n	80046b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	e026      	b.n	80046b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68d8      	ldr	r0, [r3, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	461a      	mov	r2, r3
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	f002 fb36 	bl	8006ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	425b      	negs	r3, r3
 800467e:	441a      	add	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d207      	bcs.n	80046a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	425b      	negs	r3, r3
 800469a:	441a      	add	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d105      	bne.n	80046b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046ba:	697b      	ldr	r3, [r7, #20]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	441a      	add	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d303      	bcc.n	80046f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68d9      	ldr	r1, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	461a      	mov	r2, r3
 8004702:	6838      	ldr	r0, [r7, #0]
 8004704:	f002 faec 	bl	8006ce0 <memcpy>
	}
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004718:	f001 fcfc 	bl	8006114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004722:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004724:	e011      	b.n	800474a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d012      	beq.n	8004754 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3324      	adds	r3, #36	; 0x24
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fdce 	bl	80052d4 <xTaskRemoveFromEventList>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800473e:	f000 fea5 	bl	800548c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	3b01      	subs	r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800474a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	dce9      	bgt.n	8004726 <prvUnlockQueue+0x16>
 8004752:	e000      	b.n	8004756 <prvUnlockQueue+0x46>
					break;
 8004754:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	22ff      	movs	r2, #255	; 0xff
 800475a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800475e:	f001 fd09 	bl	8006174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004762:	f001 fcd7 	bl	8006114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800476c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800476e:	e011      	b.n	8004794 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d012      	beq.n	800479e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3310      	adds	r3, #16
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fda9 	bl	80052d4 <xTaskRemoveFromEventList>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004788:	f000 fe80 	bl	800548c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800478c:	7bbb      	ldrb	r3, [r7, #14]
 800478e:	3b01      	subs	r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004798:	2b00      	cmp	r3, #0
 800479a:	dce9      	bgt.n	8004770 <prvUnlockQueue+0x60>
 800479c:	e000      	b.n	80047a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800479e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047a8:	f001 fce4 	bl	8006174 <vPortExitCritical>
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047bc:	f001 fcaa 	bl	8006114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e001      	b.n	80047d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047d2:	f001 fccf 	bl	8006174 <vPortExitCritical>

	return xReturn;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047e8:	f001 fc94 	bl	8006114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d102      	bne.n	80047fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e001      	b.n	8004802 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004802:	f001 fcb7 	bl	8006174 <vPortExitCritical>

	return xReturn;
 8004806:	68fb      	ldr	r3, [r7, #12]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e014      	b.n	800484a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004820:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <vQueueAddToRegistry+0x50>)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800482c:	490c      	ldr	r1, [pc, #48]	; (8004860 <vQueueAddToRegistry+0x50>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004836:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <vQueueAddToRegistry+0x50>)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004842:	e006      	b.n	8004852 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b07      	cmp	r3, #7
 800484e:	d9e7      	bls.n	8004820 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000904 	.word	0x20000904

08004864 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004874:	f001 fc4e 	bl	8006114 <vPortEnterCritical>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800487e:	b25b      	sxtb	r3, r3
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d103      	bne.n	800488e <vQueueWaitForMessageRestricted+0x2a>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004894:	b25b      	sxtb	r3, r3
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d103      	bne.n	80048a4 <vQueueWaitForMessageRestricted+0x40>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048a4:	f001 fc66 	bl	8006174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3324      	adds	r3, #36	; 0x24
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fcdf 	bl	800527c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048be:	6978      	ldr	r0, [r7, #20]
 80048c0:	f7ff ff26 	bl	8004710 <prvUnlockQueue>
	}
 80048c4:	bf00      	nop
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	; 0x38
 80048d0:	af04      	add	r7, sp, #16
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	623b      	str	r3, [r7, #32]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <xTaskCreateStatic+0x46>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	61fb      	str	r3, [r7, #28]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004912:	23a8      	movs	r3, #168	; 0xa8
 8004914:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2ba8      	cmp	r3, #168	; 0xa8
 800491a:	d00a      	beq.n	8004932 <xTaskCreateStatic+0x66>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	61bb      	str	r3, [r7, #24]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004932:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01e      	beq.n	8004978 <xTaskCreateStatic+0xac>
 800493a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01b      	beq.n	8004978 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004948:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	2202      	movs	r2, #2
 800494e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004952:	2300      	movs	r3, #0
 8004954:	9303      	str	r3, [sp, #12]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9302      	str	r3, [sp, #8]
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f850 	bl	8004a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004972:	f000 f8f3 	bl	8004b5c <prvAddNewTaskToReadyList>
 8004976:	e001      	b.n	800497c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800497c:	697b      	ldr	r3, [r7, #20]
	}
 800497e:	4618      	mov	r0, r3
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004986:	b580      	push	{r7, lr}
 8004988:	b08c      	sub	sp, #48	; 0x30
 800498a:	af04      	add	r7, sp, #16
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f001 fcdc 	bl	8006358 <pvPortMalloc>
 80049a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00e      	beq.n	80049c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049a8:	20a8      	movs	r0, #168	; 0xa8
 80049aa:	f001 fcd5 	bl	8006358 <pvPortMalloc>
 80049ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
 80049bc:	e005      	b.n	80049ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049be:	6978      	ldr	r0, [r7, #20]
 80049c0:	f001 fd96 	bl	80064f0 <vPortFree>
 80049c4:	e001      	b.n	80049ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d017      	beq.n	8004a00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049d8:	88fa      	ldrh	r2, [r7, #6]
 80049da:	2300      	movs	r3, #0
 80049dc:	9303      	str	r3, [sp, #12]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	9302      	str	r3, [sp, #8]
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f80e 	bl	8004a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049f4:	69f8      	ldr	r0, [r7, #28]
 80049f6:	f000 f8b1 	bl	8004b5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e002      	b.n	8004a06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
 8004a04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a06:	69bb      	ldr	r3, [r7, #24]
	}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	461a      	mov	r2, r3
 8004a28:	21a5      	movs	r1, #165	; 0xa5
 8004a2a:	f002 f888 	bl	8006b3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f023 0307 	bic.w	r3, r3, #7
 8004a46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	617b      	str	r3, [r7, #20]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01f      	beq.n	8004aae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e012      	b.n	8004a9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	7819      	ldrb	r1, [r3, #0]
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	3334      	adds	r3, #52	; 0x34
 8004a84:	460a      	mov	r2, r1
 8004a86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d006      	beq.n	8004aa2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3301      	adds	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b0f      	cmp	r3, #15
 8004a9e:	d9e9      	bls.n	8004a74 <prvInitialiseNewTask+0x64>
 8004aa0:	e000      	b.n	8004aa4 <prvInitialiseNewTask+0x94>
			{
				break;
 8004aa2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aac:	e003      	b.n	8004ab6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	2b37      	cmp	r3, #55	; 0x37
 8004aba:	d901      	bls.n	8004ac0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004abc:	2337      	movs	r3, #55	; 0x37
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	2200      	movs	r2, #0
 8004ad0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff f978 	bl	8003dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	3318      	adds	r3, #24
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff f973 	bl	8003dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	3354      	adds	r3, #84	; 0x54
 8004b10:	224c      	movs	r2, #76	; 0x4c
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f002 f812 	bl	8006b3e <memset>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <prvInitialiseNewTask+0x140>)
 8004b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <prvInitialiseNewTask+0x144>)
 8004b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	4a0b      	ldr	r2, [pc, #44]	; (8004b58 <prvInitialiseNewTask+0x148>)
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	69b8      	ldr	r0, [r7, #24]
 8004b32:	f001 f9bf 	bl	8005eb4 <pxPortInitialiseStack>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b48:	bf00      	nop
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20004b98 	.word	0x20004b98
 8004b54:	20004c00 	.word	0x20004c00
 8004b58:	20004c68 	.word	0x20004c68

08004b5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b64:	f001 fad6 	bl	8006114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b68:	4b2d      	ldr	r3, [pc, #180]	; (8004c20 <prvAddNewTaskToReadyList+0xc4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	4a2c      	ldr	r2, [pc, #176]	; (8004c20 <prvAddNewTaskToReadyList+0xc4>)
 8004b70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b72:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <prvAddNewTaskToReadyList+0xc8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b7a:	4a2a      	ldr	r2, [pc, #168]	; (8004c24 <prvAddNewTaskToReadyList+0xc8>)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b80:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <prvAddNewTaskToReadyList+0xc4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d110      	bne.n	8004baa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b88:	f000 fca4 	bl	80054d4 <prvInitialiseTaskLists>
 8004b8c:	e00d      	b.n	8004baa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b8e:	4b26      	ldr	r3, [pc, #152]	; (8004c28 <prvAddNewTaskToReadyList+0xcc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b96:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <prvAddNewTaskToReadyList+0xc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d802      	bhi.n	8004baa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <prvAddNewTaskToReadyList+0xc8>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004baa:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <prvAddNewTaskToReadyList+0xd0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	4a1e      	ldr	r2, [pc, #120]	; (8004c2c <prvAddNewTaskToReadyList+0xd0>)
 8004bb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <prvAddNewTaskToReadyList+0xd0>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <prvAddNewTaskToReadyList+0xd4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d903      	bls.n	8004bd0 <prvAddNewTaskToReadyList+0x74>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <prvAddNewTaskToReadyList+0xd4>)
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <prvAddNewTaskToReadyList+0xd8>)
 8004bde:	441a      	add	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f7ff f8fd 	bl	8003de6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bec:	f001 fac2 	bl	8006174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <prvAddNewTaskToReadyList+0xcc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <prvAddNewTaskToReadyList+0xc8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d207      	bcs.n	8004c16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <prvAddNewTaskToReadyList+0xdc>)
 8004c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000e18 	.word	0x20000e18
 8004c24:	20000944 	.word	0x20000944
 8004c28:	20000e24 	.word	0x20000e24
 8004c2c:	20000e34 	.word	0x20000e34
 8004c30:	20000e20 	.word	0x20000e20
 8004c34:	20000948 	.word	0x20000948
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	617b      	str	r3, [r7, #20]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <vTaskDelayUntil+0x46>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	613b      	str	r3, [r7, #16]
}
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <vTaskDelayUntil+0xf0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vTaskDelayUntil+0x64>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	60fb      	str	r3, [r7, #12]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004ca0:	f000 f8ee 	bl	8004e80 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004ca4:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <vTaskDelayUntil+0xf4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20b      	bcs.n	8004cd6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d211      	bcs.n	8004cec <vTaskDelayUntil+0xb0>
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d90d      	bls.n	8004cec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	e00a      	b.n	8004cec <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d303      	bcc.n	8004ce8 <vTaskDelayUntil+0xac>
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d901      	bls.n	8004cec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d006      	beq.n	8004d06 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fd35 	bl	8005770 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004d06:	f000 f8c9 	bl	8004e9c <xTaskResumeAll>
 8004d0a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <vTaskDelayUntil+0xf8>)
 8004d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d22:	bf00      	nop
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000e40 	.word	0x20000e40
 8004d30:	20000e1c 	.word	0x20000e1c
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d017      	beq.n	8004d7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <vTaskDelay+0x60>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <vTaskDelay+0x30>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60bb      	str	r3, [r7, #8]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d68:	f000 f88a 	bl	8004e80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fcfe 	bl	8005770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d74:	f000 f892 	bl	8004e9c <xTaskResumeAll>
 8004d78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <vTaskDelay+0x64>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000e40 	.word	0x20000e40
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	; 0x28
 8004da4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dae:	463a      	mov	r2, r7
 8004db0:	1d39      	adds	r1, r7, #4
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe ffb4 	bl	8003d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	9202      	str	r2, [sp, #8]
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	4924      	ldr	r1, [pc, #144]	; (8004e60 <vTaskStartScheduler+0xc0>)
 8004dd0:	4824      	ldr	r0, [pc, #144]	; (8004e64 <vTaskStartScheduler+0xc4>)
 8004dd2:	f7ff fd7b 	bl	80048cc <xTaskCreateStatic>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4a23      	ldr	r2, [pc, #140]	; (8004e68 <vTaskStartScheduler+0xc8>)
 8004dda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ddc:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <vTaskStartScheduler+0xc8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e001      	b.n	8004dee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d102      	bne.n	8004dfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004df4:	f000 fd10 	bl	8005818 <xTimerCreateTimerTask>
 8004df8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d11b      	bne.n	8004e38 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	613b      	str	r3, [r7, #16]
}
 8004e12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e14:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <vTaskStartScheduler+0xcc>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3354      	adds	r3, #84	; 0x54
 8004e1a:	4a15      	ldr	r2, [pc, #84]	; (8004e70 <vTaskStartScheduler+0xd0>)
 8004e1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <vTaskStartScheduler+0xd4>)
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <vTaskStartScheduler+0xd8>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <vTaskStartScheduler+0xdc>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e32:	f001 f8cd 	bl	8005fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e36:	e00e      	b.n	8004e56 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d10a      	bne.n	8004e56 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60fb      	str	r3, [r7, #12]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <vTaskStartScheduler+0xb4>
}
 8004e56:	bf00      	nop
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	08007860 	.word	0x08007860
 8004e64:	080054a5 	.word	0x080054a5
 8004e68:	20000e3c 	.word	0x20000e3c
 8004e6c:	20000944 	.word	0x20000944
 8004e70:	200000a8 	.word	0x200000a8
 8004e74:	20000e38 	.word	0x20000e38
 8004e78:	20000e24 	.word	0x20000e24
 8004e7c:	20000e1c 	.word	0x20000e1c

08004e80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <vTaskSuspendAll+0x18>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <vTaskSuspendAll+0x18>)
 8004e8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e8e:	bf00      	nop
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	20000e40 	.word	0x20000e40

08004e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eaa:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <xTaskResumeAll+0x118>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	603b      	str	r3, [r7, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ec8:	f001 f924 	bl	8006114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ecc:	4b39      	ldr	r3, [pc, #228]	; (8004fb4 <xTaskResumeAll+0x118>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4a38      	ldr	r2, [pc, #224]	; (8004fb4 <xTaskResumeAll+0x118>)
 8004ed4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <xTaskResumeAll+0x118>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d162      	bne.n	8004fa4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <xTaskResumeAll+0x11c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d05e      	beq.n	8004fa4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee6:	e02f      	b.n	8004f48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee8:	4b34      	ldr	r3, [pc, #208]	; (8004fbc <xTaskResumeAll+0x120>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe ffd3 	bl	8003ea0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe ffce 	bl	8003ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <xTaskResumeAll+0x124>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d903      	bls.n	8004f18 <xTaskResumeAll+0x7c>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <xTaskResumeAll+0x124>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a27      	ldr	r2, [pc, #156]	; (8004fc4 <xTaskResumeAll+0x128>)
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fe ff59 	bl	8003de6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <xTaskResumeAll+0x12c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f42:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <xTaskResumeAll+0x130>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f48:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <xTaskResumeAll+0x120>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1cb      	bne.n	8004ee8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f56:	f000 fb5f 	bl	8005618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <xTaskResumeAll+0x134>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f66:	f000 f847 	bl	8004ff8 <xTaskIncrementTick>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <xTaskResumeAll+0x130>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f1      	bne.n	8004f66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <xTaskResumeAll+0x134>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f88:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <xTaskResumeAll+0x130>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <xTaskResumeAll+0x138>)
 8004f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fa4:	f001 f8e6 	bl	8006174 <vPortExitCritical>

	return xAlreadyYielded;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000e40 	.word	0x20000e40
 8004fb8:	20000e18 	.word	0x20000e18
 8004fbc:	20000dd8 	.word	0x20000dd8
 8004fc0:	20000e20 	.word	0x20000e20
 8004fc4:	20000948 	.word	0x20000948
 8004fc8:	20000944 	.word	0x20000944
 8004fcc:	20000e2c 	.word	0x20000e2c
 8004fd0:	20000e28 	.word	0x20000e28
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <xTaskGetTickCount+0x1c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fe4:	687b      	ldr	r3, [r7, #4]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000e1c 	.word	0x20000e1c

08004ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005002:	4b4f      	ldr	r3, [pc, #316]	; (8005140 <xTaskIncrementTick+0x148>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 808f 	bne.w	800512a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800500c:	4b4d      	ldr	r3, [pc, #308]	; (8005144 <xTaskIncrementTick+0x14c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005014:	4a4b      	ldr	r2, [pc, #300]	; (8005144 <xTaskIncrementTick+0x14c>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d120      	bne.n	8005062 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005020:	4b49      	ldr	r3, [pc, #292]	; (8005148 <xTaskIncrementTick+0x150>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <xTaskIncrementTick+0x48>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	603b      	str	r3, [r7, #0]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <xTaskIncrementTick+0x46>
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <xTaskIncrementTick+0x150>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	4b41      	ldr	r3, [pc, #260]	; (800514c <xTaskIncrementTick+0x154>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3f      	ldr	r2, [pc, #252]	; (8005148 <xTaskIncrementTick+0x150>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4a3f      	ldr	r2, [pc, #252]	; (800514c <xTaskIncrementTick+0x154>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <xTaskIncrementTick+0x158>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	4a3d      	ldr	r2, [pc, #244]	; (8005150 <xTaskIncrementTick+0x158>)
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	f000 fadb 	bl	8005618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005062:	4b3c      	ldr	r3, [pc, #240]	; (8005154 <xTaskIncrementTick+0x15c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	429a      	cmp	r2, r3
 800506a:	d349      	bcc.n	8005100 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800506c:	4b36      	ldr	r3, [pc, #216]	; (8005148 <xTaskIncrementTick+0x150>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <xTaskIncrementTick+0x15c>)
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	601a      	str	r2, [r3, #0]
					break;
 800507e:	e03f      	b.n	8005100 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005080:	4b31      	ldr	r3, [pc, #196]	; (8005148 <xTaskIncrementTick+0x150>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d203      	bcs.n	80050a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005098:	4a2e      	ldr	r2, [pc, #184]	; (8005154 <xTaskIncrementTick+0x15c>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800509e:	e02f      	b.n	8005100 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe fefb 	bl	8003ea0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3318      	adds	r3, #24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fef2 	bl	8003ea0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <xTaskIncrementTick+0x160>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d903      	bls.n	80050d0 <xTaskIncrementTick+0xd8>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a22      	ldr	r2, [pc, #136]	; (8005158 <xTaskIncrementTick+0x160>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a1f      	ldr	r2, [pc, #124]	; (800515c <xTaskIncrementTick+0x164>)
 80050de:	441a      	add	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fe fe7d 	bl	8003de6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <xTaskIncrementTick+0x168>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d3b8      	bcc.n	800506c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050fa:	2301      	movs	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050fe:	e7b5      	b.n	800506c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005100:	4b17      	ldr	r3, [pc, #92]	; (8005160 <xTaskIncrementTick+0x168>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	4915      	ldr	r1, [pc, #84]	; (800515c <xTaskIncrementTick+0x164>)
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d901      	bls.n	800511c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005118:	2301      	movs	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800511c:	4b11      	ldr	r3, [pc, #68]	; (8005164 <xTaskIncrementTick+0x16c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e004      	b.n	8005134 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800512a:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <xTaskIncrementTick+0x170>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3301      	adds	r3, #1
 8005130:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <xTaskIncrementTick+0x170>)
 8005132:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005134:	697b      	ldr	r3, [r7, #20]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000e40 	.word	0x20000e40
 8005144:	20000e1c 	.word	0x20000e1c
 8005148:	20000dd0 	.word	0x20000dd0
 800514c:	20000dd4 	.word	0x20000dd4
 8005150:	20000e30 	.word	0x20000e30
 8005154:	20000e38 	.word	0x20000e38
 8005158:	20000e20 	.word	0x20000e20
 800515c:	20000948 	.word	0x20000948
 8005160:	20000944 	.word	0x20000944
 8005164:	20000e2c 	.word	0x20000e2c
 8005168:	20000e28 	.word	0x20000e28

0800516c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <vTaskSwitchContext+0xb0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800517a:	4b29      	ldr	r3, [pc, #164]	; (8005220 <vTaskSwitchContext+0xb4>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005180:	e046      	b.n	8005210 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005182:	4b27      	ldr	r3, [pc, #156]	; (8005220 <vTaskSwitchContext+0xb4>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005188:	4b26      	ldr	r3, [pc, #152]	; (8005224 <vTaskSwitchContext+0xb8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e010      	b.n	80051b2 <vTaskSwitchContext+0x46>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <vTaskSwitchContext+0x40>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	607b      	str	r3, [r7, #4]
}
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <vTaskSwitchContext+0x3e>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	491d      	ldr	r1, [pc, #116]	; (8005228 <vTaskSwitchContext+0xbc>)
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0e4      	beq.n	8005190 <vTaskSwitchContext+0x24>
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <vTaskSwitchContext+0xbc>)
 80051d2:	4413      	add	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	3308      	adds	r3, #8
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d104      	bne.n	80051f6 <vTaskSwitchContext+0x8a>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4a0b      	ldr	r2, [pc, #44]	; (800522c <vTaskSwitchContext+0xc0>)
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <vTaskSwitchContext+0xb8>)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <vTaskSwitchContext+0xc0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3354      	adds	r3, #84	; 0x54
 800520c:	4a08      	ldr	r2, [pc, #32]	; (8005230 <vTaskSwitchContext+0xc4>)
 800520e:	6013      	str	r3, [r2, #0]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000e40 	.word	0x20000e40
 8005220:	20000e2c 	.word	0x20000e2c
 8005224:	20000e20 	.word	0x20000e20
 8005228:	20000948 	.word	0x20000948
 800522c:	20000944 	.word	0x20000944
 8005230:	200000a8 	.word	0x200000a8

08005234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <vTaskPlaceOnEventList+0x44>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3318      	adds	r3, #24
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fe fde3 	bl	8003e2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005268:	2101      	movs	r1, #1
 800526a:	6838      	ldr	r0, [r7, #0]
 800526c:	f000 fa80 	bl	8005770 <prvAddCurrentTaskToDelayedList>
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000944 	.word	0x20000944

0800527c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	617b      	str	r3, [r7, #20]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3318      	adds	r3, #24
 80052aa:	4619      	mov	r1, r3
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7fe fd9a 	bl	8003de6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	68b8      	ldr	r0, [r7, #8]
 80052c2:	f000 fa55 	bl	8005770 <prvAddCurrentTaskToDelayedList>
	}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000944 	.word	0x20000944

080052d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60fb      	str	r3, [r7, #12]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	3318      	adds	r3, #24
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe fdcb 	bl	8003ea0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <xTaskRemoveFromEventList+0xb0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11d      	bne.n	800534e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	3304      	adds	r3, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fdc2 	bl	8003ea0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	4b19      	ldr	r3, [pc, #100]	; (8005388 <xTaskRemoveFromEventList+0xb4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d903      	bls.n	8005330 <xTaskRemoveFromEventList+0x5c>
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	4a16      	ldr	r2, [pc, #88]	; (8005388 <xTaskRemoveFromEventList+0xb4>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4a13      	ldr	r2, [pc, #76]	; (800538c <xTaskRemoveFromEventList+0xb8>)
 800533e:	441a      	add	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f7fe fd4d 	bl	8003de6 <vListInsertEnd>
 800534c:	e005      	b.n	800535a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3318      	adds	r3, #24
 8005352:	4619      	mov	r1, r3
 8005354:	480e      	ldr	r0, [pc, #56]	; (8005390 <xTaskRemoveFromEventList+0xbc>)
 8005356:	f7fe fd46 	bl	8003de6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <xTaskRemoveFromEventList+0xc0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d905      	bls.n	8005374 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <xTaskRemoveFromEventList+0xc4>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e001      	b.n	8005378 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005378:	697b      	ldr	r3, [r7, #20]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000e40 	.word	0x20000e40
 8005388:	20000e20 	.word	0x20000e20
 800538c:	20000948 	.word	0x20000948
 8005390:	20000dd8 	.word	0x20000dd8
 8005394:	20000944 	.word	0x20000944
 8005398:	20000e2c 	.word	0x20000e2c

0800539c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <vTaskInternalSetTimeOutState+0x24>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <vTaskInternalSetTimeOutState+0x28>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	20000e30 	.word	0x20000e30
 80053c4:	20000e1c 	.word	0x20000e1c

080053c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60fb      	str	r3, [r7, #12]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800540a:	f000 fe83 	bl	8006114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800540e:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <xTaskCheckForTimeOut+0xbc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d102      	bne.n	800542e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	e023      	b.n	8005476 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <xTaskCheckForTimeOut+0xc0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d007      	beq.n	800544a <xTaskCheckForTimeOut+0x82>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e015      	b.n	8005476 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	429a      	cmp	r2, r3
 8005452:	d20b      	bcs.n	800546c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff9b 	bl	800539c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e004      	b.n	8005476 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005476:	f000 fe7d 	bl	8006174 <vPortExitCritical>

	return xReturn;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000e1c 	.word	0x20000e1c
 8005488:	20000e30 	.word	0x20000e30

0800548c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <vTaskMissedYield+0x14>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20000e2c 	.word	0x20000e2c

080054a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054ac:	f000 f852 	bl	8005554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvIdleTask+0x28>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d9f9      	bls.n	80054ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <prvIdleTask+0x2c>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054c8:	e7f0      	b.n	80054ac <prvIdleTask+0x8>
 80054ca:	bf00      	nop
 80054cc:	20000948 	.word	0x20000948
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	e00c      	b.n	80054fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <prvInitialiseTaskLists+0x60>)
 80054ec:	4413      	add	r3, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fc4c 	bl	8003d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3301      	adds	r3, #1
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b37      	cmp	r3, #55	; 0x37
 80054fe:	d9ef      	bls.n	80054e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005500:	480d      	ldr	r0, [pc, #52]	; (8005538 <prvInitialiseTaskLists+0x64>)
 8005502:	f7fe fc43 	bl	8003d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005506:	480d      	ldr	r0, [pc, #52]	; (800553c <prvInitialiseTaskLists+0x68>)
 8005508:	f7fe fc40 	bl	8003d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800550c:	480c      	ldr	r0, [pc, #48]	; (8005540 <prvInitialiseTaskLists+0x6c>)
 800550e:	f7fe fc3d 	bl	8003d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005512:	480c      	ldr	r0, [pc, #48]	; (8005544 <prvInitialiseTaskLists+0x70>)
 8005514:	f7fe fc3a 	bl	8003d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005518:	480b      	ldr	r0, [pc, #44]	; (8005548 <prvInitialiseTaskLists+0x74>)
 800551a:	f7fe fc37 	bl	8003d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <prvInitialiseTaskLists+0x78>)
 8005520:	4a05      	ldr	r2, [pc, #20]	; (8005538 <prvInitialiseTaskLists+0x64>)
 8005522:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <prvInitialiseTaskLists+0x7c>)
 8005526:	4a05      	ldr	r2, [pc, #20]	; (800553c <prvInitialiseTaskLists+0x68>)
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000948 	.word	0x20000948
 8005538:	20000da8 	.word	0x20000da8
 800553c:	20000dbc 	.word	0x20000dbc
 8005540:	20000dd8 	.word	0x20000dd8
 8005544:	20000dec 	.word	0x20000dec
 8005548:	20000e04 	.word	0x20000e04
 800554c:	20000dd0 	.word	0x20000dd0
 8005550:	20000dd4 	.word	0x20000dd4

08005554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800555a:	e019      	b.n	8005590 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800555c:	f000 fdda 	bl	8006114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005560:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <prvCheckTasksWaitingTermination+0x50>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fc97 	bl	8003ea0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 800557a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <prvCheckTasksWaitingTermination+0x58>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3b01      	subs	r3, #1
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005584:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005586:	f000 fdf5 	bl	8006174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f810 	bl	80055b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e1      	bne.n	800555c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000dec 	.word	0x20000dec
 80055a8:	20000e18 	.word	0x20000e18
 80055ac:	20000e00 	.word	0x20000e00

080055b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3354      	adds	r3, #84	; 0x54
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 fad7 	bl	8006b70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d108      	bne.n	80055de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 ff8d 	bl	80064f0 <vPortFree>
				vPortFree( pxTCB );
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 ff8a 	bl	80064f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055dc:	e018      	b.n	8005610 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d103      	bne.n	80055f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 ff81 	bl	80064f0 <vPortFree>
	}
 80055ee:	e00f      	b.n	8005610 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d00a      	beq.n	8005610 <prvDeleteTCB+0x60>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60fb      	str	r3, [r7, #12]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <prvDeleteTCB+0x5e>
	}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <prvResetNextTaskUnblockTime+0x38>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <prvResetNextTaskUnblockTime+0x3c>)
 800562a:	f04f 32ff 	mov.w	r2, #4294967295
 800562e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005630:	e008      	b.n	8005644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005632:	4b07      	ldr	r3, [pc, #28]	; (8005650 <prvResetNextTaskUnblockTime+0x38>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a04      	ldr	r2, [pc, #16]	; (8005654 <prvResetNextTaskUnblockTime+0x3c>)
 8005642:	6013      	str	r3, [r2, #0]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	20000dd0 	.word	0x20000dd0
 8005654:	20000e38 	.word	0x20000e38

08005658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <xTaskGetSchedulerState+0x34>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005666:	2301      	movs	r3, #1
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	e008      	b.n	800567e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566c:	4b08      	ldr	r3, [pc, #32]	; (8005690 <xTaskGetSchedulerState+0x38>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005674:	2302      	movs	r3, #2
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	e001      	b.n	800567e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800567e:	687b      	ldr	r3, [r7, #4]
	}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000e24 	.word	0x20000e24
 8005690:	20000e40 	.word	0x20000e40

08005694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d056      	beq.n	8005758 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056aa:	4b2e      	ldr	r3, [pc, #184]	; (8005764 <xTaskPriorityDisinherit+0xd0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d00a      	beq.n	80056ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60bb      	str	r3, [r7, #8]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	1e5a      	subs	r2, r3, #1
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d02c      	beq.n	8005758 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005702:	2b00      	cmp	r3, #0
 8005704:	d128      	bne.n	8005758 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3304      	adds	r3, #4
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fbc8 	bl	8003ea0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <xTaskPriorityDisinherit+0xd4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d903      	bls.n	8005738 <xTaskPriorityDisinherit+0xa4>
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <xTaskPriorityDisinherit+0xd4>)
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4a09      	ldr	r2, [pc, #36]	; (800576c <xTaskPriorityDisinherit+0xd8>)
 8005746:	441a      	add	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f7fe fb49 	bl	8003de6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005758:	697b      	ldr	r3, [r7, #20]
	}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000944 	.word	0x20000944
 8005768:	20000e20 	.word	0x20000e20
 800576c:	20000948 	.word	0x20000948

08005770 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800577a:	4b21      	ldr	r3, [pc, #132]	; (8005800 <prvAddCurrentTaskToDelayedList+0x90>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005780:	4b20      	ldr	r3, [pc, #128]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fb8a 	bl	8003ea0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d10a      	bne.n	80057aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800579a:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4819      	ldr	r0, [pc, #100]	; (8005808 <prvAddCurrentTaskToDelayedList+0x98>)
 80057a4:	f7fe fb1f 	bl	8003de6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057a8:	e026      	b.n	80057f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4413      	add	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d209      	bcs.n	80057d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <prvAddCurrentTaskToDelayedList+0x9c>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fb2d 	bl	8003e2e <vListInsert>
}
 80057d4:	e010      	b.n	80057f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7fe fb23 	bl	8003e2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d202      	bcs.n	80057f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6013      	str	r3, [r2, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000e1c 	.word	0x20000e1c
 8005804:	20000944 	.word	0x20000944
 8005808:	20000e04 	.word	0x20000e04
 800580c:	20000dd4 	.word	0x20000dd4
 8005810:	20000dd0 	.word	0x20000dd0
 8005814:	20000e38 	.word	0x20000e38

08005818 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005822:	f000 fb07 	bl	8005e34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005826:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <xTimerCreateTimerTask+0x80>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d021      	beq.n	8005872 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005836:	1d3a      	adds	r2, r7, #4
 8005838:	f107 0108 	add.w	r1, r7, #8
 800583c:	f107 030c 	add.w	r3, r7, #12
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe fa89 	bl	8003d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	9202      	str	r2, [sp, #8]
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	2302      	movs	r3, #2
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	460a      	mov	r2, r1
 8005858:	4910      	ldr	r1, [pc, #64]	; (800589c <xTimerCreateTimerTask+0x84>)
 800585a:	4811      	ldr	r0, [pc, #68]	; (80058a0 <xTimerCreateTimerTask+0x88>)
 800585c:	f7ff f836 	bl	80048cc <xTaskCreateStatic>
 8005860:	4603      	mov	r3, r0
 8005862:	4a10      	ldr	r2, [pc, #64]	; (80058a4 <xTimerCreateTimerTask+0x8c>)
 8005864:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <xTimerCreateTimerTask+0x8c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800586e:	2301      	movs	r3, #1
 8005870:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	613b      	str	r3, [r7, #16]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800588e:	697b      	ldr	r3, [r7, #20]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000e74 	.word	0x20000e74
 800589c:	08007868 	.word	0x08007868
 80058a0:	080059dd 	.word	0x080059dd
 80058a4:	20000e78 	.word	0x20000e78

080058a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	623b      	str	r3, [r7, #32]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058d6:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <xTimerGenericCommand+0x98>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02a      	beq.n	8005934 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	dc18      	bgt.n	8005922 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058f0:	f7ff feb2 	bl	8005658 <xTaskGetSchedulerState>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d109      	bne.n	800590e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <xTimerGenericCommand+0x98>)
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	f107 0110 	add.w	r1, r7, #16
 8005902:	2300      	movs	r3, #0
 8005904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005906:	f7fe fbf9 	bl	80040fc <xQueueGenericSend>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24
 800590c:	e012      	b.n	8005934 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <xTimerGenericCommand+0x98>)
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	f107 0110 	add.w	r1, r7, #16
 8005916:	2300      	movs	r3, #0
 8005918:	2200      	movs	r2, #0
 800591a:	f7fe fbef 	bl	80040fc <xQueueGenericSend>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24
 8005920:	e008      	b.n	8005934 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <xTimerGenericCommand+0x98>)
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	f107 0110 	add.w	r1, r7, #16
 800592a:	2300      	movs	r3, #0
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	f7fe fce3 	bl	80042f8 <xQueueGenericSendFromISR>
 8005932:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005936:	4618      	mov	r0, r3
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000e74 	.word	0x20000e74

08005944 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800594e:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <prvProcessExpiredTimer+0x94>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3304      	adds	r3, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe fa9f 	bl	8003ea0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d022      	beq.n	80059b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	18d1      	adds	r1, r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	6978      	ldr	r0, [r7, #20]
 800597e:	f000 f8d1 	bl	8005b24 <prvInsertTimerInActiveList>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01f      	beq.n	80059c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005988:	2300      	movs	r3, #0
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	2300      	movs	r3, #0
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	2100      	movs	r1, #0
 8005992:	6978      	ldr	r0, [r7, #20]
 8005994:	f7ff ff88 	bl	80058a8 <xTimerGenericCommand>
 8005998:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d113      	bne.n	80059c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	60fb      	str	r3, [r7, #12]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	6978      	ldr	r0, [r7, #20]
 80059ce:	4798      	blx	r3
}
 80059d0:	bf00      	nop
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000e6c 	.word	0x20000e6c

080059dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059e4:	f107 0308 	add.w	r3, r7, #8
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 f857 	bl	8005a9c <prvGetNextExpireTime>
 80059ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4619      	mov	r1, r3
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f803 	bl	8005a00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059fa:	f000 f8d5 	bl	8005ba8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059fe:	e7f1      	b.n	80059e4 <prvTimerTask+0x8>

08005a00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a0a:	f7ff fa39 	bl	8004e80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a0e:	f107 0308 	add.w	r3, r7, #8
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f866 	bl	8005ae4 <prvSampleTimeNow>
 8005a18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d130      	bne.n	8005a82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <prvProcessTimerOrBlockTask+0x3c>
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d806      	bhi.n	8005a3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a2e:	f7ff fa35 	bl	8004e9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ff85 	bl	8005944 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a3a:	e024      	b.n	8005a86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a42:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <prvProcessTimerOrBlockTask+0x90>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <prvProcessTimerOrBlockTask+0x50>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <prvProcessTimerOrBlockTask+0x52>
 8005a50:	2300      	movs	r3, #0
 8005a52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <prvProcessTimerOrBlockTask+0x94>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	4619      	mov	r1, r3
 8005a62:	f7fe feff 	bl	8004864 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a66:	f7ff fa19 	bl	8004e9c <xTaskResumeAll>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a70:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <prvProcessTimerOrBlockTask+0x98>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
}
 8005a80:	e001      	b.n	8005a86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a82:	f7ff fa0b 	bl	8004e9c <xTaskResumeAll>
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000e70 	.word	0x20000e70
 8005a94:	20000e74 	.word	0x20000e74
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <prvGetNextExpireTime+0x44>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <prvGetNextExpireTime+0x16>
 8005aae:	2201      	movs	r2, #1
 8005ab0:	e000      	b.n	8005ab4 <prvGetNextExpireTime+0x18>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <prvGetNextExpireTime+0x44>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	e001      	b.n	8005ad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000e6c 	.word	0x20000e6c

08005ae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005aec:	f7ff fa74 	bl	8004fd8 <xTaskGetTickCount>
 8005af0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <prvSampleTimeNow+0x3c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d205      	bcs.n	8005b08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005afc:	f000 f936 	bl	8005d6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e002      	b.n	8005b0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b0e:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <prvSampleTimeNow+0x3c>)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000e7c 	.word	0x20000e7c

08005b24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d812      	bhi.n	8005b70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d302      	bcc.n	8005b5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	e01b      	b.n	8005b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <prvInsertTimerInActiveList+0x7c>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f7fe f960 	bl	8003e2e <vListInsert>
 8005b6e:	e012      	b.n	8005b96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d206      	bcs.n	8005b86 <prvInsertTimerInActiveList+0x62>
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d302      	bcc.n	8005b86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e007      	b.n	8005b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <prvInsertTimerInActiveList+0x80>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f7fe f94c 	bl	8003e2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b96:	697b      	ldr	r3, [r7, #20]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000e70 	.word	0x20000e70
 8005ba4:	20000e6c 	.word	0x20000e6c

08005ba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08e      	sub	sp, #56	; 0x38
 8005bac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bae:	e0ca      	b.n	8005d46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da18      	bge.n	8005be8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	3304      	adds	r3, #4
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10a      	bne.n	8005bd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	61fb      	str	r3, [r7, #28]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bde:	6850      	ldr	r0, [r2, #4]
 8005be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be2:	6892      	ldr	r2, [r2, #8]
 8005be4:	4611      	mov	r1, r2
 8005be6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f2c0 80ab 	blt.w	8005d46 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe f94d 	bl	8003ea0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c06:	463b      	mov	r3, r7
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff ff6b 	bl	8005ae4 <prvSampleTimeNow>
 8005c0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b09      	cmp	r3, #9
 8005c14:	f200 8096 	bhi.w	8005d44 <prvProcessReceivedCommands+0x19c>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <prvProcessReceivedCommands+0x78>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c49 	.word	0x08005c49
 8005c2c:	08005cbd 	.word	0x08005cbd
 8005c30:	08005cd1 	.word	0x08005cd1
 8005c34:	08005d1b 	.word	0x08005d1b
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c49 	.word	0x08005c49
 8005c40:	08005cbd 	.word	0x08005cbd
 8005c44:	08005cd1 	.word	0x08005cd1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	18d1      	adds	r1, r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c68:	f7ff ff5c 	bl	8005b24 <prvInsertTimerInActiveList>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d069      	beq.n	8005d46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05e      	beq.n	8005d46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	441a      	add	r2, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	2300      	movs	r3, #0
 8005c96:	2100      	movs	r1, #0
 8005c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9a:	f7ff fe05 	bl	80058a8 <xTimerGenericCommand>
 8005c9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d14f      	bne.n	8005d46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	61bb      	str	r3, [r7, #24]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cce:	e03a      	b.n	8005d46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	617b      	str	r3, [r7, #20]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	18d1      	adds	r1, r2, r3
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d14:	f7ff ff06 	bl	8005b24 <prvInsertTimerInActiveList>
					break;
 8005d18:	e015      	b.n	8005d46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2a:	f000 fbe1 	bl	80064f0 <vPortFree>
 8005d2e:	e00a      	b.n	8005d46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d42:	e000      	b.n	8005d46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005d44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d46:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <prvProcessReceivedCommands+0x1c0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	1d39      	adds	r1, r7, #4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fb6e 	bl	8004430 <xQueueReceive>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f47f af2a 	bne.w	8005bb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3730      	adds	r7, #48	; 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000e74 	.word	0x20000e74

08005d6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d72:	e048      	b.n	8005e06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d74:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <prvSwitchTimerLists+0xc0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7e:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <prvSwitchTimerLists+0xc0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe f887 	bl	8003ea0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d02e      	beq.n	8005e06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4413      	add	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d90e      	bls.n	8005dd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dc6:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <prvSwitchTimerLists+0xc0>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fe f82c 	bl	8003e2e <vListInsert>
 8005dd6:	e016      	b.n	8005e06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff fd60 	bl	80058a8 <xTimerGenericCommand>
 8005de8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	603b      	str	r3, [r7, #0]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <prvSwitchTimerLists+0xc0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1b1      	bne.n	8005d74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <prvSwitchTimerLists+0xc0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <prvSwitchTimerLists+0xc4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <prvSwitchTimerLists+0xc0>)
 8005e1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e1e:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <prvSwitchTimerLists+0xc4>)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	6013      	str	r3, [r2, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000e6c 	.word	0x20000e6c
 8005e30:	20000e70 	.word	0x20000e70

08005e34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e3a:	f000 f96b 	bl	8006114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <prvCheckForValidListAndQueue+0x60>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d120      	bne.n	8005e88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e46:	4814      	ldr	r0, [pc, #80]	; (8005e98 <prvCheckForValidListAndQueue+0x64>)
 8005e48:	f7fd ffa0 	bl	8003d8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e4c:	4813      	ldr	r0, [pc, #76]	; (8005e9c <prvCheckForValidListAndQueue+0x68>)
 8005e4e:	f7fd ff9d 	bl	8003d8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <prvCheckForValidListAndQueue+0x6c>)
 8005e54:	4a10      	ldr	r2, [pc, #64]	; (8005e98 <prvCheckForValidListAndQueue+0x64>)
 8005e56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e58:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <prvCheckForValidListAndQueue+0x70>)
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <prvCheckForValidListAndQueue+0x68>)
 8005e5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <prvCheckForValidListAndQueue+0x74>)
 8005e64:	4a11      	ldr	r2, [pc, #68]	; (8005eac <prvCheckForValidListAndQueue+0x78>)
 8005e66:	2110      	movs	r1, #16
 8005e68:	200a      	movs	r0, #10
 8005e6a:	f7fe f8ab 	bl	8003fc4 <xQueueGenericCreateStatic>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <prvCheckForValidListAndQueue+0x60>)
 8005e72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e74:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <prvCheckForValidListAndQueue+0x60>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <prvCheckForValidListAndQueue+0x60>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	490b      	ldr	r1, [pc, #44]	; (8005eb0 <prvCheckForValidListAndQueue+0x7c>)
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fcc4 	bl	8004810 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e88:	f000 f974 	bl	8006174 <vPortExitCritical>
}
 8005e8c:	bf00      	nop
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000e74 	.word	0x20000e74
 8005e98:	20000e44 	.word	0x20000e44
 8005e9c:	20000e58 	.word	0x20000e58
 8005ea0:	20000e6c 	.word	0x20000e6c
 8005ea4:	20000e70 	.word	0x20000e70
 8005ea8:	20000f20 	.word	0x20000f20
 8005eac:	20000e80 	.word	0x20000e80
 8005eb0:	08007870 	.word	0x08007870

08005eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3b04      	subs	r3, #4
 8005ec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3b04      	subs	r3, #4
 8005ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f023 0201 	bic.w	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ee4:	4a0c      	ldr	r2, [pc, #48]	; (8005f18 <pxPortInitialiseStack+0x64>)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3b14      	subs	r3, #20
 8005eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f06f 0202 	mvn.w	r2, #2
 8005f02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3b20      	subs	r3, #32
 8005f08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	08005f1d 	.word	0x08005f1d

08005f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f26:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <prvTaskExitError+0x54>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d00a      	beq.n	8005f46 <prvTaskExitError+0x2a>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	60fb      	str	r3, [r7, #12]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <prvTaskExitError+0x28>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f5a:	bf00      	nop
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0fc      	beq.n	8005f5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	2000004c 	.word	0x2000004c
	...

08005f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <pxCurrentTCBConst2>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	f380 8809 	msr	PSP, r0
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8811 	msr	BASEPRI, r0
 8005f9a:	4770      	bx	lr
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst2>:
 8005fa0:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fa8:	4808      	ldr	r0, [pc, #32]	; (8005fcc <prvPortStartFirstTask+0x24>)
 8005faa:	6800      	ldr	r0, [r0, #0]
 8005fac:	6800      	ldr	r0, [r0, #0]
 8005fae:	f380 8808 	msr	MSP, r0
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8814 	msr	CONTROL, r0
 8005fba:	b662      	cpsie	i
 8005fbc:	b661      	cpsie	f
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	df00      	svc	0
 8005fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fca:	bf00      	nop
 8005fcc:	e000ed08 	.word	0xe000ed08

08005fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fd6:	4b46      	ldr	r3, [pc, #280]	; (80060f0 <xPortStartScheduler+0x120>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a46      	ldr	r2, [pc, #280]	; (80060f4 <xPortStartScheduler+0x124>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10a      	bne.n	8005ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <xPortStartScheduler+0x120>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a3f      	ldr	r2, [pc, #252]	; (80060f8 <xPortStartScheduler+0x128>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d10a      	bne.n	8006016 <xPortStartScheduler+0x46>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	60fb      	str	r3, [r7, #12]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006016:	4b39      	ldr	r3, [pc, #228]	; (80060fc <xPortStartScheduler+0x12c>)
 8006018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	b2db      	uxtb	r3, r3
 8006020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006038:	b2da      	uxtb	r2, r3
 800603a:	4b31      	ldr	r3, [pc, #196]	; (8006100 <xPortStartScheduler+0x130>)
 800603c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800603e:	4b31      	ldr	r3, [pc, #196]	; (8006104 <xPortStartScheduler+0x134>)
 8006040:	2207      	movs	r2, #7
 8006042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006044:	e009      	b.n	800605a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <xPortStartScheduler+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3b01      	subs	r3, #1
 800604c:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <xPortStartScheduler+0x134>)
 800604e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d0ef      	beq.n	8006046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006066:	4b27      	ldr	r3, [pc, #156]	; (8006104 <xPortStartScheduler+0x134>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1c3 0307 	rsb	r3, r3, #7
 800606e:	2b04      	cmp	r3, #4
 8006070:	d00a      	beq.n	8006088 <xPortStartScheduler+0xb8>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60bb      	str	r3, [r7, #8]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006088:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <xPortStartScheduler+0x134>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	4a1d      	ldr	r2, [pc, #116]	; (8006104 <xPortStartScheduler+0x134>)
 8006090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006092:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <xPortStartScheduler+0x134>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800609a:	4a1a      	ldr	r2, [pc, #104]	; (8006104 <xPortStartScheduler+0x134>)
 800609c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060a6:	4b18      	ldr	r3, [pc, #96]	; (8006108 <xPortStartScheduler+0x138>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a17      	ldr	r2, [pc, #92]	; (8006108 <xPortStartScheduler+0x138>)
 80060ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <xPortStartScheduler+0x138>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a14      	ldr	r2, [pc, #80]	; (8006108 <xPortStartScheduler+0x138>)
 80060b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060be:	f000 f8dd 	bl	800627c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <xPortStartScheduler+0x13c>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060c8:	f000 f8fc 	bl	80062c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060cc:	4b10      	ldr	r3, [pc, #64]	; (8006110 <xPortStartScheduler+0x140>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <xPortStartScheduler+0x140>)
 80060d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060d8:	f7ff ff66 	bl	8005fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060dc:	f7ff f846 	bl	800516c <vTaskSwitchContext>
	prvTaskExitError();
 80060e0:	f7ff ff1c 	bl	8005f1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	e000ed00 	.word	0xe000ed00
 80060f4:	410fc271 	.word	0x410fc271
 80060f8:	410fc270 	.word	0x410fc270
 80060fc:	e000e400 	.word	0xe000e400
 8006100:	20000f70 	.word	0x20000f70
 8006104:	20000f74 	.word	0x20000f74
 8006108:	e000ed20 	.word	0xe000ed20
 800610c:	2000004c 	.word	0x2000004c
 8006110:	e000ef34 	.word	0xe000ef34

08006114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	607b      	str	r3, [r7, #4]
}
 800612c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <vPortEnterCritical+0x58>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	4a0d      	ldr	r2, [pc, #52]	; (800616c <vPortEnterCritical+0x58>)
 8006136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <vPortEnterCritical+0x58>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10f      	bne.n	8006160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <vPortEnterCritical+0x5c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <vPortEnterCritical+0x4c>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	603b      	str	r3, [r7, #0]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <vPortEnterCritical+0x4a>
	}
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	2000004c 	.word	0x2000004c
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <vPortExitCritical+0x50>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <vPortExitCritical+0x24>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	607b      	str	r3, [r7, #4]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006198:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <vPortExitCritical+0x50>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3b01      	subs	r3, #1
 800619e:	4a09      	ldr	r2, [pc, #36]	; (80061c4 <vPortExitCritical+0x50>)
 80061a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061a2:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <vPortExitCritical+0x50>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d105      	bne.n	80061b6 <vPortExitCritical+0x42>
 80061aa:	2300      	movs	r3, #0
 80061ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	f383 8811 	msr	BASEPRI, r3
}
 80061b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	2000004c 	.word	0x2000004c
	...

080061d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061d0:	f3ef 8009 	mrs	r0, PSP
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4b15      	ldr	r3, [pc, #84]	; (8006230 <pxCurrentTCBConst>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f01e 0f10 	tst.w	lr, #16
 80061e0:	bf08      	it	eq
 80061e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	6010      	str	r0, [r2, #0]
 80061ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061f4:	f380 8811 	msr	BASEPRI, r0
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f7fe ffb4 	bl	800516c <vTaskSwitchContext>
 8006204:	f04f 0000 	mov.w	r0, #0
 8006208:	f380 8811 	msr	BASEPRI, r0
 800620c:	bc09      	pop	{r0, r3}
 800620e:	6819      	ldr	r1, [r3, #0]
 8006210:	6808      	ldr	r0, [r1, #0]
 8006212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006216:	f01e 0f10 	tst.w	lr, #16
 800621a:	bf08      	it	eq
 800621c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006220:	f380 8809 	msr	PSP, r0
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	f3af 8000 	nop.w

08006230 <pxCurrentTCBConst>:
 8006230:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	607b      	str	r3, [r7, #4]
}
 8006250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006252:	f7fe fed1 	bl	8004ff8 <xTaskIncrementTick>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <xPortSysTickHandler+0x40>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	2300      	movs	r3, #0
 8006266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f383 8811 	msr	BASEPRI, r3
}
 800626e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006280:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <vPortSetupTimerInterrupt+0x34>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006286:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <vPortSetupTimerInterrupt+0x38>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800628c:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <vPortSetupTimerInterrupt+0x3c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <vPortSetupTimerInterrupt+0x40>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	099b      	lsrs	r3, r3, #6
 8006298:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <vPortSetupTimerInterrupt+0x44>)
 800629a:	3b01      	subs	r3, #1
 800629c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <vPortSetupTimerInterrupt+0x34>)
 80062a0:	2207      	movs	r2, #7
 80062a2:	601a      	str	r2, [r3, #0]
}
 80062a4:	bf00      	nop
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	e000e010 	.word	0xe000e010
 80062b4:	e000e018 	.word	0xe000e018
 80062b8:	20000040 	.word	0x20000040
 80062bc:	10624dd3 	.word	0x10624dd3
 80062c0:	e000e014 	.word	0xe000e014

080062c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062d4 <vPortEnableVFP+0x10>
 80062c8:	6801      	ldr	r1, [r0, #0]
 80062ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ce:	6001      	str	r1, [r0, #0]
 80062d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062d2:	bf00      	nop
 80062d4:	e000ed88 	.word	0xe000ed88

080062d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062de:	f3ef 8305 	mrs	r3, IPSR
 80062e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d914      	bls.n	8006314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <vPortValidateInterruptPriority+0x70>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062f4:	4b15      	ldr	r3, [pc, #84]	; (800634c <vPortValidateInterruptPriority+0x74>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	7afa      	ldrb	r2, [r7, #11]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d20a      	bcs.n	8006314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	607b      	str	r3, [r7, #4]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <vPortValidateInterruptPriority+0x78>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800631c:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <vPortValidateInterruptPriority+0x7c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d90a      	bls.n	800633a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	603b      	str	r3, [r7, #0]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <vPortValidateInterruptPriority+0x60>
	}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	e000e3f0 	.word	0xe000e3f0
 800634c:	20000f70 	.word	0x20000f70
 8006350:	e000ed0c 	.word	0xe000ed0c
 8006354:	20000f74 	.word	0x20000f74

08006358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006364:	f7fe fd8c 	bl	8004e80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006368:	4b5b      	ldr	r3, [pc, #364]	; (80064d8 <pvPortMalloc+0x180>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006370:	f000 f920 	bl	80065b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006374:	4b59      	ldr	r3, [pc, #356]	; (80064dc <pvPortMalloc+0x184>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 8093 	bne.w	80064a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01d      	beq.n	80063c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006388:	2208      	movs	r2, #8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b00      	cmp	r3, #0
 8006398:	d014      	beq.n	80063c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f023 0307 	bic.w	r3, r3, #7
 80063a0:	3308      	adds	r3, #8
 80063a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <pvPortMalloc+0x6c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	617b      	str	r3, [r7, #20]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d06e      	beq.n	80064a8 <pvPortMalloc+0x150>
 80063ca:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <pvPortMalloc+0x188>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d869      	bhi.n	80064a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063d4:	4b43      	ldr	r3, [pc, #268]	; (80064e4 <pvPortMalloc+0x18c>)
 80063d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063d8:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <pvPortMalloc+0x18c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063de:	e004      	b.n	80063ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d903      	bls.n	80063fc <pvPortMalloc+0xa4>
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f1      	bne.n	80063e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063fc:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <pvPortMalloc+0x180>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	429a      	cmp	r2, r3
 8006404:	d050      	beq.n	80064a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2208      	movs	r2, #8
 800640c:	4413      	add	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	2308      	movs	r3, #8
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	429a      	cmp	r2, r3
 8006426:	d91f      	bls.n	8006468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <pvPortMalloc+0xf8>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	613b      	str	r3, [r7, #16]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006462:	69b8      	ldr	r0, [r7, #24]
 8006464:	f000 f908 	bl	8006678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006468:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <pvPortMalloc+0x188>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <pvPortMalloc+0x188>)
 8006474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <pvPortMalloc+0x188>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <pvPortMalloc+0x190>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d203      	bcs.n	800648a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006482:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <pvPortMalloc+0x188>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <pvPortMalloc+0x190>)
 8006488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <pvPortMalloc+0x184>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	431a      	orrs	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <pvPortMalloc+0x194>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	4a11      	ldr	r2, [pc, #68]	; (80064ec <pvPortMalloc+0x194>)
 80064a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064a8:	f7fe fcf8 	bl	8004e9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <pvPortMalloc+0x174>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60fb      	str	r3, [r7, #12]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <pvPortMalloc+0x172>
	return pvReturn;
 80064cc:	69fb      	ldr	r3, [r7, #28]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3728      	adds	r7, #40	; 0x28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20004b80 	.word	0x20004b80
 80064dc:	20004b94 	.word	0x20004b94
 80064e0:	20004b84 	.word	0x20004b84
 80064e4:	20004b78 	.word	0x20004b78
 80064e8:	20004b88 	.word	0x20004b88
 80064ec:	20004b8c 	.word	0x20004b8c

080064f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d04d      	beq.n	800659e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006502:	2308      	movs	r3, #8
 8006504:	425b      	negs	r3, r3
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <vPortFree+0xb8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <vPortFree+0x44>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <vPortFree+0x62>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60bb      	str	r3, [r7, #8]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <vPortFree+0xb8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01e      	beq.n	800659e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d11a      	bne.n	800659e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	4b0e      	ldr	r3, [pc, #56]	; (80065a8 <vPortFree+0xb8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	43db      	mvns	r3, r3
 8006572:	401a      	ands	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006578:	f7fe fc82 	bl	8004e80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <vPortFree+0xbc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4413      	add	r3, r2
 8006586:	4a09      	ldr	r2, [pc, #36]	; (80065ac <vPortFree+0xbc>)
 8006588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800658a:	6938      	ldr	r0, [r7, #16]
 800658c:	f000 f874 	bl	8006678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <vPortFree+0xc0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	4a06      	ldr	r2, [pc, #24]	; (80065b0 <vPortFree+0xc0>)
 8006598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800659a:	f7fe fc7f 	bl	8004e9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20004b94 	.word	0x20004b94
 80065ac:	20004b84 	.word	0x20004b84
 80065b0:	20004b90 	.word	0x20004b90

080065b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065c0:	4b27      	ldr	r3, [pc, #156]	; (8006660 <prvHeapInit+0xac>)
 80065c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3307      	adds	r3, #7
 80065d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0307 	bic.w	r3, r3, #7
 80065da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <prvHeapInit+0xac>)
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065ec:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <prvHeapInit+0xb0>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065f2:	4b1c      	ldr	r3, [pc, #112]	; (8006664 <prvHeapInit+0xb0>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	4413      	add	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006600:	2208      	movs	r2, #8
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0307 	bic.w	r3, r3, #7
 800660e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a15      	ldr	r2, [pc, #84]	; (8006668 <prvHeapInit+0xb4>)
 8006614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <prvHeapInit+0xb4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2200      	movs	r2, #0
 800661c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <prvHeapInit+0xb4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <prvHeapInit+0xb4>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4a0a      	ldr	r2, [pc, #40]	; (800666c <prvHeapInit+0xb8>)
 8006642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	4a09      	ldr	r2, [pc, #36]	; (8006670 <prvHeapInit+0xbc>)
 800664a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800664c:	4b09      	ldr	r3, [pc, #36]	; (8006674 <prvHeapInit+0xc0>)
 800664e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20000f78 	.word	0x20000f78
 8006664:	20004b78 	.word	0x20004b78
 8006668:	20004b80 	.word	0x20004b80
 800666c:	20004b88 	.word	0x20004b88
 8006670:	20004b84 	.word	0x20004b84
 8006674:	20004b94 	.word	0x20004b94

08006678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006680:	4b28      	ldr	r3, [pc, #160]	; (8006724 <prvInsertBlockIntoFreeList+0xac>)
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e002      	b.n	800668c <prvInsertBlockIntoFreeList+0x14>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	429a      	cmp	r2, r3
 8006694:	d8f7      	bhi.n	8006686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d108      	bne.n	80066ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	441a      	add	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d118      	bne.n	8006700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4b15      	ldr	r3, [pc, #84]	; (8006728 <prvInsertBlockIntoFreeList+0xb0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d00d      	beq.n	80066f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e008      	b.n	8006708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <prvInsertBlockIntoFreeList+0xb0>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e003      	b.n	8006708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d002      	beq.n	8006716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20004b78 	.word	0x20004b78
 8006728:	20004b80 	.word	0x20004b80

0800672c <arm_mat_init_f32>:
 800672c:	8001      	strh	r1, [r0, #0]
 800672e:	8042      	strh	r2, [r0, #2]
 8006730:	6043      	str	r3, [r0, #4]
 8006732:	4770      	bx	lr

08006734 <rand>:
 8006734:	4b16      	ldr	r3, [pc, #88]	; (8006790 <rand+0x5c>)
 8006736:	b510      	push	{r4, lr}
 8006738:	681c      	ldr	r4, [r3, #0]
 800673a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800673c:	b9b3      	cbnz	r3, 800676c <rand+0x38>
 800673e:	2018      	movs	r0, #24
 8006740:	f000 fb46 	bl	8006dd0 <malloc>
 8006744:	4602      	mov	r2, r0
 8006746:	6320      	str	r0, [r4, #48]	; 0x30
 8006748:	b920      	cbnz	r0, 8006754 <rand+0x20>
 800674a:	4b12      	ldr	r3, [pc, #72]	; (8006794 <rand+0x60>)
 800674c:	4812      	ldr	r0, [pc, #72]	; (8006798 <rand+0x64>)
 800674e:	2152      	movs	r1, #82	; 0x52
 8006750:	f000 fad4 	bl	8006cfc <__assert_func>
 8006754:	4911      	ldr	r1, [pc, #68]	; (800679c <rand+0x68>)
 8006756:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <rand+0x6c>)
 8006758:	e9c0 1300 	strd	r1, r3, [r0]
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <rand+0x70>)
 800675e:	6083      	str	r3, [r0, #8]
 8006760:	230b      	movs	r3, #11
 8006762:	8183      	strh	r3, [r0, #12]
 8006764:	2100      	movs	r1, #0
 8006766:	2001      	movs	r0, #1
 8006768:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800676c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800676e:	480e      	ldr	r0, [pc, #56]	; (80067a8 <rand+0x74>)
 8006770:	690b      	ldr	r3, [r1, #16]
 8006772:	694c      	ldr	r4, [r1, #20]
 8006774:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <rand+0x78>)
 8006776:	4358      	muls	r0, r3
 8006778:	fb02 0004 	mla	r0, r2, r4, r0
 800677c:	fba3 3202 	umull	r3, r2, r3, r2
 8006780:	3301      	adds	r3, #1
 8006782:	eb40 0002 	adc.w	r0, r0, r2
 8006786:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800678a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800678e:	bd10      	pop	{r4, pc}
 8006790:	200000a8 	.word	0x200000a8
 8006794:	080078b4 	.word	0x080078b4
 8006798:	080078cb 	.word	0x080078cb
 800679c:	abcd330e 	.word	0xabcd330e
 80067a0:	e66d1234 	.word	0xe66d1234
 80067a4:	0005deec 	.word	0x0005deec
 80067a8:	5851f42d 	.word	0x5851f42d
 80067ac:	4c957f2d 	.word	0x4c957f2d

080067b0 <__sflush_r>:
 80067b0:	898a      	ldrh	r2, [r1, #12]
 80067b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b6:	4605      	mov	r5, r0
 80067b8:	0710      	lsls	r0, r2, #28
 80067ba:	460c      	mov	r4, r1
 80067bc:	d458      	bmi.n	8006870 <__sflush_r+0xc0>
 80067be:	684b      	ldr	r3, [r1, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dc05      	bgt.n	80067d0 <__sflush_r+0x20>
 80067c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	dc02      	bgt.n	80067d0 <__sflush_r+0x20>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	d0f9      	beq.n	80067ca <__sflush_r+0x1a>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067dc:	682f      	ldr	r7, [r5, #0]
 80067de:	6a21      	ldr	r1, [r4, #32]
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	d032      	beq.n	800684a <__sflush_r+0x9a>
 80067e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	075a      	lsls	r2, r3, #29
 80067ea:	d505      	bpl.n	80067f8 <__sflush_r+0x48>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	1ac0      	subs	r0, r0, r3
 80067f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067f2:	b10b      	cbz	r3, 80067f8 <__sflush_r+0x48>
 80067f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f6:	1ac0      	subs	r0, r0, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	4602      	mov	r2, r0
 80067fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067fe:	6a21      	ldr	r1, [r4, #32]
 8006800:	4628      	mov	r0, r5
 8006802:	47b0      	blx	r6
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	d106      	bne.n	8006818 <__sflush_r+0x68>
 800680a:	6829      	ldr	r1, [r5, #0]
 800680c:	291d      	cmp	r1, #29
 800680e:	d82b      	bhi.n	8006868 <__sflush_r+0xb8>
 8006810:	4a29      	ldr	r2, [pc, #164]	; (80068b8 <__sflush_r+0x108>)
 8006812:	410a      	asrs	r2, r1
 8006814:	07d6      	lsls	r6, r2, #31
 8006816:	d427      	bmi.n	8006868 <__sflush_r+0xb8>
 8006818:	2200      	movs	r2, #0
 800681a:	6062      	str	r2, [r4, #4]
 800681c:	04d9      	lsls	r1, r3, #19
 800681e:	6922      	ldr	r2, [r4, #16]
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	d504      	bpl.n	800682e <__sflush_r+0x7e>
 8006824:	1c42      	adds	r2, r0, #1
 8006826:	d101      	bne.n	800682c <__sflush_r+0x7c>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b903      	cbnz	r3, 800682e <__sflush_r+0x7e>
 800682c:	6560      	str	r0, [r4, #84]	; 0x54
 800682e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006830:	602f      	str	r7, [r5, #0]
 8006832:	2900      	cmp	r1, #0
 8006834:	d0c9      	beq.n	80067ca <__sflush_r+0x1a>
 8006836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800683a:	4299      	cmp	r1, r3
 800683c:	d002      	beq.n	8006844 <__sflush_r+0x94>
 800683e:	4628      	mov	r0, r5
 8006840:	f000 fa7a 	bl	8006d38 <_free_r>
 8006844:	2000      	movs	r0, #0
 8006846:	6360      	str	r0, [r4, #52]	; 0x34
 8006848:	e7c0      	b.n	80067cc <__sflush_r+0x1c>
 800684a:	2301      	movs	r3, #1
 800684c:	4628      	mov	r0, r5
 800684e:	47b0      	blx	r6
 8006850:	1c41      	adds	r1, r0, #1
 8006852:	d1c8      	bne.n	80067e6 <__sflush_r+0x36>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0c5      	beq.n	80067e6 <__sflush_r+0x36>
 800685a:	2b1d      	cmp	r3, #29
 800685c:	d001      	beq.n	8006862 <__sflush_r+0xb2>
 800685e:	2b16      	cmp	r3, #22
 8006860:	d101      	bne.n	8006866 <__sflush_r+0xb6>
 8006862:	602f      	str	r7, [r5, #0]
 8006864:	e7b1      	b.n	80067ca <__sflush_r+0x1a>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e7ad      	b.n	80067cc <__sflush_r+0x1c>
 8006870:	690f      	ldr	r7, [r1, #16]
 8006872:	2f00      	cmp	r7, #0
 8006874:	d0a9      	beq.n	80067ca <__sflush_r+0x1a>
 8006876:	0793      	lsls	r3, r2, #30
 8006878:	680e      	ldr	r6, [r1, #0]
 800687a:	bf08      	it	eq
 800687c:	694b      	ldreq	r3, [r1, #20]
 800687e:	600f      	str	r7, [r1, #0]
 8006880:	bf18      	it	ne
 8006882:	2300      	movne	r3, #0
 8006884:	eba6 0807 	sub.w	r8, r6, r7
 8006888:	608b      	str	r3, [r1, #8]
 800688a:	f1b8 0f00 	cmp.w	r8, #0
 800688e:	dd9c      	ble.n	80067ca <__sflush_r+0x1a>
 8006890:	6a21      	ldr	r1, [r4, #32]
 8006892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006894:	4643      	mov	r3, r8
 8006896:	463a      	mov	r2, r7
 8006898:	4628      	mov	r0, r5
 800689a:	47b0      	blx	r6
 800689c:	2800      	cmp	r0, #0
 800689e:	dc06      	bgt.n	80068ae <__sflush_r+0xfe>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e78e      	b.n	80067cc <__sflush_r+0x1c>
 80068ae:	4407      	add	r7, r0
 80068b0:	eba8 0800 	sub.w	r8, r8, r0
 80068b4:	e7e9      	b.n	800688a <__sflush_r+0xda>
 80068b6:	bf00      	nop
 80068b8:	dfbffffe 	.word	0xdfbffffe

080068bc <_fflush_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	690b      	ldr	r3, [r1, #16]
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b913      	cbnz	r3, 80068cc <_fflush_r+0x10>
 80068c6:	2500      	movs	r5, #0
 80068c8:	4628      	mov	r0, r5
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	b118      	cbz	r0, 80068d6 <_fflush_r+0x1a>
 80068ce:	6a03      	ldr	r3, [r0, #32]
 80068d0:	b90b      	cbnz	r3, 80068d6 <_fflush_r+0x1a>
 80068d2:	f000 f8a9 	bl	8006a28 <__sinit>
 80068d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f3      	beq.n	80068c6 <_fflush_r+0xa>
 80068de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068e0:	07d0      	lsls	r0, r2, #31
 80068e2:	d404      	bmi.n	80068ee <_fflush_r+0x32>
 80068e4:	0599      	lsls	r1, r3, #22
 80068e6:	d402      	bmi.n	80068ee <_fflush_r+0x32>
 80068e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ea:	f000 f9f7 	bl	8006cdc <__retarget_lock_acquire_recursive>
 80068ee:	4628      	mov	r0, r5
 80068f0:	4621      	mov	r1, r4
 80068f2:	f7ff ff5d 	bl	80067b0 <__sflush_r>
 80068f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068f8:	07da      	lsls	r2, r3, #31
 80068fa:	4605      	mov	r5, r0
 80068fc:	d4e4      	bmi.n	80068c8 <_fflush_r+0xc>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	059b      	lsls	r3, r3, #22
 8006902:	d4e1      	bmi.n	80068c8 <_fflush_r+0xc>
 8006904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006906:	f000 f9ea 	bl	8006cde <__retarget_lock_release_recursive>
 800690a:	e7dd      	b.n	80068c8 <_fflush_r+0xc>

0800690c <fflush>:
 800690c:	4601      	mov	r1, r0
 800690e:	b920      	cbnz	r0, 800691a <fflush+0xe>
 8006910:	4a04      	ldr	r2, [pc, #16]	; (8006924 <fflush+0x18>)
 8006912:	4905      	ldr	r1, [pc, #20]	; (8006928 <fflush+0x1c>)
 8006914:	4805      	ldr	r0, [pc, #20]	; (800692c <fflush+0x20>)
 8006916:	f000 b89f 	b.w	8006a58 <_fwalk_sglue>
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <fflush+0x24>)
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f7ff bfcd 	b.w	80068bc <_fflush_r>
 8006922:	bf00      	nop
 8006924:	20000050 	.word	0x20000050
 8006928:	080068bd 	.word	0x080068bd
 800692c:	2000005c 	.word	0x2000005c
 8006930:	200000a8 	.word	0x200000a8

08006934 <std>:
 8006934:	2300      	movs	r3, #0
 8006936:	b510      	push	{r4, lr}
 8006938:	4604      	mov	r4, r0
 800693a:	e9c0 3300 	strd	r3, r3, [r0]
 800693e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006942:	6083      	str	r3, [r0, #8]
 8006944:	8181      	strh	r1, [r0, #12]
 8006946:	6643      	str	r3, [r0, #100]	; 0x64
 8006948:	81c2      	strh	r2, [r0, #14]
 800694a:	6183      	str	r3, [r0, #24]
 800694c:	4619      	mov	r1, r3
 800694e:	2208      	movs	r2, #8
 8006950:	305c      	adds	r0, #92	; 0x5c
 8006952:	f000 f8f4 	bl	8006b3e <memset>
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <std+0x38>)
 8006958:	6263      	str	r3, [r4, #36]	; 0x24
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <std+0x3c>)
 800695c:	62a3      	str	r3, [r4, #40]	; 0x28
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <std+0x40>)
 8006960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006962:	4b05      	ldr	r3, [pc, #20]	; (8006978 <std+0x44>)
 8006964:	6224      	str	r4, [r4, #32]
 8006966:	6323      	str	r3, [r4, #48]	; 0x30
 8006968:	bd10      	pop	{r4, pc}
 800696a:	bf00      	nop
 800696c:	08006ab9 	.word	0x08006ab9
 8006970:	08006adb 	.word	0x08006adb
 8006974:	08006b13 	.word	0x08006b13
 8006978:	08006b37 	.word	0x08006b37

0800697c <stdio_exit_handler>:
 800697c:	4a02      	ldr	r2, [pc, #8]	; (8006988 <stdio_exit_handler+0xc>)
 800697e:	4903      	ldr	r1, [pc, #12]	; (800698c <stdio_exit_handler+0x10>)
 8006980:	4803      	ldr	r0, [pc, #12]	; (8006990 <stdio_exit_handler+0x14>)
 8006982:	f000 b869 	b.w	8006a58 <_fwalk_sglue>
 8006986:	bf00      	nop
 8006988:	20000050 	.word	0x20000050
 800698c:	080068bd 	.word	0x080068bd
 8006990:	2000005c 	.word	0x2000005c

08006994 <cleanup_stdio>:
 8006994:	6841      	ldr	r1, [r0, #4]
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <cleanup_stdio+0x34>)
 8006998:	4299      	cmp	r1, r3
 800699a:	b510      	push	{r4, lr}
 800699c:	4604      	mov	r4, r0
 800699e:	d001      	beq.n	80069a4 <cleanup_stdio+0x10>
 80069a0:	f7ff ff8c 	bl	80068bc <_fflush_r>
 80069a4:	68a1      	ldr	r1, [r4, #8]
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <cleanup_stdio+0x38>)
 80069a8:	4299      	cmp	r1, r3
 80069aa:	d002      	beq.n	80069b2 <cleanup_stdio+0x1e>
 80069ac:	4620      	mov	r0, r4
 80069ae:	f7ff ff85 	bl	80068bc <_fflush_r>
 80069b2:	68e1      	ldr	r1, [r4, #12]
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <cleanup_stdio+0x3c>)
 80069b6:	4299      	cmp	r1, r3
 80069b8:	d004      	beq.n	80069c4 <cleanup_stdio+0x30>
 80069ba:	4620      	mov	r0, r4
 80069bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c0:	f7ff bf7c 	b.w	80068bc <_fflush_r>
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	bf00      	nop
 80069c8:	20004b98 	.word	0x20004b98
 80069cc:	20004c00 	.word	0x20004c00
 80069d0:	20004c68 	.word	0x20004c68

080069d4 <global_stdio_init.part.0>:
 80069d4:	b510      	push	{r4, lr}
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <global_stdio_init.part.0+0x30>)
 80069d8:	4c0b      	ldr	r4, [pc, #44]	; (8006a08 <global_stdio_init.part.0+0x34>)
 80069da:	4a0c      	ldr	r2, [pc, #48]	; (8006a0c <global_stdio_init.part.0+0x38>)
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	4620      	mov	r0, r4
 80069e0:	2200      	movs	r2, #0
 80069e2:	2104      	movs	r1, #4
 80069e4:	f7ff ffa6 	bl	8006934 <std>
 80069e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069ec:	2201      	movs	r2, #1
 80069ee:	2109      	movs	r1, #9
 80069f0:	f7ff ffa0 	bl	8006934 <std>
 80069f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80069f8:	2202      	movs	r2, #2
 80069fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fe:	2112      	movs	r1, #18
 8006a00:	f7ff bf98 	b.w	8006934 <std>
 8006a04:	20004cd0 	.word	0x20004cd0
 8006a08:	20004b98 	.word	0x20004b98
 8006a0c:	0800697d 	.word	0x0800697d

08006a10 <__sfp_lock_acquire>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__sfp_lock_acquire+0x8>)
 8006a12:	f000 b963 	b.w	8006cdc <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20004cd9 	.word	0x20004cd9

08006a1c <__sfp_lock_release>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__sfp_lock_release+0x8>)
 8006a1e:	f000 b95e 	b.w	8006cde <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20004cd9 	.word	0x20004cd9

08006a28 <__sinit>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	f7ff fff0 	bl	8006a10 <__sfp_lock_acquire>
 8006a30:	6a23      	ldr	r3, [r4, #32]
 8006a32:	b11b      	cbz	r3, 8006a3c <__sinit+0x14>
 8006a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a38:	f7ff bff0 	b.w	8006a1c <__sfp_lock_release>
 8006a3c:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <__sinit+0x28>)
 8006a3e:	6223      	str	r3, [r4, #32]
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <__sinit+0x2c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f5      	bne.n	8006a34 <__sinit+0xc>
 8006a48:	f7ff ffc4 	bl	80069d4 <global_stdio_init.part.0>
 8006a4c:	e7f2      	b.n	8006a34 <__sinit+0xc>
 8006a4e:	bf00      	nop
 8006a50:	08006995 	.word	0x08006995
 8006a54:	20004cd0 	.word	0x20004cd0

08006a58 <_fwalk_sglue>:
 8006a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	4688      	mov	r8, r1
 8006a60:	4614      	mov	r4, r2
 8006a62:	2600      	movs	r6, #0
 8006a64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a68:	f1b9 0901 	subs.w	r9, r9, #1
 8006a6c:	d505      	bpl.n	8006a7a <_fwalk_sglue+0x22>
 8006a6e:	6824      	ldr	r4, [r4, #0]
 8006a70:	2c00      	cmp	r4, #0
 8006a72:	d1f7      	bne.n	8006a64 <_fwalk_sglue+0xc>
 8006a74:	4630      	mov	r0, r6
 8006a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7a:	89ab      	ldrh	r3, [r5, #12]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d907      	bls.n	8006a90 <_fwalk_sglue+0x38>
 8006a80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a84:	3301      	adds	r3, #1
 8006a86:	d003      	beq.n	8006a90 <_fwalk_sglue+0x38>
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	47c0      	blx	r8
 8006a8e:	4306      	orrs	r6, r0
 8006a90:	3568      	adds	r5, #104	; 0x68
 8006a92:	e7e9      	b.n	8006a68 <_fwalk_sglue+0x10>

08006a94 <iprintf>:
 8006a94:	b40f      	push	{r0, r1, r2, r3}
 8006a96:	b507      	push	{r0, r1, r2, lr}
 8006a98:	4906      	ldr	r1, [pc, #24]	; (8006ab4 <iprintf+0x20>)
 8006a9a:	ab04      	add	r3, sp, #16
 8006a9c:	6808      	ldr	r0, [r1, #0]
 8006a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa2:	6881      	ldr	r1, [r0, #8]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	f000 fa71 	bl	8006f8c <_vfiprintf_r>
 8006aaa:	b003      	add	sp, #12
 8006aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ab0:	b004      	add	sp, #16
 8006ab2:	4770      	bx	lr
 8006ab4:	200000a8 	.word	0x200000a8

08006ab8 <__sread>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac0:	f000 f8be 	bl	8006c40 <_read_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	bfab      	itete	ge
 8006ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aca:	89a3      	ldrhlt	r3, [r4, #12]
 8006acc:	181b      	addge	r3, r3, r0
 8006ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ad2:	bfac      	ite	ge
 8006ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ad6:	81a3      	strhlt	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__swrite>:
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	461f      	mov	r7, r3
 8006ae0:	898b      	ldrh	r3, [r1, #12]
 8006ae2:	05db      	lsls	r3, r3, #23
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4616      	mov	r6, r2
 8006aea:	d505      	bpl.n	8006af8 <__swrite+0x1e>
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	2302      	movs	r3, #2
 8006af2:	2200      	movs	r2, #0
 8006af4:	f000 f892 	bl	8006c1c <_lseek_r>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	4632      	mov	r2, r6
 8006b06:	463b      	mov	r3, r7
 8006b08:	4628      	mov	r0, r5
 8006b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	f000 b8a9 	b.w	8006c64 <_write_r>

08006b12 <__sseek>:
 8006b12:	b510      	push	{r4, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 f87f 	bl	8006c1c <_lseek_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	bf15      	itete	ne
 8006b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b2e:	81a3      	strheq	r3, [r4, #12]
 8006b30:	bf18      	it	ne
 8006b32:	81a3      	strhne	r3, [r4, #12]
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <__sclose>:
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 b809 	b.w	8006b50 <_close_r>

08006b3e <memset>:
 8006b3e:	4402      	add	r2, r0
 8006b40:	4603      	mov	r3, r0
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d100      	bne.n	8006b48 <memset+0xa>
 8006b46:	4770      	bx	lr
 8006b48:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4c:	e7f9      	b.n	8006b42 <memset+0x4>
	...

08006b50 <_close_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4d06      	ldr	r5, [pc, #24]	; (8006b6c <_close_r+0x1c>)
 8006b54:	2300      	movs	r3, #0
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	f7fa fe92 	bl	8001884 <_close>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_close_r+0x1a>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_close_r+0x1a>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20004cd4 	.word	0x20004cd4

08006b70 <_reclaim_reent>:
 8006b70:	4b29      	ldr	r3, [pc, #164]	; (8006c18 <_reclaim_reent+0xa8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4283      	cmp	r3, r0
 8006b76:	b570      	push	{r4, r5, r6, lr}
 8006b78:	4604      	mov	r4, r0
 8006b7a:	d04b      	beq.n	8006c14 <_reclaim_reent+0xa4>
 8006b7c:	69c3      	ldr	r3, [r0, #28]
 8006b7e:	b143      	cbz	r3, 8006b92 <_reclaim_reent+0x22>
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d144      	bne.n	8006c10 <_reclaim_reent+0xa0>
 8006b86:	69e3      	ldr	r3, [r4, #28]
 8006b88:	6819      	ldr	r1, [r3, #0]
 8006b8a:	b111      	cbz	r1, 8006b92 <_reclaim_reent+0x22>
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 f8d3 	bl	8006d38 <_free_r>
 8006b92:	6961      	ldr	r1, [r4, #20]
 8006b94:	b111      	cbz	r1, 8006b9c <_reclaim_reent+0x2c>
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 f8ce 	bl	8006d38 <_free_r>
 8006b9c:	69e1      	ldr	r1, [r4, #28]
 8006b9e:	b111      	cbz	r1, 8006ba6 <_reclaim_reent+0x36>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 f8c9 	bl	8006d38 <_free_r>
 8006ba6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ba8:	b111      	cbz	r1, 8006bb0 <_reclaim_reent+0x40>
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 f8c4 	bl	8006d38 <_free_r>
 8006bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb2:	b111      	cbz	r1, 8006bba <_reclaim_reent+0x4a>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 f8bf 	bl	8006d38 <_free_r>
 8006bba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006bbc:	b111      	cbz	r1, 8006bc4 <_reclaim_reent+0x54>
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 f8ba 	bl	8006d38 <_free_r>
 8006bc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006bc6:	b111      	cbz	r1, 8006bce <_reclaim_reent+0x5e>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 f8b5 	bl	8006d38 <_free_r>
 8006bce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006bd0:	b111      	cbz	r1, 8006bd8 <_reclaim_reent+0x68>
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 f8b0 	bl	8006d38 <_free_r>
 8006bd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006bda:	b111      	cbz	r1, 8006be2 <_reclaim_reent+0x72>
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 f8ab 	bl	8006d38 <_free_r>
 8006be2:	6a23      	ldr	r3, [r4, #32]
 8006be4:	b1b3      	cbz	r3, 8006c14 <_reclaim_reent+0xa4>
 8006be6:	4620      	mov	r0, r4
 8006be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bec:	4718      	bx	r3
 8006bee:	5949      	ldr	r1, [r1, r5]
 8006bf0:	b941      	cbnz	r1, 8006c04 <_reclaim_reent+0x94>
 8006bf2:	3504      	adds	r5, #4
 8006bf4:	69e3      	ldr	r3, [r4, #28]
 8006bf6:	2d80      	cmp	r5, #128	; 0x80
 8006bf8:	68d9      	ldr	r1, [r3, #12]
 8006bfa:	d1f8      	bne.n	8006bee <_reclaim_reent+0x7e>
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 f89b 	bl	8006d38 <_free_r>
 8006c02:	e7c0      	b.n	8006b86 <_reclaim_reent+0x16>
 8006c04:	680e      	ldr	r6, [r1, #0]
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f896 	bl	8006d38 <_free_r>
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	e7ef      	b.n	8006bf0 <_reclaim_reent+0x80>
 8006c10:	2500      	movs	r5, #0
 8006c12:	e7ef      	b.n	8006bf4 <_reclaim_reent+0x84>
 8006c14:	bd70      	pop	{r4, r5, r6, pc}
 8006c16:	bf00      	nop
 8006c18:	200000a8 	.word	0x200000a8

08006c1c <_lseek_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d07      	ldr	r5, [pc, #28]	; (8006c3c <_lseek_r+0x20>)
 8006c20:	4604      	mov	r4, r0
 8006c22:	4608      	mov	r0, r1
 8006c24:	4611      	mov	r1, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f7fa fe51 	bl	80018d2 <_lseek>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_lseek_r+0x1e>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_lseek_r+0x1e>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20004cd4 	.word	0x20004cd4

08006c40 <_read_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d07      	ldr	r5, [pc, #28]	; (8006c60 <_read_r+0x20>)
 8006c44:	4604      	mov	r4, r0
 8006c46:	4608      	mov	r0, r1
 8006c48:	4611      	mov	r1, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7fa fddf 	bl	8001812 <_read>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_read_r+0x1e>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_read_r+0x1e>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20004cd4 	.word	0x20004cd4

08006c64 <_write_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d07      	ldr	r5, [pc, #28]	; (8006c84 <_write_r+0x20>)
 8006c68:	4604      	mov	r4, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	602a      	str	r2, [r5, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f7fa fdea 	bl	800184c <_write>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_write_r+0x1e>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_write_r+0x1e>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	20004cd4 	.word	0x20004cd4

08006c88 <__errno>:
 8006c88:	4b01      	ldr	r3, [pc, #4]	; (8006c90 <__errno+0x8>)
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	200000a8 	.word	0x200000a8

08006c94 <__libc_init_array>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	4d0d      	ldr	r5, [pc, #52]	; (8006ccc <__libc_init_array+0x38>)
 8006c98:	4c0d      	ldr	r4, [pc, #52]	; (8006cd0 <__libc_init_array+0x3c>)
 8006c9a:	1b64      	subs	r4, r4, r5
 8006c9c:	10a4      	asrs	r4, r4, #2
 8006c9e:	2600      	movs	r6, #0
 8006ca0:	42a6      	cmp	r6, r4
 8006ca2:	d109      	bne.n	8006cb8 <__libc_init_array+0x24>
 8006ca4:	4d0b      	ldr	r5, [pc, #44]	; (8006cd4 <__libc_init_array+0x40>)
 8006ca6:	4c0c      	ldr	r4, [pc, #48]	; (8006cd8 <__libc_init_array+0x44>)
 8006ca8:	f000 fda2 	bl	80077f0 <_init>
 8006cac:	1b64      	subs	r4, r4, r5
 8006cae:	10a4      	asrs	r4, r4, #2
 8006cb0:	2600      	movs	r6, #0
 8006cb2:	42a6      	cmp	r6, r4
 8006cb4:	d105      	bne.n	8006cc2 <__libc_init_array+0x2e>
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbc:	4798      	blx	r3
 8006cbe:	3601      	adds	r6, #1
 8006cc0:	e7ee      	b.n	8006ca0 <__libc_init_array+0xc>
 8006cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc6:	4798      	blx	r3
 8006cc8:	3601      	adds	r6, #1
 8006cca:	e7f2      	b.n	8006cb2 <__libc_init_array+0x1e>
 8006ccc:	0800799c 	.word	0x0800799c
 8006cd0:	0800799c 	.word	0x0800799c
 8006cd4:	0800799c 	.word	0x0800799c
 8006cd8:	080079a0 	.word	0x080079a0

08006cdc <__retarget_lock_acquire_recursive>:
 8006cdc:	4770      	bx	lr

08006cde <__retarget_lock_release_recursive>:
 8006cde:	4770      	bx	lr

08006ce0 <memcpy>:
 8006ce0:	440a      	add	r2, r1
 8006ce2:	4291      	cmp	r1, r2
 8006ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ce8:	d100      	bne.n	8006cec <memcpy+0xc>
 8006cea:	4770      	bx	lr
 8006cec:	b510      	push	{r4, lr}
 8006cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf6:	4291      	cmp	r1, r2
 8006cf8:	d1f9      	bne.n	8006cee <memcpy+0xe>
 8006cfa:	bd10      	pop	{r4, pc}

08006cfc <__assert_func>:
 8006cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cfe:	4614      	mov	r4, r2
 8006d00:	461a      	mov	r2, r3
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <__assert_func+0x2c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4605      	mov	r5, r0
 8006d08:	68d8      	ldr	r0, [r3, #12]
 8006d0a:	b14c      	cbz	r4, 8006d20 <__assert_func+0x24>
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <__assert_func+0x30>)
 8006d0e:	9100      	str	r1, [sp, #0]
 8006d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d14:	4906      	ldr	r1, [pc, #24]	; (8006d30 <__assert_func+0x34>)
 8006d16:	462b      	mov	r3, r5
 8006d18:	f000 fbe2 	bl	80074e0 <fiprintf>
 8006d1c:	f000 fc98 	bl	8007650 <abort>
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <__assert_func+0x38>)
 8006d22:	461c      	mov	r4, r3
 8006d24:	e7f3      	b.n	8006d0e <__assert_func+0x12>
 8006d26:	bf00      	nop
 8006d28:	200000a8 	.word	0x200000a8
 8006d2c:	08007923 	.word	0x08007923
 8006d30:	08007930 	.word	0x08007930
 8006d34:	0800795e 	.word	0x0800795e

08006d38 <_free_r>:
 8006d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	d044      	beq.n	8006dc8 <_free_r+0x90>
 8006d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d42:	9001      	str	r0, [sp, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f1a1 0404 	sub.w	r4, r1, #4
 8006d4a:	bfb8      	it	lt
 8006d4c:	18e4      	addlt	r4, r4, r3
 8006d4e:	f000 f8e7 	bl	8006f20 <__malloc_lock>
 8006d52:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <_free_r+0x94>)
 8006d54:	9801      	ldr	r0, [sp, #4]
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	b933      	cbnz	r3, 8006d68 <_free_r+0x30>
 8006d5a:	6063      	str	r3, [r4, #4]
 8006d5c:	6014      	str	r4, [r2, #0]
 8006d5e:	b003      	add	sp, #12
 8006d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d64:	f000 b8e2 	b.w	8006f2c <__malloc_unlock>
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d908      	bls.n	8006d7e <_free_r+0x46>
 8006d6c:	6825      	ldr	r5, [r4, #0]
 8006d6e:	1961      	adds	r1, r4, r5
 8006d70:	428b      	cmp	r3, r1
 8006d72:	bf01      	itttt	eq
 8006d74:	6819      	ldreq	r1, [r3, #0]
 8006d76:	685b      	ldreq	r3, [r3, #4]
 8006d78:	1949      	addeq	r1, r1, r5
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	e7ed      	b.n	8006d5a <_free_r+0x22>
 8006d7e:	461a      	mov	r2, r3
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	b10b      	cbz	r3, 8006d88 <_free_r+0x50>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d9fa      	bls.n	8006d7e <_free_r+0x46>
 8006d88:	6811      	ldr	r1, [r2, #0]
 8006d8a:	1855      	adds	r5, r2, r1
 8006d8c:	42a5      	cmp	r5, r4
 8006d8e:	d10b      	bne.n	8006da8 <_free_r+0x70>
 8006d90:	6824      	ldr	r4, [r4, #0]
 8006d92:	4421      	add	r1, r4
 8006d94:	1854      	adds	r4, r2, r1
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	6011      	str	r1, [r2, #0]
 8006d9a:	d1e0      	bne.n	8006d5e <_free_r+0x26>
 8006d9c:	681c      	ldr	r4, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	6053      	str	r3, [r2, #4]
 8006da2:	440c      	add	r4, r1
 8006da4:	6014      	str	r4, [r2, #0]
 8006da6:	e7da      	b.n	8006d5e <_free_r+0x26>
 8006da8:	d902      	bls.n	8006db0 <_free_r+0x78>
 8006daa:	230c      	movs	r3, #12
 8006dac:	6003      	str	r3, [r0, #0]
 8006dae:	e7d6      	b.n	8006d5e <_free_r+0x26>
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	1961      	adds	r1, r4, r5
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf04      	itt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	bf04      	itt	eq
 8006dc0:	1949      	addeq	r1, r1, r5
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	6054      	str	r4, [r2, #4]
 8006dc6:	e7ca      	b.n	8006d5e <_free_r+0x26>
 8006dc8:	b003      	add	sp, #12
 8006dca:	bd30      	pop	{r4, r5, pc}
 8006dcc:	20004cdc 	.word	0x20004cdc

08006dd0 <malloc>:
 8006dd0:	4b02      	ldr	r3, [pc, #8]	; (8006ddc <malloc+0xc>)
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	f000 b823 	b.w	8006e20 <_malloc_r>
 8006dda:	bf00      	nop
 8006ddc:	200000a8 	.word	0x200000a8

08006de0 <sbrk_aligned>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	4e0e      	ldr	r6, [pc, #56]	; (8006e1c <sbrk_aligned+0x3c>)
 8006de4:	460c      	mov	r4, r1
 8006de6:	6831      	ldr	r1, [r6, #0]
 8006de8:	4605      	mov	r5, r0
 8006dea:	b911      	cbnz	r1, 8006df2 <sbrk_aligned+0x12>
 8006dec:	f000 fc20 	bl	8007630 <_sbrk_r>
 8006df0:	6030      	str	r0, [r6, #0]
 8006df2:	4621      	mov	r1, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 fc1b 	bl	8007630 <_sbrk_r>
 8006dfa:	1c43      	adds	r3, r0, #1
 8006dfc:	d00a      	beq.n	8006e14 <sbrk_aligned+0x34>
 8006dfe:	1cc4      	adds	r4, r0, #3
 8006e00:	f024 0403 	bic.w	r4, r4, #3
 8006e04:	42a0      	cmp	r0, r4
 8006e06:	d007      	beq.n	8006e18 <sbrk_aligned+0x38>
 8006e08:	1a21      	subs	r1, r4, r0
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 fc10 	bl	8007630 <_sbrk_r>
 8006e10:	3001      	adds	r0, #1
 8006e12:	d101      	bne.n	8006e18 <sbrk_aligned+0x38>
 8006e14:	f04f 34ff 	mov.w	r4, #4294967295
 8006e18:	4620      	mov	r0, r4
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	20004ce0 	.word	0x20004ce0

08006e20 <_malloc_r>:
 8006e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	1ccd      	adds	r5, r1, #3
 8006e26:	f025 0503 	bic.w	r5, r5, #3
 8006e2a:	3508      	adds	r5, #8
 8006e2c:	2d0c      	cmp	r5, #12
 8006e2e:	bf38      	it	cc
 8006e30:	250c      	movcc	r5, #12
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	4607      	mov	r7, r0
 8006e36:	db01      	blt.n	8006e3c <_malloc_r+0x1c>
 8006e38:	42a9      	cmp	r1, r5
 8006e3a:	d905      	bls.n	8006e48 <_malloc_r+0x28>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	2600      	movs	r6, #0
 8006e42:	4630      	mov	r0, r6
 8006e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f1c <_malloc_r+0xfc>
 8006e4c:	f000 f868 	bl	8006f20 <__malloc_lock>
 8006e50:	f8d8 3000 	ldr.w	r3, [r8]
 8006e54:	461c      	mov	r4, r3
 8006e56:	bb5c      	cbnz	r4, 8006eb0 <_malloc_r+0x90>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	f7ff ffc0 	bl	8006de0 <sbrk_aligned>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	4604      	mov	r4, r0
 8006e64:	d155      	bne.n	8006f12 <_malloc_r+0xf2>
 8006e66:	f8d8 4000 	ldr.w	r4, [r8]
 8006e6a:	4626      	mov	r6, r4
 8006e6c:	2e00      	cmp	r6, #0
 8006e6e:	d145      	bne.n	8006efc <_malloc_r+0xdc>
 8006e70:	2c00      	cmp	r4, #0
 8006e72:	d048      	beq.n	8006f06 <_malloc_r+0xe6>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	4631      	mov	r1, r6
 8006e78:	4638      	mov	r0, r7
 8006e7a:	eb04 0903 	add.w	r9, r4, r3
 8006e7e:	f000 fbd7 	bl	8007630 <_sbrk_r>
 8006e82:	4581      	cmp	r9, r0
 8006e84:	d13f      	bne.n	8006f06 <_malloc_r+0xe6>
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	1a6d      	subs	r5, r5, r1
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f7ff ffa7 	bl	8006de0 <sbrk_aligned>
 8006e92:	3001      	adds	r0, #1
 8006e94:	d037      	beq.n	8006f06 <_malloc_r+0xe6>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	442b      	add	r3, r5
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d038      	beq.n	8006f16 <_malloc_r+0xf6>
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	42a2      	cmp	r2, r4
 8006ea8:	d12b      	bne.n	8006f02 <_malloc_r+0xe2>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
 8006eae:	e00f      	b.n	8006ed0 <_malloc_r+0xb0>
 8006eb0:	6822      	ldr	r2, [r4, #0]
 8006eb2:	1b52      	subs	r2, r2, r5
 8006eb4:	d41f      	bmi.n	8006ef6 <_malloc_r+0xd6>
 8006eb6:	2a0b      	cmp	r2, #11
 8006eb8:	d917      	bls.n	8006eea <_malloc_r+0xca>
 8006eba:	1961      	adds	r1, r4, r5
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	6025      	str	r5, [r4, #0]
 8006ec0:	bf18      	it	ne
 8006ec2:	6059      	strne	r1, [r3, #4]
 8006ec4:	6863      	ldr	r3, [r4, #4]
 8006ec6:	bf08      	it	eq
 8006ec8:	f8c8 1000 	streq.w	r1, [r8]
 8006ecc:	5162      	str	r2, [r4, r5]
 8006ece:	604b      	str	r3, [r1, #4]
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f104 060b 	add.w	r6, r4, #11
 8006ed6:	f000 f829 	bl	8006f2c <__malloc_unlock>
 8006eda:	f026 0607 	bic.w	r6, r6, #7
 8006ede:	1d23      	adds	r3, r4, #4
 8006ee0:	1af2      	subs	r2, r6, r3
 8006ee2:	d0ae      	beq.n	8006e42 <_malloc_r+0x22>
 8006ee4:	1b9b      	subs	r3, r3, r6
 8006ee6:	50a3      	str	r3, [r4, r2]
 8006ee8:	e7ab      	b.n	8006e42 <_malloc_r+0x22>
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	6862      	ldr	r2, [r4, #4]
 8006eee:	d1dd      	bne.n	8006eac <_malloc_r+0x8c>
 8006ef0:	f8c8 2000 	str.w	r2, [r8]
 8006ef4:	e7ec      	b.n	8006ed0 <_malloc_r+0xb0>
 8006ef6:	4623      	mov	r3, r4
 8006ef8:	6864      	ldr	r4, [r4, #4]
 8006efa:	e7ac      	b.n	8006e56 <_malloc_r+0x36>
 8006efc:	4634      	mov	r4, r6
 8006efe:	6876      	ldr	r6, [r6, #4]
 8006f00:	e7b4      	b.n	8006e6c <_malloc_r+0x4c>
 8006f02:	4613      	mov	r3, r2
 8006f04:	e7cc      	b.n	8006ea0 <_malloc_r+0x80>
 8006f06:	230c      	movs	r3, #12
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f000 f80e 	bl	8006f2c <__malloc_unlock>
 8006f10:	e797      	b.n	8006e42 <_malloc_r+0x22>
 8006f12:	6025      	str	r5, [r4, #0]
 8006f14:	e7dc      	b.n	8006ed0 <_malloc_r+0xb0>
 8006f16:	605b      	str	r3, [r3, #4]
 8006f18:	deff      	udf	#255	; 0xff
 8006f1a:	bf00      	nop
 8006f1c:	20004cdc 	.word	0x20004cdc

08006f20 <__malloc_lock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__malloc_lock+0x8>)
 8006f22:	f7ff bedb 	b.w	8006cdc <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20004cd8 	.word	0x20004cd8

08006f2c <__malloc_unlock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_unlock+0x8>)
 8006f2e:	f7ff bed6 	b.w	8006cde <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20004cd8 	.word	0x20004cd8

08006f38 <__sfputc_r>:
 8006f38:	6893      	ldr	r3, [r2, #8]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	b410      	push	{r4}
 8006f40:	6093      	str	r3, [r2, #8]
 8006f42:	da08      	bge.n	8006f56 <__sfputc_r+0x1e>
 8006f44:	6994      	ldr	r4, [r2, #24]
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	db01      	blt.n	8006f4e <__sfputc_r+0x16>
 8006f4a:	290a      	cmp	r1, #10
 8006f4c:	d103      	bne.n	8006f56 <__sfputc_r+0x1e>
 8006f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f52:	f000 bad7 	b.w	8007504 <__swbuf_r>
 8006f56:	6813      	ldr	r3, [r2, #0]
 8006f58:	1c58      	adds	r0, r3, #1
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	7019      	strb	r1, [r3, #0]
 8006f5e:	4608      	mov	r0, r1
 8006f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <__sfputs_r>:
 8006f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f68:	4606      	mov	r6, r0
 8006f6a:	460f      	mov	r7, r1
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	18d5      	adds	r5, r2, r3
 8006f70:	42ac      	cmp	r4, r5
 8006f72:	d101      	bne.n	8006f78 <__sfputs_r+0x12>
 8006f74:	2000      	movs	r0, #0
 8006f76:	e007      	b.n	8006f88 <__sfputs_r+0x22>
 8006f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f7c:	463a      	mov	r2, r7
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7ff ffda 	bl	8006f38 <__sfputc_r>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d1f3      	bne.n	8006f70 <__sfputs_r+0xa>
 8006f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f8c <_vfiprintf_r>:
 8006f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f90:	460d      	mov	r5, r1
 8006f92:	b09d      	sub	sp, #116	; 0x74
 8006f94:	4614      	mov	r4, r2
 8006f96:	4698      	mov	r8, r3
 8006f98:	4606      	mov	r6, r0
 8006f9a:	b118      	cbz	r0, 8006fa4 <_vfiprintf_r+0x18>
 8006f9c:	6a03      	ldr	r3, [r0, #32]
 8006f9e:	b90b      	cbnz	r3, 8006fa4 <_vfiprintf_r+0x18>
 8006fa0:	f7ff fd42 	bl	8006a28 <__sinit>
 8006fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa6:	07d9      	lsls	r1, r3, #31
 8006fa8:	d405      	bmi.n	8006fb6 <_vfiprintf_r+0x2a>
 8006faa:	89ab      	ldrh	r3, [r5, #12]
 8006fac:	059a      	lsls	r2, r3, #22
 8006fae:	d402      	bmi.n	8006fb6 <_vfiprintf_r+0x2a>
 8006fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fb2:	f7ff fe93 	bl	8006cdc <__retarget_lock_acquire_recursive>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	071b      	lsls	r3, r3, #28
 8006fba:	d501      	bpl.n	8006fc0 <_vfiprintf_r+0x34>
 8006fbc:	692b      	ldr	r3, [r5, #16]
 8006fbe:	b99b      	cbnz	r3, 8006fe8 <_vfiprintf_r+0x5c>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f000 fadc 	bl	8007580 <__swsetup_r>
 8006fc8:	b170      	cbz	r0, 8006fe8 <_vfiprintf_r+0x5c>
 8006fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fcc:	07dc      	lsls	r4, r3, #31
 8006fce:	d504      	bpl.n	8006fda <_vfiprintf_r+0x4e>
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	b01d      	add	sp, #116	; 0x74
 8006fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	89ab      	ldrh	r3, [r5, #12]
 8006fdc:	0598      	lsls	r0, r3, #22
 8006fde:	d4f7      	bmi.n	8006fd0 <_vfiprintf_r+0x44>
 8006fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe2:	f7ff fe7c 	bl	8006cde <__retarget_lock_release_recursive>
 8006fe6:	e7f3      	b.n	8006fd0 <_vfiprintf_r+0x44>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9309      	str	r3, [sp, #36]	; 0x24
 8006fec:	2320      	movs	r3, #32
 8006fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ff6:	2330      	movs	r3, #48	; 0x30
 8006ff8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80071ac <_vfiprintf_r+0x220>
 8006ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007000:	f04f 0901 	mov.w	r9, #1
 8007004:	4623      	mov	r3, r4
 8007006:	469a      	mov	sl, r3
 8007008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800700c:	b10a      	cbz	r2, 8007012 <_vfiprintf_r+0x86>
 800700e:	2a25      	cmp	r2, #37	; 0x25
 8007010:	d1f9      	bne.n	8007006 <_vfiprintf_r+0x7a>
 8007012:	ebba 0b04 	subs.w	fp, sl, r4
 8007016:	d00b      	beq.n	8007030 <_vfiprintf_r+0xa4>
 8007018:	465b      	mov	r3, fp
 800701a:	4622      	mov	r2, r4
 800701c:	4629      	mov	r1, r5
 800701e:	4630      	mov	r0, r6
 8007020:	f7ff ffa1 	bl	8006f66 <__sfputs_r>
 8007024:	3001      	adds	r0, #1
 8007026:	f000 80a9 	beq.w	800717c <_vfiprintf_r+0x1f0>
 800702a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800702c:	445a      	add	r2, fp
 800702e:	9209      	str	r2, [sp, #36]	; 0x24
 8007030:	f89a 3000 	ldrb.w	r3, [sl]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80a1 	beq.w	800717c <_vfiprintf_r+0x1f0>
 800703a:	2300      	movs	r3, #0
 800703c:	f04f 32ff 	mov.w	r2, #4294967295
 8007040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007044:	f10a 0a01 	add.w	sl, sl, #1
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	9307      	str	r3, [sp, #28]
 800704c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007050:	931a      	str	r3, [sp, #104]	; 0x68
 8007052:	4654      	mov	r4, sl
 8007054:	2205      	movs	r2, #5
 8007056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705a:	4854      	ldr	r0, [pc, #336]	; (80071ac <_vfiprintf_r+0x220>)
 800705c:	f7f9 f8c8 	bl	80001f0 <memchr>
 8007060:	9a04      	ldr	r2, [sp, #16]
 8007062:	b9d8      	cbnz	r0, 800709c <_vfiprintf_r+0x110>
 8007064:	06d1      	lsls	r1, r2, #27
 8007066:	bf44      	itt	mi
 8007068:	2320      	movmi	r3, #32
 800706a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800706e:	0713      	lsls	r3, r2, #28
 8007070:	bf44      	itt	mi
 8007072:	232b      	movmi	r3, #43	; 0x2b
 8007074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007078:	f89a 3000 	ldrb.w	r3, [sl]
 800707c:	2b2a      	cmp	r3, #42	; 0x2a
 800707e:	d015      	beq.n	80070ac <_vfiprintf_r+0x120>
 8007080:	9a07      	ldr	r2, [sp, #28]
 8007082:	4654      	mov	r4, sl
 8007084:	2000      	movs	r0, #0
 8007086:	f04f 0c0a 	mov.w	ip, #10
 800708a:	4621      	mov	r1, r4
 800708c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007090:	3b30      	subs	r3, #48	; 0x30
 8007092:	2b09      	cmp	r3, #9
 8007094:	d94d      	bls.n	8007132 <_vfiprintf_r+0x1a6>
 8007096:	b1b0      	cbz	r0, 80070c6 <_vfiprintf_r+0x13a>
 8007098:	9207      	str	r2, [sp, #28]
 800709a:	e014      	b.n	80070c6 <_vfiprintf_r+0x13a>
 800709c:	eba0 0308 	sub.w	r3, r0, r8
 80070a0:	fa09 f303 	lsl.w	r3, r9, r3
 80070a4:	4313      	orrs	r3, r2
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	46a2      	mov	sl, r4
 80070aa:	e7d2      	b.n	8007052 <_vfiprintf_r+0xc6>
 80070ac:	9b03      	ldr	r3, [sp, #12]
 80070ae:	1d19      	adds	r1, r3, #4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	9103      	str	r1, [sp, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfbb      	ittet	lt
 80070b8:	425b      	neglt	r3, r3
 80070ba:	f042 0202 	orrlt.w	r2, r2, #2
 80070be:	9307      	strge	r3, [sp, #28]
 80070c0:	9307      	strlt	r3, [sp, #28]
 80070c2:	bfb8      	it	lt
 80070c4:	9204      	strlt	r2, [sp, #16]
 80070c6:	7823      	ldrb	r3, [r4, #0]
 80070c8:	2b2e      	cmp	r3, #46	; 0x2e
 80070ca:	d10c      	bne.n	80070e6 <_vfiprintf_r+0x15a>
 80070cc:	7863      	ldrb	r3, [r4, #1]
 80070ce:	2b2a      	cmp	r3, #42	; 0x2a
 80070d0:	d134      	bne.n	800713c <_vfiprintf_r+0x1b0>
 80070d2:	9b03      	ldr	r3, [sp, #12]
 80070d4:	1d1a      	adds	r2, r3, #4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	9203      	str	r2, [sp, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bfb8      	it	lt
 80070de:	f04f 33ff 	movlt.w	r3, #4294967295
 80070e2:	3402      	adds	r4, #2
 80070e4:	9305      	str	r3, [sp, #20]
 80070e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80071bc <_vfiprintf_r+0x230>
 80070ea:	7821      	ldrb	r1, [r4, #0]
 80070ec:	2203      	movs	r2, #3
 80070ee:	4650      	mov	r0, sl
 80070f0:	f7f9 f87e 	bl	80001f0 <memchr>
 80070f4:	b138      	cbz	r0, 8007106 <_vfiprintf_r+0x17a>
 80070f6:	9b04      	ldr	r3, [sp, #16]
 80070f8:	eba0 000a 	sub.w	r0, r0, sl
 80070fc:	2240      	movs	r2, #64	; 0x40
 80070fe:	4082      	lsls	r2, r0
 8007100:	4313      	orrs	r3, r2
 8007102:	3401      	adds	r4, #1
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710a:	4829      	ldr	r0, [pc, #164]	; (80071b0 <_vfiprintf_r+0x224>)
 800710c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007110:	2206      	movs	r2, #6
 8007112:	f7f9 f86d 	bl	80001f0 <memchr>
 8007116:	2800      	cmp	r0, #0
 8007118:	d03f      	beq.n	800719a <_vfiprintf_r+0x20e>
 800711a:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <_vfiprintf_r+0x228>)
 800711c:	bb1b      	cbnz	r3, 8007166 <_vfiprintf_r+0x1da>
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	3307      	adds	r3, #7
 8007122:	f023 0307 	bic.w	r3, r3, #7
 8007126:	3308      	adds	r3, #8
 8007128:	9303      	str	r3, [sp, #12]
 800712a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800712c:	443b      	add	r3, r7
 800712e:	9309      	str	r3, [sp, #36]	; 0x24
 8007130:	e768      	b.n	8007004 <_vfiprintf_r+0x78>
 8007132:	fb0c 3202 	mla	r2, ip, r2, r3
 8007136:	460c      	mov	r4, r1
 8007138:	2001      	movs	r0, #1
 800713a:	e7a6      	b.n	800708a <_vfiprintf_r+0xfe>
 800713c:	2300      	movs	r3, #0
 800713e:	3401      	adds	r4, #1
 8007140:	9305      	str	r3, [sp, #20]
 8007142:	4619      	mov	r1, r3
 8007144:	f04f 0c0a 	mov.w	ip, #10
 8007148:	4620      	mov	r0, r4
 800714a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800714e:	3a30      	subs	r2, #48	; 0x30
 8007150:	2a09      	cmp	r2, #9
 8007152:	d903      	bls.n	800715c <_vfiprintf_r+0x1d0>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0c6      	beq.n	80070e6 <_vfiprintf_r+0x15a>
 8007158:	9105      	str	r1, [sp, #20]
 800715a:	e7c4      	b.n	80070e6 <_vfiprintf_r+0x15a>
 800715c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007160:	4604      	mov	r4, r0
 8007162:	2301      	movs	r3, #1
 8007164:	e7f0      	b.n	8007148 <_vfiprintf_r+0x1bc>
 8007166:	ab03      	add	r3, sp, #12
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	462a      	mov	r2, r5
 800716c:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <_vfiprintf_r+0x22c>)
 800716e:	a904      	add	r1, sp, #16
 8007170:	4630      	mov	r0, r6
 8007172:	f3af 8000 	nop.w
 8007176:	4607      	mov	r7, r0
 8007178:	1c78      	adds	r0, r7, #1
 800717a:	d1d6      	bne.n	800712a <_vfiprintf_r+0x19e>
 800717c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800717e:	07d9      	lsls	r1, r3, #31
 8007180:	d405      	bmi.n	800718e <_vfiprintf_r+0x202>
 8007182:	89ab      	ldrh	r3, [r5, #12]
 8007184:	059a      	lsls	r2, r3, #22
 8007186:	d402      	bmi.n	800718e <_vfiprintf_r+0x202>
 8007188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800718a:	f7ff fda8 	bl	8006cde <__retarget_lock_release_recursive>
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	065b      	lsls	r3, r3, #25
 8007192:	f53f af1d 	bmi.w	8006fd0 <_vfiprintf_r+0x44>
 8007196:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007198:	e71c      	b.n	8006fd4 <_vfiprintf_r+0x48>
 800719a:	ab03      	add	r3, sp, #12
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	462a      	mov	r2, r5
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <_vfiprintf_r+0x22c>)
 80071a2:	a904      	add	r1, sp, #16
 80071a4:	4630      	mov	r0, r6
 80071a6:	f000 f879 	bl	800729c <_printf_i>
 80071aa:	e7e4      	b.n	8007176 <_vfiprintf_r+0x1ea>
 80071ac:	0800795f 	.word	0x0800795f
 80071b0:	08007969 	.word	0x08007969
 80071b4:	00000000 	.word	0x00000000
 80071b8:	08006f67 	.word	0x08006f67
 80071bc:	08007965 	.word	0x08007965

080071c0 <_printf_common>:
 80071c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	4616      	mov	r6, r2
 80071c6:	4699      	mov	r9, r3
 80071c8:	688a      	ldr	r2, [r1, #8]
 80071ca:	690b      	ldr	r3, [r1, #16]
 80071cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071d0:	4293      	cmp	r3, r2
 80071d2:	bfb8      	it	lt
 80071d4:	4613      	movlt	r3, r2
 80071d6:	6033      	str	r3, [r6, #0]
 80071d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071dc:	4607      	mov	r7, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	b10a      	cbz	r2, 80071e6 <_printf_common+0x26>
 80071e2:	3301      	adds	r3, #1
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	0699      	lsls	r1, r3, #26
 80071ea:	bf42      	ittt	mi
 80071ec:	6833      	ldrmi	r3, [r6, #0]
 80071ee:	3302      	addmi	r3, #2
 80071f0:	6033      	strmi	r3, [r6, #0]
 80071f2:	6825      	ldr	r5, [r4, #0]
 80071f4:	f015 0506 	ands.w	r5, r5, #6
 80071f8:	d106      	bne.n	8007208 <_printf_common+0x48>
 80071fa:	f104 0a19 	add.w	sl, r4, #25
 80071fe:	68e3      	ldr	r3, [r4, #12]
 8007200:	6832      	ldr	r2, [r6, #0]
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	42ab      	cmp	r3, r5
 8007206:	dc26      	bgt.n	8007256 <_printf_common+0x96>
 8007208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800720c:	1e13      	subs	r3, r2, #0
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	bf18      	it	ne
 8007212:	2301      	movne	r3, #1
 8007214:	0692      	lsls	r2, r2, #26
 8007216:	d42b      	bmi.n	8007270 <_printf_common+0xb0>
 8007218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800721c:	4649      	mov	r1, r9
 800721e:	4638      	mov	r0, r7
 8007220:	47c0      	blx	r8
 8007222:	3001      	adds	r0, #1
 8007224:	d01e      	beq.n	8007264 <_printf_common+0xa4>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	6922      	ldr	r2, [r4, #16]
 800722a:	f003 0306 	and.w	r3, r3, #6
 800722e:	2b04      	cmp	r3, #4
 8007230:	bf02      	ittt	eq
 8007232:	68e5      	ldreq	r5, [r4, #12]
 8007234:	6833      	ldreq	r3, [r6, #0]
 8007236:	1aed      	subeq	r5, r5, r3
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	bf0c      	ite	eq
 800723c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007240:	2500      	movne	r5, #0
 8007242:	4293      	cmp	r3, r2
 8007244:	bfc4      	itt	gt
 8007246:	1a9b      	subgt	r3, r3, r2
 8007248:	18ed      	addgt	r5, r5, r3
 800724a:	2600      	movs	r6, #0
 800724c:	341a      	adds	r4, #26
 800724e:	42b5      	cmp	r5, r6
 8007250:	d11a      	bne.n	8007288 <_printf_common+0xc8>
 8007252:	2000      	movs	r0, #0
 8007254:	e008      	b.n	8007268 <_printf_common+0xa8>
 8007256:	2301      	movs	r3, #1
 8007258:	4652      	mov	r2, sl
 800725a:	4649      	mov	r1, r9
 800725c:	4638      	mov	r0, r7
 800725e:	47c0      	blx	r8
 8007260:	3001      	adds	r0, #1
 8007262:	d103      	bne.n	800726c <_printf_common+0xac>
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	3501      	adds	r5, #1
 800726e:	e7c6      	b.n	80071fe <_printf_common+0x3e>
 8007270:	18e1      	adds	r1, r4, r3
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	2030      	movs	r0, #48	; 0x30
 8007276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800727a:	4422      	add	r2, r4
 800727c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007284:	3302      	adds	r3, #2
 8007286:	e7c7      	b.n	8007218 <_printf_common+0x58>
 8007288:	2301      	movs	r3, #1
 800728a:	4622      	mov	r2, r4
 800728c:	4649      	mov	r1, r9
 800728e:	4638      	mov	r0, r7
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d0e6      	beq.n	8007264 <_printf_common+0xa4>
 8007296:	3601      	adds	r6, #1
 8007298:	e7d9      	b.n	800724e <_printf_common+0x8e>
	...

0800729c <_printf_i>:
 800729c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	7e0f      	ldrb	r7, [r1, #24]
 80072a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072a4:	2f78      	cmp	r7, #120	; 0x78
 80072a6:	4691      	mov	r9, r2
 80072a8:	4680      	mov	r8, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	469a      	mov	sl, r3
 80072ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072b2:	d807      	bhi.n	80072c4 <_printf_i+0x28>
 80072b4:	2f62      	cmp	r7, #98	; 0x62
 80072b6:	d80a      	bhi.n	80072ce <_printf_i+0x32>
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	f000 80d4 	beq.w	8007466 <_printf_i+0x1ca>
 80072be:	2f58      	cmp	r7, #88	; 0x58
 80072c0:	f000 80c0 	beq.w	8007444 <_printf_i+0x1a8>
 80072c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072cc:	e03a      	b.n	8007344 <_printf_i+0xa8>
 80072ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072d2:	2b15      	cmp	r3, #21
 80072d4:	d8f6      	bhi.n	80072c4 <_printf_i+0x28>
 80072d6:	a101      	add	r1, pc, #4	; (adr r1, 80072dc <_printf_i+0x40>)
 80072d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007349 	.word	0x08007349
 80072e4:	080072c5 	.word	0x080072c5
 80072e8:	080072c5 	.word	0x080072c5
 80072ec:	080072c5 	.word	0x080072c5
 80072f0:	080072c5 	.word	0x080072c5
 80072f4:	08007349 	.word	0x08007349
 80072f8:	080072c5 	.word	0x080072c5
 80072fc:	080072c5 	.word	0x080072c5
 8007300:	080072c5 	.word	0x080072c5
 8007304:	080072c5 	.word	0x080072c5
 8007308:	0800744d 	.word	0x0800744d
 800730c:	08007375 	.word	0x08007375
 8007310:	08007407 	.word	0x08007407
 8007314:	080072c5 	.word	0x080072c5
 8007318:	080072c5 	.word	0x080072c5
 800731c:	0800746f 	.word	0x0800746f
 8007320:	080072c5 	.word	0x080072c5
 8007324:	08007375 	.word	0x08007375
 8007328:	080072c5 	.word	0x080072c5
 800732c:	080072c5 	.word	0x080072c5
 8007330:	0800740f 	.word	0x0800740f
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	602a      	str	r2, [r5, #0]
 800733c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007344:	2301      	movs	r3, #1
 8007346:	e09f      	b.n	8007488 <_printf_i+0x1ec>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	0607      	lsls	r7, r0, #24
 800734e:	f103 0104 	add.w	r1, r3, #4
 8007352:	6029      	str	r1, [r5, #0]
 8007354:	d501      	bpl.n	800735a <_printf_i+0xbe>
 8007356:	681e      	ldr	r6, [r3, #0]
 8007358:	e003      	b.n	8007362 <_printf_i+0xc6>
 800735a:	0646      	lsls	r6, r0, #25
 800735c:	d5fb      	bpl.n	8007356 <_printf_i+0xba>
 800735e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007362:	2e00      	cmp	r6, #0
 8007364:	da03      	bge.n	800736e <_printf_i+0xd2>
 8007366:	232d      	movs	r3, #45	; 0x2d
 8007368:	4276      	negs	r6, r6
 800736a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800736e:	485a      	ldr	r0, [pc, #360]	; (80074d8 <_printf_i+0x23c>)
 8007370:	230a      	movs	r3, #10
 8007372:	e012      	b.n	800739a <_printf_i+0xfe>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	6820      	ldr	r0, [r4, #0]
 8007378:	1d19      	adds	r1, r3, #4
 800737a:	6029      	str	r1, [r5, #0]
 800737c:	0605      	lsls	r5, r0, #24
 800737e:	d501      	bpl.n	8007384 <_printf_i+0xe8>
 8007380:	681e      	ldr	r6, [r3, #0]
 8007382:	e002      	b.n	800738a <_printf_i+0xee>
 8007384:	0641      	lsls	r1, r0, #25
 8007386:	d5fb      	bpl.n	8007380 <_printf_i+0xe4>
 8007388:	881e      	ldrh	r6, [r3, #0]
 800738a:	4853      	ldr	r0, [pc, #332]	; (80074d8 <_printf_i+0x23c>)
 800738c:	2f6f      	cmp	r7, #111	; 0x6f
 800738e:	bf0c      	ite	eq
 8007390:	2308      	moveq	r3, #8
 8007392:	230a      	movne	r3, #10
 8007394:	2100      	movs	r1, #0
 8007396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800739a:	6865      	ldr	r5, [r4, #4]
 800739c:	60a5      	str	r5, [r4, #8]
 800739e:	2d00      	cmp	r5, #0
 80073a0:	bfa2      	ittt	ge
 80073a2:	6821      	ldrge	r1, [r4, #0]
 80073a4:	f021 0104 	bicge.w	r1, r1, #4
 80073a8:	6021      	strge	r1, [r4, #0]
 80073aa:	b90e      	cbnz	r6, 80073b0 <_printf_i+0x114>
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	d04b      	beq.n	8007448 <_printf_i+0x1ac>
 80073b0:	4615      	mov	r5, r2
 80073b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80073b6:	fb03 6711 	mls	r7, r3, r1, r6
 80073ba:	5dc7      	ldrb	r7, [r0, r7]
 80073bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073c0:	4637      	mov	r7, r6
 80073c2:	42bb      	cmp	r3, r7
 80073c4:	460e      	mov	r6, r1
 80073c6:	d9f4      	bls.n	80073b2 <_printf_i+0x116>
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d10b      	bne.n	80073e4 <_printf_i+0x148>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	07de      	lsls	r6, r3, #31
 80073d0:	d508      	bpl.n	80073e4 <_printf_i+0x148>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	6861      	ldr	r1, [r4, #4]
 80073d6:	4299      	cmp	r1, r3
 80073d8:	bfde      	ittt	le
 80073da:	2330      	movle	r3, #48	; 0x30
 80073dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073e4:	1b52      	subs	r2, r2, r5
 80073e6:	6122      	str	r2, [r4, #16]
 80073e8:	f8cd a000 	str.w	sl, [sp]
 80073ec:	464b      	mov	r3, r9
 80073ee:	aa03      	add	r2, sp, #12
 80073f0:	4621      	mov	r1, r4
 80073f2:	4640      	mov	r0, r8
 80073f4:	f7ff fee4 	bl	80071c0 <_printf_common>
 80073f8:	3001      	adds	r0, #1
 80073fa:	d14a      	bne.n	8007492 <_printf_i+0x1f6>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	b004      	add	sp, #16
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f043 0320 	orr.w	r3, r3, #32
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	4833      	ldr	r0, [pc, #204]	; (80074dc <_printf_i+0x240>)
 8007410:	2778      	movs	r7, #120	; 0x78
 8007412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6829      	ldr	r1, [r5, #0]
 800741a:	061f      	lsls	r7, r3, #24
 800741c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007420:	d402      	bmi.n	8007428 <_printf_i+0x18c>
 8007422:	065f      	lsls	r7, r3, #25
 8007424:	bf48      	it	mi
 8007426:	b2b6      	uxthmi	r6, r6
 8007428:	07df      	lsls	r7, r3, #31
 800742a:	bf48      	it	mi
 800742c:	f043 0320 	orrmi.w	r3, r3, #32
 8007430:	6029      	str	r1, [r5, #0]
 8007432:	bf48      	it	mi
 8007434:	6023      	strmi	r3, [r4, #0]
 8007436:	b91e      	cbnz	r6, 8007440 <_printf_i+0x1a4>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	f023 0320 	bic.w	r3, r3, #32
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	2310      	movs	r3, #16
 8007442:	e7a7      	b.n	8007394 <_printf_i+0xf8>
 8007444:	4824      	ldr	r0, [pc, #144]	; (80074d8 <_printf_i+0x23c>)
 8007446:	e7e4      	b.n	8007412 <_printf_i+0x176>
 8007448:	4615      	mov	r5, r2
 800744a:	e7bd      	b.n	80073c8 <_printf_i+0x12c>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	6826      	ldr	r6, [r4, #0]
 8007450:	6961      	ldr	r1, [r4, #20]
 8007452:	1d18      	adds	r0, r3, #4
 8007454:	6028      	str	r0, [r5, #0]
 8007456:	0635      	lsls	r5, r6, #24
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	d501      	bpl.n	8007460 <_printf_i+0x1c4>
 800745c:	6019      	str	r1, [r3, #0]
 800745e:	e002      	b.n	8007466 <_printf_i+0x1ca>
 8007460:	0670      	lsls	r0, r6, #25
 8007462:	d5fb      	bpl.n	800745c <_printf_i+0x1c0>
 8007464:	8019      	strh	r1, [r3, #0]
 8007466:	2300      	movs	r3, #0
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	4615      	mov	r5, r2
 800746c:	e7bc      	b.n	80073e8 <_printf_i+0x14c>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	602a      	str	r2, [r5, #0]
 8007474:	681d      	ldr	r5, [r3, #0]
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	2100      	movs	r1, #0
 800747a:	4628      	mov	r0, r5
 800747c:	f7f8 feb8 	bl	80001f0 <memchr>
 8007480:	b108      	cbz	r0, 8007486 <_printf_i+0x1ea>
 8007482:	1b40      	subs	r0, r0, r5
 8007484:	6060      	str	r0, [r4, #4]
 8007486:	6863      	ldr	r3, [r4, #4]
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	2300      	movs	r3, #0
 800748c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007490:	e7aa      	b.n	80073e8 <_printf_i+0x14c>
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	462a      	mov	r2, r5
 8007496:	4649      	mov	r1, r9
 8007498:	4640      	mov	r0, r8
 800749a:	47d0      	blx	sl
 800749c:	3001      	adds	r0, #1
 800749e:	d0ad      	beq.n	80073fc <_printf_i+0x160>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	079b      	lsls	r3, r3, #30
 80074a4:	d413      	bmi.n	80074ce <_printf_i+0x232>
 80074a6:	68e0      	ldr	r0, [r4, #12]
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	4298      	cmp	r0, r3
 80074ac:	bfb8      	it	lt
 80074ae:	4618      	movlt	r0, r3
 80074b0:	e7a6      	b.n	8007400 <_printf_i+0x164>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4632      	mov	r2, r6
 80074b6:	4649      	mov	r1, r9
 80074b8:	4640      	mov	r0, r8
 80074ba:	47d0      	blx	sl
 80074bc:	3001      	adds	r0, #1
 80074be:	d09d      	beq.n	80073fc <_printf_i+0x160>
 80074c0:	3501      	adds	r5, #1
 80074c2:	68e3      	ldr	r3, [r4, #12]
 80074c4:	9903      	ldr	r1, [sp, #12]
 80074c6:	1a5b      	subs	r3, r3, r1
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	dcf2      	bgt.n	80074b2 <_printf_i+0x216>
 80074cc:	e7eb      	b.n	80074a6 <_printf_i+0x20a>
 80074ce:	2500      	movs	r5, #0
 80074d0:	f104 0619 	add.w	r6, r4, #25
 80074d4:	e7f5      	b.n	80074c2 <_printf_i+0x226>
 80074d6:	bf00      	nop
 80074d8:	08007970 	.word	0x08007970
 80074dc:	08007981 	.word	0x08007981

080074e0 <fiprintf>:
 80074e0:	b40e      	push	{r1, r2, r3}
 80074e2:	b503      	push	{r0, r1, lr}
 80074e4:	4601      	mov	r1, r0
 80074e6:	ab03      	add	r3, sp, #12
 80074e8:	4805      	ldr	r0, [pc, #20]	; (8007500 <fiprintf+0x20>)
 80074ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ee:	6800      	ldr	r0, [r0, #0]
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	f7ff fd4b 	bl	8006f8c <_vfiprintf_r>
 80074f6:	b002      	add	sp, #8
 80074f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074fc:	b003      	add	sp, #12
 80074fe:	4770      	bx	lr
 8007500:	200000a8 	.word	0x200000a8

08007504 <__swbuf_r>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	460e      	mov	r6, r1
 8007508:	4614      	mov	r4, r2
 800750a:	4605      	mov	r5, r0
 800750c:	b118      	cbz	r0, 8007516 <__swbuf_r+0x12>
 800750e:	6a03      	ldr	r3, [r0, #32]
 8007510:	b90b      	cbnz	r3, 8007516 <__swbuf_r+0x12>
 8007512:	f7ff fa89 	bl	8006a28 <__sinit>
 8007516:	69a3      	ldr	r3, [r4, #24]
 8007518:	60a3      	str	r3, [r4, #8]
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	071a      	lsls	r2, r3, #28
 800751e:	d525      	bpl.n	800756c <__swbuf_r+0x68>
 8007520:	6923      	ldr	r3, [r4, #16]
 8007522:	b31b      	cbz	r3, 800756c <__swbuf_r+0x68>
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	6922      	ldr	r2, [r4, #16]
 8007528:	1a98      	subs	r0, r3, r2
 800752a:	6963      	ldr	r3, [r4, #20]
 800752c:	b2f6      	uxtb	r6, r6
 800752e:	4283      	cmp	r3, r0
 8007530:	4637      	mov	r7, r6
 8007532:	dc04      	bgt.n	800753e <__swbuf_r+0x3a>
 8007534:	4621      	mov	r1, r4
 8007536:	4628      	mov	r0, r5
 8007538:	f7ff f9c0 	bl	80068bc <_fflush_r>
 800753c:	b9e0      	cbnz	r0, 8007578 <__swbuf_r+0x74>
 800753e:	68a3      	ldr	r3, [r4, #8]
 8007540:	3b01      	subs	r3, #1
 8007542:	60a3      	str	r3, [r4, #8]
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	6022      	str	r2, [r4, #0]
 800754a:	701e      	strb	r6, [r3, #0]
 800754c:	6962      	ldr	r2, [r4, #20]
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	429a      	cmp	r2, r3
 8007552:	d004      	beq.n	800755e <__swbuf_r+0x5a>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	07db      	lsls	r3, r3, #31
 8007558:	d506      	bpl.n	8007568 <__swbuf_r+0x64>
 800755a:	2e0a      	cmp	r6, #10
 800755c:	d104      	bne.n	8007568 <__swbuf_r+0x64>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f7ff f9ab 	bl	80068bc <_fflush_r>
 8007566:	b938      	cbnz	r0, 8007578 <__swbuf_r+0x74>
 8007568:	4638      	mov	r0, r7
 800756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800756c:	4621      	mov	r1, r4
 800756e:	4628      	mov	r0, r5
 8007570:	f000 f806 	bl	8007580 <__swsetup_r>
 8007574:	2800      	cmp	r0, #0
 8007576:	d0d5      	beq.n	8007524 <__swbuf_r+0x20>
 8007578:	f04f 37ff 	mov.w	r7, #4294967295
 800757c:	e7f4      	b.n	8007568 <__swbuf_r+0x64>
	...

08007580 <__swsetup_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4b2a      	ldr	r3, [pc, #168]	; (800762c <__swsetup_r+0xac>)
 8007584:	4605      	mov	r5, r0
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	460c      	mov	r4, r1
 800758a:	b118      	cbz	r0, 8007594 <__swsetup_r+0x14>
 800758c:	6a03      	ldr	r3, [r0, #32]
 800758e:	b90b      	cbnz	r3, 8007594 <__swsetup_r+0x14>
 8007590:	f7ff fa4a 	bl	8006a28 <__sinit>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800759a:	0718      	lsls	r0, r3, #28
 800759c:	d422      	bmi.n	80075e4 <__swsetup_r+0x64>
 800759e:	06d9      	lsls	r1, r3, #27
 80075a0:	d407      	bmi.n	80075b2 <__swsetup_r+0x32>
 80075a2:	2309      	movs	r3, #9
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075aa:	81a3      	strh	r3, [r4, #12]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e034      	b.n	800761c <__swsetup_r+0x9c>
 80075b2:	0758      	lsls	r0, r3, #29
 80075b4:	d512      	bpl.n	80075dc <__swsetup_r+0x5c>
 80075b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075b8:	b141      	cbz	r1, 80075cc <__swsetup_r+0x4c>
 80075ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075be:	4299      	cmp	r1, r3
 80075c0:	d002      	beq.n	80075c8 <__swsetup_r+0x48>
 80075c2:	4628      	mov	r0, r5
 80075c4:	f7ff fbb8 	bl	8006d38 <_free_r>
 80075c8:	2300      	movs	r3, #0
 80075ca:	6363      	str	r3, [r4, #52]	; 0x34
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	2300      	movs	r3, #0
 80075d6:	6063      	str	r3, [r4, #4]
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	f043 0308 	orr.w	r3, r3, #8
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	b94b      	cbnz	r3, 80075fc <__swsetup_r+0x7c>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f2:	d003      	beq.n	80075fc <__swsetup_r+0x7c>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 f857 	bl	80076aa <__smakebuf_r>
 80075fc:	89a0      	ldrh	r0, [r4, #12]
 80075fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007602:	f010 0301 	ands.w	r3, r0, #1
 8007606:	d00a      	beq.n	800761e <__swsetup_r+0x9e>
 8007608:	2300      	movs	r3, #0
 800760a:	60a3      	str	r3, [r4, #8]
 800760c:	6963      	ldr	r3, [r4, #20]
 800760e:	425b      	negs	r3, r3
 8007610:	61a3      	str	r3, [r4, #24]
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	b943      	cbnz	r3, 8007628 <__swsetup_r+0xa8>
 8007616:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800761a:	d1c4      	bne.n	80075a6 <__swsetup_r+0x26>
 800761c:	bd38      	pop	{r3, r4, r5, pc}
 800761e:	0781      	lsls	r1, r0, #30
 8007620:	bf58      	it	pl
 8007622:	6963      	ldrpl	r3, [r4, #20]
 8007624:	60a3      	str	r3, [r4, #8]
 8007626:	e7f4      	b.n	8007612 <__swsetup_r+0x92>
 8007628:	2000      	movs	r0, #0
 800762a:	e7f7      	b.n	800761c <__swsetup_r+0x9c>
 800762c:	200000a8 	.word	0x200000a8

08007630 <_sbrk_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	; (800764c <_sbrk_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7fa f956 	bl	80018ec <_sbrk>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_sbrk_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_sbrk_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20004cd4 	.word	0x20004cd4

08007650 <abort>:
 8007650:	b508      	push	{r3, lr}
 8007652:	2006      	movs	r0, #6
 8007654:	f000 f88e 	bl	8007774 <raise>
 8007658:	2001      	movs	r0, #1
 800765a:	f7fa f8d0 	bl	80017fe <_exit>

0800765e <__swhatbuf_r>:
 800765e:	b570      	push	{r4, r5, r6, lr}
 8007660:	460c      	mov	r4, r1
 8007662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007666:	2900      	cmp	r1, #0
 8007668:	b096      	sub	sp, #88	; 0x58
 800766a:	4615      	mov	r5, r2
 800766c:	461e      	mov	r6, r3
 800766e:	da0d      	bge.n	800768c <__swhatbuf_r+0x2e>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007676:	f04f 0100 	mov.w	r1, #0
 800767a:	bf0c      	ite	eq
 800767c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007680:	2340      	movne	r3, #64	; 0x40
 8007682:	2000      	movs	r0, #0
 8007684:	6031      	str	r1, [r6, #0]
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	b016      	add	sp, #88	; 0x58
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	466a      	mov	r2, sp
 800768e:	f000 f879 	bl	8007784 <_fstat_r>
 8007692:	2800      	cmp	r0, #0
 8007694:	dbec      	blt.n	8007670 <__swhatbuf_r+0x12>
 8007696:	9901      	ldr	r1, [sp, #4]
 8007698:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800769c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076a0:	4259      	negs	r1, r3
 80076a2:	4159      	adcs	r1, r3
 80076a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a8:	e7eb      	b.n	8007682 <__swhatbuf_r+0x24>

080076aa <__smakebuf_r>:
 80076aa:	898b      	ldrh	r3, [r1, #12]
 80076ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076ae:	079d      	lsls	r5, r3, #30
 80076b0:	4606      	mov	r6, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	d507      	bpl.n	80076c6 <__smakebuf_r+0x1c>
 80076b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	2301      	movs	r3, #1
 80076c0:	6163      	str	r3, [r4, #20]
 80076c2:	b002      	add	sp, #8
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	ab01      	add	r3, sp, #4
 80076c8:	466a      	mov	r2, sp
 80076ca:	f7ff ffc8 	bl	800765e <__swhatbuf_r>
 80076ce:	9900      	ldr	r1, [sp, #0]
 80076d0:	4605      	mov	r5, r0
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7ff fba4 	bl	8006e20 <_malloc_r>
 80076d8:	b948      	cbnz	r0, 80076ee <__smakebuf_r+0x44>
 80076da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076de:	059a      	lsls	r2, r3, #22
 80076e0:	d4ef      	bmi.n	80076c2 <__smakebuf_r+0x18>
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	f043 0302 	orr.w	r3, r3, #2
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	e7e3      	b.n	80076b6 <__smakebuf_r+0xc>
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	6020      	str	r0, [r4, #0]
 80076f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	9b00      	ldr	r3, [sp, #0]
 80076fa:	6163      	str	r3, [r4, #20]
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	6120      	str	r0, [r4, #16]
 8007700:	b15b      	cbz	r3, 800771a <__smakebuf_r+0x70>
 8007702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007706:	4630      	mov	r0, r6
 8007708:	f000 f84e 	bl	80077a8 <_isatty_r>
 800770c:	b128      	cbz	r0, 800771a <__smakebuf_r+0x70>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	f023 0303 	bic.w	r3, r3, #3
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	81a3      	strh	r3, [r4, #12]
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	431d      	orrs	r5, r3
 800771e:	81a5      	strh	r5, [r4, #12]
 8007720:	e7cf      	b.n	80076c2 <__smakebuf_r+0x18>

08007722 <_raise_r>:
 8007722:	291f      	cmp	r1, #31
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4604      	mov	r4, r0
 8007728:	460d      	mov	r5, r1
 800772a:	d904      	bls.n	8007736 <_raise_r+0x14>
 800772c:	2316      	movs	r3, #22
 800772e:	6003      	str	r3, [r0, #0]
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007738:	b112      	cbz	r2, 8007740 <_raise_r+0x1e>
 800773a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800773e:	b94b      	cbnz	r3, 8007754 <_raise_r+0x32>
 8007740:	4620      	mov	r0, r4
 8007742:	f000 f853 	bl	80077ec <_getpid_r>
 8007746:	462a      	mov	r2, r5
 8007748:	4601      	mov	r1, r0
 800774a:	4620      	mov	r0, r4
 800774c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007750:	f000 b83a 	b.w	80077c8 <_kill_r>
 8007754:	2b01      	cmp	r3, #1
 8007756:	d00a      	beq.n	800776e <_raise_r+0x4c>
 8007758:	1c59      	adds	r1, r3, #1
 800775a:	d103      	bne.n	8007764 <_raise_r+0x42>
 800775c:	2316      	movs	r3, #22
 800775e:	6003      	str	r3, [r0, #0]
 8007760:	2001      	movs	r0, #1
 8007762:	e7e7      	b.n	8007734 <_raise_r+0x12>
 8007764:	2400      	movs	r4, #0
 8007766:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800776a:	4628      	mov	r0, r5
 800776c:	4798      	blx	r3
 800776e:	2000      	movs	r0, #0
 8007770:	e7e0      	b.n	8007734 <_raise_r+0x12>
	...

08007774 <raise>:
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <raise+0xc>)
 8007776:	4601      	mov	r1, r0
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	f7ff bfd2 	b.w	8007722 <_raise_r>
 800777e:	bf00      	nop
 8007780:	200000a8 	.word	0x200000a8

08007784 <_fstat_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d07      	ldr	r5, [pc, #28]	; (80077a4 <_fstat_r+0x20>)
 8007788:	2300      	movs	r3, #0
 800778a:	4604      	mov	r4, r0
 800778c:	4608      	mov	r0, r1
 800778e:	4611      	mov	r1, r2
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	f7fa f883 	bl	800189c <_fstat>
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	d102      	bne.n	80077a0 <_fstat_r+0x1c>
 800779a:	682b      	ldr	r3, [r5, #0]
 800779c:	b103      	cbz	r3, 80077a0 <_fstat_r+0x1c>
 800779e:	6023      	str	r3, [r4, #0]
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
 80077a2:	bf00      	nop
 80077a4:	20004cd4 	.word	0x20004cd4

080077a8 <_isatty_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d06      	ldr	r5, [pc, #24]	; (80077c4 <_isatty_r+0x1c>)
 80077ac:	2300      	movs	r3, #0
 80077ae:	4604      	mov	r4, r0
 80077b0:	4608      	mov	r0, r1
 80077b2:	602b      	str	r3, [r5, #0]
 80077b4:	f7fa f882 	bl	80018bc <_isatty>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_isatty_r+0x1a>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_isatty_r+0x1a>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	20004cd4 	.word	0x20004cd4

080077c8 <_kill_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d07      	ldr	r5, [pc, #28]	; (80077e8 <_kill_r+0x20>)
 80077cc:	2300      	movs	r3, #0
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	f7fa f802 	bl	80017de <_kill>
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d102      	bne.n	80077e4 <_kill_r+0x1c>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	b103      	cbz	r3, 80077e4 <_kill_r+0x1c>
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	bd38      	pop	{r3, r4, r5, pc}
 80077e6:	bf00      	nop
 80077e8:	20004cd4 	.word	0x20004cd4

080077ec <_getpid_r>:
 80077ec:	f7f9 bfef 	b.w	80017ce <_getpid>

080077f0 <_init>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	bf00      	nop
 80077f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f6:	bc08      	pop	{r3}
 80077f8:	469e      	mov	lr, r3
 80077fa:	4770      	bx	lr

080077fc <_fini>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr
