
Control_Digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e5c  08007e5c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004c38  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ca4  20004ca4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      000000b1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001802f  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000401f  00000000  00000000  0003817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001238  00000000  00000000  0003c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d6b  00000000  00000000  0003d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ab83  00000000  00000000  0003e143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000199ab  00000000  00000000  00068cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f367c  00000000  00000000  00082671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005368  00000000  00000000  00175cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0017b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00001016  00000000  00000000  0017b0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000040  00000000  00000000  0017c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007cbc 	.word	0x08007cbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007cbc 	.word	0x08007cbc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <TaskIdentification>:
 */

#include "TaskIdentification.h"

void TaskIdentification(void * argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	uint32_t xLastWakeTime;
	t_ILSdata * tILS = (t_ILSdata *) argument;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <TaskIdentification+0x48>)
 8000dd8:	f001 fba5 	bl	8002526 <HAL_DAC_Start>
#if (WAVEFORM_DEBUG == 1)
	vPrintString("start--------");
	vPrintNewLine();
#endif

	xLastWakeTime = xTaskGetTickCount();
 8000ddc:	f004 f8c0 	bl	8004f60 <xTaskGetTickCount>
 8000de0:	4603      	mov	r3, r0
 8000de2:	60bb      	str	r3, [r7, #8]

	for(;;)
	{
		ILS_Run(tILS);
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f000 fb5d 	bl	80014a4 <ILS_Run>

        if(tILS->i==2)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d104      	bne.n	8000dfc <TaskIdentification+0x34>
        {
		#if (WAVEFORM_DEBUG == 0)
			// Imprimo los parámetros calculados
			console_print(tILS->buffer_T);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3314      	adds	r3, #20
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f88c 	bl	8000f14 <console_print>
		#endif
        }

		vTaskDelayUntil( &xLastWakeTime, ( tILS->ts_Ms / portTICK_RATE_MS ) );
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 ff10 	bl	8004c2c <vTaskDelayUntil>
		ILS_Run(tILS);
 8000e0c:	e7ea      	b.n	8000de4 <TaskIdentification+0x1c>
 8000e0e:	bf00      	nop
 8000e10:	200000d0 	.word	0x200000d0
 8000e14:	00000000 	.word	0x00000000

08000e18 <receiveData>:

}

// Generación del DAC y captura del ADC
void receiveData (float * buffer)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    float Y, U;
    uint16_t dacValue = 0, outputSample;
 8000e20:	2300      	movs	r3, #0
 8000e22:	82fb      	strh	r3, [r7, #22]

    // random = limite_inferior + rand() % (limite_superior +1 - limite_inferior);
    dacValue = DAC_REFERENCE_VALUE_LOW + rand() % (DAC_REFERENCE_VALUE_HIGH +1 - DAC_REFERENCE_VALUE_LOW);
 8000e24:	f005 feb0 	bl	8006b88 <rand>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a37      	ldr	r2, [pc, #220]	; (8000f08 <receiveData+0xf0>)
 8000e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e30:	1211      	asrs	r1, r2, #8
 8000e32:	17da      	asrs	r2, r3, #31
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	f240 41da 	movw	r1, #1242	; 0x4da
 8000e3a:	fb01 f202 	mul.w	r2, r1, r2
 8000e3e:	1a9a      	subs	r2, r3, r2
 8000e40:	b293      	uxth	r3, r2
 8000e42:	f203 5393 	addw	r3, r3, #1427	; 0x593
 8000e46:	82fb      	strh	r3, [r7, #22]

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 8000e48:	8afb      	ldrh	r3, [r7, #22]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <receiveData+0xf4>)
 8000e50:	f001 fbbb 	bl	80025ca <HAL_DAC_SetValue>

	HAL_ADC_Start(&hadc1);
 8000e54:	482e      	ldr	r0, [pc, #184]	; (8000f10 <receiveData+0xf8>)
 8000e56:	f000 ff51 	bl	8001cfc <HAL_ADC_Start>

    U = (float) dacValue * 3.3 / 4095.0;
 8000e5a:	8afb      	ldrh	r3, [r7, #22]
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e64:	ee17 0a90 	vmov	r0, s15
 8000e68:	f7ff fb76 	bl	8000558 <__aeabi_f2d>
 8000e6c:	a322      	add	r3, pc, #136	; (adr r3, 8000ef8 <receiveData+0xe0>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fbc9 	bl	8000608 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	a320      	add	r3, pc, #128	; (adr r3, 8000f00 <receiveData+0xe8>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	f7ff fcea 	bl	800085c <__aeabi_ddiv>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f7ff fdcc 	bl	8000a2c <__aeabi_d2f>
 8000e94:	4603      	mov	r3, r0
 8000e96:	613b      	str	r3, [r7, #16]

	outputSample = HAL_ADC_GetValue(&hadc1);
 8000e98:	481d      	ldr	r0, [pc, #116]	; (8000f10 <receiveData+0xf8>)
 8000e9a:	f001 f801 	bl	8001ea0 <HAL_ADC_GetValue>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	81fb      	strh	r3, [r7, #14]

	Y = (float) outputSample * 3.3 / 4095.0;
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eac:	ee17 0a90 	vmov	r0, s15
 8000eb0:	f7ff fb52 	bl	8000558 <__aeabi_f2d>
 8000eb4:	a310      	add	r3, pc, #64	; (adr r3, 8000ef8 <receiveData+0xe0>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff fba5 	bl	8000608 <__aeabi_dmul>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	a30e      	add	r3, pc, #56	; (adr r3, 8000f00 <receiveData+0xe8>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fcc6 	bl	800085c <__aeabi_ddiv>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fda8 	bl	8000a2c <__aeabi_d2f>
 8000edc:	4603      	mov	r3, r0
 8000ede:	60bb      	str	r3, [r7, #8]
#if (WAVEFORM_DEBUG == 1)
	vPrintNumber(dacValue);
	vPrintStringAndNumber(",", outputSample);
#endif

	buffer[0] = U;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]
	buffer[1] = Y;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	66666666 	.word	0x66666666
 8000efc:	400a6666 	.word	0x400a6666
 8000f00:	00000000 	.word	0x00000000
 8000f04:	40affe00 	.word	0x40affe00
 8000f08:	34c439b7 	.word	0x34c439b7
 8000f0c:	200000d0 	.word	0x200000d0
 8000f10:	20000088 	.word	0x20000088

08000f14 <console_print>:

// Función para imprimir los parámetros la planta (2do orden)
void console_print (float* buffer)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	int32_t integer, fraction;

	// Imprimo los parámetros calculados
	printf ("Parametros = [\t");
 8000f1c:	4836      	ldr	r0, [pc, #216]	; (8000ff8 <console_print+0xe4>)
 8000f1e:	f005 ffe3 	bl	8006ee8 <iprintf>
	for (i = 0; i<5; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e05b      	b.n	8000fe0 <console_print+0xcc>
	{
		// Casteo de float a int
		integer = (int)buffer[i];
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	edd3 7a00 	vldr	s15, [r3]
 8000f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f38:	ee17 3a90 	vmov	r3, s15
 8000f3c:	613b      	str	r3, [r7, #16]
		fraction = (int)(((buffer[i] - (float)integer)) * 1000);
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000ffc <console_print+0xe8>
 8000f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f64:	ee17 3a90 	vmov	r3, s15
 8000f68:	60fb      	str	r3, [r7, #12]
        if (fraction<0)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da25      	bge.n	8000fbc <console_print+0xa8>
        {
            fraction = (-1)*fraction;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	425b      	negs	r3, r3
 8000f74:	60fb      	str	r3, [r7, #12]
            if (integer==0)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <console_print+0x88>
            {
            	taskENTER_CRITICAL();
 8000f7c:	f005 f88a 	bl	8006094 <vPortEnterCritical>
            	{
            		printf("-%d.%03d\t", integer, fraction);
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	6939      	ldr	r1, [r7, #16]
 8000f84:	481e      	ldr	r0, [pc, #120]	; (8001000 <console_print+0xec>)
 8000f86:	f005 ffaf 	bl	8006ee8 <iprintf>
            		fflush( stdout );
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <console_print+0xf0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 fee5 	bl	8006d60 <fflush>
            	}
            	taskEXIT_CRITICAL();
 8000f96:	f005 f8ad 	bl	80060f4 <vPortExitCritical>
 8000f9a:	e01e      	b.n	8000fda <console_print+0xc6>
            }
            else
            {
            	taskENTER_CRITICAL();
 8000f9c:	f005 f87a 	bl	8006094 <vPortEnterCritical>
            	{
            		printf("%d.%03d\t", integer, fraction);
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	4818      	ldr	r0, [pc, #96]	; (8001008 <console_print+0xf4>)
 8000fa6:	f005 ff9f 	bl	8006ee8 <iprintf>
            		fflush( stdout );
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <console_print+0xf0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 fed5 	bl	8006d60 <fflush>
            	}
            	taskEXIT_CRITICAL();
 8000fb6:	f005 f89d 	bl	80060f4 <vPortExitCritical>
 8000fba:	e00e      	b.n	8000fda <console_print+0xc6>
            }
        }
        else
        {
        	taskENTER_CRITICAL();
 8000fbc:	f005 f86a 	bl	8006094 <vPortEnterCritical>
        	{
            	printf("%d.%03d\t", integer, fraction);
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	6939      	ldr	r1, [r7, #16]
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <console_print+0xf4>)
 8000fc6:	f005 ff8f 	bl	8006ee8 <iprintf>
        		fflush( stdout );
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <console_print+0xf0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 fec5 	bl	8006d60 <fflush>
        	}
        	taskEXIT_CRITICAL();
 8000fd6:	f005 f88d 	bl	80060f4 <vPortExitCritical>
	for (i = 0; i<5; i++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d9a0      	bls.n	8000f28 <console_print+0x14>
        }
	}
	printf("]");
 8000fe6:	205d      	movs	r0, #93	; 0x5d
 8000fe8:	f005 ff90 	bl	8006f0c <putchar>
	vPrintNewLine();
 8000fec:	f000 fd20 	bl	8001a30 <vPrintNewLine>
}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	08007cd4 	.word	0x08007cd4
 8000ffc:	447a0000 	.word	0x447a0000
 8001000:	08007ce4 	.word	0x08007ce4
 8001004:	20000068 	.word	0x20000068
 8001008:	08007cf0 	.word	0x08007cf0

0800100c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x9c>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800102a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_ADC1_Init+0x98>)
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa0>)
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_ADC1_Init+0x98>)
 800105a:	2201      	movs	r2, #1
 800105c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001068:	2201      	movs	r2, #1
 800106a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_ADC1_Init+0x98>)
 800106e:	f000 fe01 	bl	8001c74 <HAL_ADC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001078:	f000 fb9c 	bl	80017b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800107c:	2303      	movs	r3, #3
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0x98>)
 800108e:	f000 ff15 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001098:	f000 fb8c 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000088 	.word	0x20000088
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_ADC_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d127      	bne.n	8001122 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x80>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110a:	2308      	movs	r3, #8
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_ADC_MspInit+0x84>)
 800111e:	f001 fac9 	bl	80026b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012000 	.word	0x40012000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_DAC_Init+0x4c>)
 8001148:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <MX_DAC_Init+0x50>)
 800114a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_DAC_Init+0x4c>)
 800114e:	f001 f9c8 	bl	80024e2 <HAL_DAC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001158:	f000 fb2c 	bl	80017b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800115c:	2300      	movs	r3, #0
 800115e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_DAC_Init+0x4c>)
 800116c:	f001 fa52 	bl	8002614 <HAL_DAC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001176:	f000 fb1d 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000d0 	.word	0x200000d0
 8001188:	40007400 	.word	0x40007400

0800118c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_DAC_MspInit+0x7c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d127      	bne.n	80011fe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_DAC_MspInit+0x80>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_DAC_MspInit+0x80>)
 80011b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_DAC_MspInit+0x80>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_DAC_MspInit+0x80>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_DAC_MspInit+0x80>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_DAC_MspInit+0x80>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e6:	2310      	movs	r3, #16
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_DAC_MspInit+0x84>)
 80011fa:	f001 fa5b 	bl	80026b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40007400 	.word	0x40007400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	TaskIdentificationHandle = osThreadNew(TaskIdentification, (void*)tILS1, &IdentificationTask_attributes);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MX_FREERTOS_Init+0x1c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <MX_FREERTOS_Init+0x20>)
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_FREERTOS_Init+0x24>)
 8001222:	f002 fce5 	bl	8003bf0 <osThreadNew>
 8001226:	4603      	mov	r3, r0
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <MX_FREERTOS_Init+0x28>)
 800122a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000120 	.word	0x20000120
 8001234:	08007d38 	.word	0x08007d38
 8001238:	08000dc9 	.word	0x08000dc9
 800123c:	200000e4 	.word	0x200000e4

08001240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	4b4c      	ldr	r3, [pc, #304]	; (800138c <MX_GPIO_Init+0x14c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a4b      	ldr	r2, [pc, #300]	; (800138c <MX_GPIO_Init+0x14c>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <MX_GPIO_Init+0x14c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	4b45      	ldr	r3, [pc, #276]	; (800138c <MX_GPIO_Init+0x14c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a44      	ldr	r2, [pc, #272]	; (800138c <MX_GPIO_Init+0x14c>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b42      	ldr	r3, [pc, #264]	; (800138c <MX_GPIO_Init+0x14c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b3e      	ldr	r3, [pc, #248]	; (800138c <MX_GPIO_Init+0x14c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a3d      	ldr	r2, [pc, #244]	; (800138c <MX_GPIO_Init+0x14c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <MX_GPIO_Init+0x14c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b37      	ldr	r3, [pc, #220]	; (800138c <MX_GPIO_Init+0x14c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a36      	ldr	r2, [pc, #216]	; (800138c <MX_GPIO_Init+0x14c>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MX_GPIO_Init+0x14c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x14c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x14c>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <MX_GPIO_Init+0x14c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_GPIO_Init+0x14c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a28      	ldr	r2, [pc, #160]	; (800138c <MX_GPIO_Init+0x14c>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <MX_GPIO_Init+0x14c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f244 0181 	movw	r1, #16513	; 0x4081
 8001304:	4822      	ldr	r0, [pc, #136]	; (8001390 <MX_GPIO_Init+0x150>)
 8001306:	f001 fb81 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2140      	movs	r1, #64	; 0x40
 800130e:	4821      	ldr	r0, [pc, #132]	; (8001394 <MX_GPIO_Init+0x154>)
 8001310:	f001 fb7c 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	481b      	ldr	r0, [pc, #108]	; (8001398 <MX_GPIO_Init+0x158>)
 800132c:	f001 f9c2 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001330:	f244 0381 	movw	r3, #16513	; 0x4081
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <MX_GPIO_Init+0x150>)
 800134a:	f001 f9b3 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800134e:	2340      	movs	r3, #64	; 0x40
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <MX_GPIO_Init+0x154>)
 8001366:	f001 f9a5 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_GPIO_Init+0x154>)
 800137e:	f001 f999 	bl	80026b4 <HAL_GPIO_Init>

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	; 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40020400 	.word	0x40020400
 8001394:	40021800 	.word	0x40021800
 8001398:	40020800 	.word	0x40020800

0800139c <ILS_Init>:

/*=====[Implementations of public functions]=================================*/

// Configura la estructura de datos del Identificador
void ILS_Init (t_ILSdata* iData, uint32_t n, uint32_t ts_Ms, void (*pfR)(float32_t*))
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
	iData->N = n;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	609a      	str	r2, [r3, #8]
	iData->ts_Ms = ts_Ms;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	601a      	str	r2, [r3, #0]
	iData->p_receive = pfR;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]
	iData->i = 2;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2202      	movs	r2, #2
 80013c0:	60da      	str	r2, [r3, #12]
    *                          matrix structure.
    * @param[in]     nRows     number of rows in the matrix.
    * @param[in]     nColumns  number of columns in the matrix.
    * @param[in]     pData     points to the matrix data array.
    */
	arm_mat_init_f32(&Y, iData->N, 1, iData->buffer_Y);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	b299      	uxth	r1, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80013ce:	3304      	adds	r3, #4
 80013d0:	2201      	movs	r2, #1
 80013d2:	482d      	ldr	r0, [pc, #180]	; (8001488 <ILS_Init+0xec>)
 80013d4:	f005 fbd4 	bl	8006b80 <arm_mat_init_f32>
	arm_mat_init_f32(&T, M_SIZE, 1, iData->buffer_T);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3314      	adds	r3, #20
 80013dc:	2201      	movs	r2, #1
 80013de:	2105      	movs	r1, #5
 80013e0:	482a      	ldr	r0, [pc, #168]	; (800148c <ILS_Init+0xf0>)
 80013e2:	f005 fbcd 	bl	8006b80 <arm_mat_init_f32>
	arm_mat_init_f32(&F, iData->N, M_SIZE, iData->buffer_F);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	b299      	uxth	r1, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3328      	adds	r3, #40	; 0x28
 80013f0:	2205      	movs	r2, #5
 80013f2:	4827      	ldr	r0, [pc, #156]	; (8001490 <ILS_Init+0xf4>)
 80013f4:	f005 fbc4 	bl	8006b80 <arm_mat_init_f32>
	arm_mat_init_f32(&FT, M_SIZE, iData->N, iData->buffer_FT);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f603 73c8 	addw	r3, r3, #4040	; 0xfc8
 8001404:	2105      	movs	r1, #5
 8001406:	4823      	ldr	r0, [pc, #140]	; (8001494 <ILS_Init+0xf8>)
 8001408:	f005 fbba 	bl	8006b80 <arm_mat_init_f32>
	arm_mat_init_f32(&aux0, M_SIZE, M_SIZE, iData->buffer_aux0);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8001412:	3308      	adds	r3, #8
 8001414:	2205      	movs	r2, #5
 8001416:	2105      	movs	r1, #5
 8001418:	481f      	ldr	r0, [pc, #124]	; (8001498 <ILS_Init+0xfc>)
 800141a:	f005 fbb1 	bl	8006b80 <arm_mat_init_f32>
	arm_mat_init_f32(&aux1, M_SIZE, M_SIZE, iData->buffer_aux1);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f503 53fe 	add.w	r3, r3, #8128	; 0x1fc0
 8001424:	330c      	adds	r3, #12
 8001426:	2205      	movs	r2, #5
 8001428:	2105      	movs	r1, #5
 800142a:	481c      	ldr	r0, [pc, #112]	; (800149c <ILS_Init+0x100>)
 800142c:	f005 fba8 	bl	8006b80 <arm_mat_init_f32>
	arm_mat_init_f32(&aux2, M_SIZE, 1, iData->buffer_aux2);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001436:	3330      	adds	r3, #48	; 0x30
 8001438:	2201      	movs	r2, #1
 800143a:	2105      	movs	r1, #5
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <ILS_Init+0x104>)
 800143e:	f005 fb9f 	bl	8006b80 <arm_mat_init_f32>

	// Valores iniciales
	iData->buffer_Y[1] = 0;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001448:	461a      	mov	r2, r3
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	6493      	str	r3, [r2, #72]	; 0x48
	iData->buffer_Y[0] = 0;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001456:	461a      	mov	r2, r3
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
	iData->buffer_U[1] = 0;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001464:	461a      	mov	r2, r3
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	f8c2 3368 	str.w	r3, [r2, #872]	; 0x368
	iData->buffer_U[0] = 0;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001474:	461a      	mov	r2, r3
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000e8 	.word	0x200000e8
 800148c:	200000f0 	.word	0x200000f0
 8001490:	200000f8 	.word	0x200000f8
 8001494:	20000100 	.word	0x20000100
 8001498:	20000108 	.word	0x20000108
 800149c:	20000110 	.word	0x20000110
 80014a0:	20000118 	.word	0x20000118

080014a4 <ILS_Run>:

// Ejecución recurrente del Identificador
void ILS_Run(t_ILSdata* iData)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	float32_t buffer[2];

	iData->p_receive(buffer);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	4610      	mov	r0, r2
 80014b6:	4798      	blx	r3
	iData->buffer_U[iData->i] = buffer[0];
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	601a      	str	r2, [r3, #0]
	iData->buffer_Y[iData->i] = buffer[1];
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3304      	adds	r3, #4
 80014de:	601a      	str	r2, [r3, #0]

	iData->buffer_F[(iData->i*5)+0] = iData->buffer_Y[iData->i-1];
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	1e58      	subs	r0, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	f500 6201 	add.w	r2, r0, #2064	; 0x810
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	440a      	add	r2, r1
 80014fa:	3204      	adds	r2, #4
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	330a      	adds	r3, #10
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	601a      	str	r2, [r3, #0]
	iData->buffer_F[(iData->i*5)+1] = iData->buffer_Y[iData->i-2];
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	1e98      	subs	r0, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3301      	adds	r3, #1
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f500 6201 	add.w	r2, r0, #2064	; 0x810
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	440a      	add	r2, r1
 8001524:	3204      	adds	r2, #4
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	330a      	adds	r3, #10
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	601a      	str	r2, [r3, #0]
	iData->buffer_F[(iData->i*5)+2] = iData->buffer_U[iData->i];
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68d8      	ldr	r0, [r3, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3302      	adds	r3, #2
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f600 02d8 	addw	r2, r0, #2264	; 0x8d8
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	440a      	add	r2, r1
 800154c:	3204      	adds	r2, #4
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	330a      	adds	r3, #10
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	601a      	str	r2, [r3, #0]
	iData->buffer_F[(iData->i*5)+3] = iData->buffer_U[iData->i-1];
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3303      	adds	r3, #3
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	f600 02d8 	addw	r2, r0, #2264	; 0x8d8
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	440a      	add	r2, r1
 8001576:	3204      	adds	r2, #4
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	330a      	adds	r3, #10
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	601a      	str	r2, [r3, #0]
	iData->buffer_F[(iData->i*5)+4] = iData->buffer_U[iData->i-2];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	1e98      	subs	r0, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3304      	adds	r3, #4
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f600 02d8 	addw	r2, r0, #2264	; 0x8d8
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	440a      	add	r2, r1
 80015a0:	3204      	adds	r2, #4
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	330a      	adds	r3, #10
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	601a      	str	r2, [r3, #0]

	if (iData->i == (iData->N - 1))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d152      	bne.n	8001662 <ILS_Run+0x1be>
	{
		// Cálculo de matrices traspuestas
		arm_mat_trans_f32(&F, &FT);
 80015bc:	492d      	ldr	r1, [pc, #180]	; (8001674 <ILS_Run+0x1d0>)
 80015be:	482e      	ldr	r0, [pc, #184]	; (8001678 <ILS_Run+0x1d4>)
 80015c0:	f005 f874 	bl	80066ac <arm_mat_trans_f32>

	    // Cálculo de Theta
		arm_mat_mult_f32(&FT, &F, &aux0);
 80015c4:	4a2d      	ldr	r2, [pc, #180]	; (800167c <ILS_Run+0x1d8>)
 80015c6:	492c      	ldr	r1, [pc, #176]	; (8001678 <ILS_Run+0x1d4>)
 80015c8:	482a      	ldr	r0, [pc, #168]	; (8001674 <ILS_Run+0x1d0>)
 80015ca:	f005 f8e3 	bl	8006794 <arm_mat_mult_f32>
		arm_mat_inverse_f32(&aux0, &aux1);
 80015ce:	492c      	ldr	r1, [pc, #176]	; (8001680 <ILS_Run+0x1dc>)
 80015d0:	482a      	ldr	r0, [pc, #168]	; (800167c <ILS_Run+0x1d8>)
 80015d2:	f005 f985 	bl	80068e0 <arm_mat_inverse_f32>
		arm_mat_mult_f32(&FT, &Y, &aux2);
 80015d6:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <ILS_Run+0x1e0>)
 80015d8:	492b      	ldr	r1, [pc, #172]	; (8001688 <ILS_Run+0x1e4>)
 80015da:	4826      	ldr	r0, [pc, #152]	; (8001674 <ILS_Run+0x1d0>)
 80015dc:	f005 f8da 	bl	8006794 <arm_mat_mult_f32>
		arm_mat_mult_f32(&aux1, &aux2, &T);
 80015e0:	4a2a      	ldr	r2, [pc, #168]	; (800168c <ILS_Run+0x1e8>)
 80015e2:	4928      	ldr	r1, [pc, #160]	; (8001684 <ILS_Run+0x1e0>)
 80015e4:	4826      	ldr	r0, [pc, #152]	; (8001680 <ILS_Run+0x1dc>)
 80015e6:	f005 f8d5 	bl	8006794 <arm_mat_mult_f32>
		iData->buffer_Y[1] = iData->buffer_Y[iData->i];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3304      	adds	r3, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001602:	6493      	str	r3, [r2, #72]	; 0x48
		iData->buffer_Y[0] = iData->buffer_Y[iData->i-1];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	3b01      	subs	r3, #1
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3304      	adds	r3, #4
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800161e:	6453      	str	r3, [r2, #68]	; 0x44
		iData->buffer_U[1] = iData->buffer_U[iData->i];
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3304      	adds	r3, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001638:	f8c2 3368 	str.w	r3, [r2, #872]	; 0x368
		iData->buffer_U[0] = iData->buffer_U[iData->i-1];
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	3b01      	subs	r3, #1
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001656:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
		iData->i = 2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2202      	movs	r2, #2
 800165e:	60da      	str	r2, [r3, #12]
	}
	else 
    {
        iData->i++;
    }
}
 8001660:	e004      	b.n	800166c <ILS_Run+0x1c8>
        iData->i++;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000100 	.word	0x20000100
 8001678:	200000f8 	.word	0x200000f8
 800167c:	20000108 	.word	0x20000108
 8001680:	20000110 	.word	0x20000110
 8001684:	20000118 	.word	0x20000118
 8001688:	200000e8 	.word	0x200000e8
 800168c:	200000f0 	.word	0x200000f0

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f000 fa7c 	bl	8001b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f822 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f7ff fdd0 	bl	8001240 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016a0:	f000 f9da 	bl	8001a58 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80016a4:	f7ff fcb2 	bl	800100c <MX_ADC1_Init>
  MX_DAC_Init();
 80016a8:	f7ff fd46 	bl	8001138 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  tILS1 = (t_ILSdata*) pvPortMalloc (sizeof(t_ILSdata));
 80016ac:	f242 6084 	movw	r0, #9860	; 0x2684
 80016b0:	f004 fe12 	bl	80062d8 <pvPortMalloc>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <main+0x48>)
 80016b8:	6013      	str	r3, [r2, #0]
  ILS_Init(tILS1, 100, 20, receiveData);
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <main+0x48>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <main+0x4c>)
 80016c0:	2214      	movs	r2, #20
 80016c2:	2164      	movs	r1, #100	; 0x64
 80016c4:	f7ff fe6a 	bl	800139c <ILS_Init>

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80016c8:	f002 fa48 	bl	8003b5c <osKernelInitialize>
  MX_FREERTOS_Init();
 80016cc:	f7ff fda2 	bl	8001214 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016d0:	f002 fa68 	bl	8003ba4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x44>
 80016d6:	bf00      	nop
 80016d8:	20000120 	.word	0x20000120
 80016dc:	08000e19 	.word	0x08000e19

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2230      	movs	r2, #48	; 0x30
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 fc57 	bl	8006fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a27      	ldr	r2, [pc, #156]	; (80017ac <SystemClock_Config+0xcc>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <SystemClock_Config+0xcc>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <SystemClock_Config+0xd0>)
 800172a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <SystemClock_Config+0xd0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001740:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001754:	23a8      	movs	r3, #168	; 0xa8
 8001756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800175c:	2307      	movs	r3, #7
 800175e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4618      	mov	r0, r3
 8001766:	f001 f96b 	bl	8002a40 <HAL_RCC_OscConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001770:	f000 f820 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	230f      	movs	r3, #15
 8001776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001778:	2302      	movs	r3, #2
 800177a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2105      	movs	r1, #5
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fbcc 	bl	8002f30 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800179e:	f000 f809 	bl	80017b4 <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3750      	adds	r7, #80	; 0x50
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_MspInit+0x54>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_MspInit+0x54>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x54>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_MspInit+0x54>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_MspInit+0x54>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_MspInit+0x54>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	210f      	movs	r1, #15
 8001802:	f06f 0001 	mvn.w	r0, #1
 8001806:	f000 fe44 	bl	8002492 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 f9f4 	bl	8001c34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800184c:	f003 fec8 	bl	80055e0 <xTaskGetSchedulerState>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001856:	f004 fcaf 	bl	80061b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_kill>:

int _kill(int pid, int sig)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001878:	f005 fc38 	bl	80070ec <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	2216      	movs	r2, #22
 8001880:	601a      	str	r2, [r3, #0]
  return -1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_exit>:

void _exit (int status)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001896:	f04f 31ff 	mov.w	r1, #4294967295
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffe7 	bl	800186e <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a0:	e7fe      	b.n	80018a0 <_exit+0x12>

080018a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e00a      	b.n	80018ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b4:	f3af 8000 	nop.w
 80018b8:	4601      	mov	r1, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	b2ca      	uxtb	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbf0      	blt.n	80018b4 <_read+0x12>
  }

  return len;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e009      	b.n	8001902 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60ba      	str	r2, [r7, #8]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f888 	bl	8001a0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	dbf1      	blt.n	80018ee <_write+0x12>
  }
  return len;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_close>:

int _close(int file)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193c:	605a      	str	r2, [r3, #4]
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_isatty>:

int _isatty(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f005 fb9e 	bl	80070ec <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20030000 	.word	0x20030000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	20000124 	.word	0x20000124
 80019e4:	20004ca8 	.word	0x20004ca8

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__io_putchar>:


UART_HandleTypeDef huart3;

PUTCHAR_PROTOTYPE
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001a14:	1d39      	adds	r1, r7, #4
 8001a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <__io_putchar+0x20>)
 8001a1e:	f001 fcf4 	bl	800340a <HAL_UART_Transmit>

	return ch;
 8001a22:	687b      	ldr	r3, [r7, #4]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000128 	.word	0x20000128

08001a30 <vPrintNewLine>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vPrintNewLine( void )
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	char newLineChars[2] = {13, 10};
 8001a36:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001a3a:	80bb      	strh	r3, [r7, #4]

	HAL_UART_Transmit(&huart3, (uint8_t *)newLineChars, 2, 0xFFFF);
 8001a3c:	1d39      	adds	r1, r7, #4
 8001a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a42:	2202      	movs	r2, #2
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <vPrintNewLine+0x24>)
 8001a46:	f001 fce0 	bl	800340a <HAL_UART_Transmit>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000128 	.word	0x20000128

08001a58 <MX_USART3_UART_Init>:
/*-----------------------------------------------------------*/

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <MX_USART3_UART_Init+0x50>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_USART3_UART_Init+0x4c>)
 8001a90:	f001 fc6e 	bl	8003370 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a9a:	f7ff fe8b 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000128 	.word	0x20000128
 8001aa8:	40004800 	.word	0x40004800

08001aac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d12c      	bne.n	8001b28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_UART_MspInit+0x8c>)
 8001b24:	f000 fdc6 	bl	80026b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40004800 	.word	0x40004800
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020c00 	.word	0x40020c00

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b58:	4c0b      	ldr	r4, [pc, #44]	; (8001b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b66:	f7ff ff3f 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f005 fac5 	bl	80070f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff fd8f 	bl	8001690 <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b80:	08007e64 	.word	0x08007e64
  ldr r2, =_sbss
 8001b84:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b88:	20004ca4 	.word	0x20004ca4

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>
	...

08001b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_Init+0x40>)
 8001b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_Init+0x40>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_Init+0x40>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 fc5f 	bl	800247c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fdfc 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fc69 	bl	80024ca <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 fc3f 	bl	8002492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	2000016c 	.word	0x2000016c

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000016c 	.word	0x2000016c

08001c74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e033      	b.n	8001cf2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fa0c 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cba:	f023 0302 	bic.w	r3, r3, #2
 8001cbe:	f043 0202 	orr.w	r2, r3, #2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fa2a 	bl	8002120 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ce2:	e001      	b.n	8001ce8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Start+0x1a>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e0b2      	b.n	8001e7c <HAL_ADC_Start+0x180>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d018      	beq.n	8001d5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3c:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <HAL_ADC_Start+0x18c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_ADC_Start+0x190>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9a      	lsrs	r2, r3, #18
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d17a      	bne.n	8001e62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001daa:	d106      	bne.n	8001dba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	f023 0206 	bic.w	r2, r3, #6
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc8:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_ADC_Start+0x194>)
 8001dca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d12a      	bne.n	8001e38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <HAL_ADC_Start+0x198>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d015      	beq.n	8001e18 <HAL_ADC_Start+0x11c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <HAL_ADC_Start+0x19c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_Start+0x106>
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_ADC_Start+0x194>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <HAL_ADC_Start+0x1a0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d136      	bne.n	8001e7a <HAL_ADC_Start+0x17e>
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_ADC_Start+0x194>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d130      	bne.n	8001e7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d129      	bne.n	8001e7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	e020      	b.n	8001e7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_ADC_Start+0x198>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11b      	bne.n	8001e7a <HAL_ADC_Start+0x17e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d114      	bne.n	8001e7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e00b      	b.n	8001e7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	431bde83 	.word	0x431bde83
 8001e90:	40012300 	.word	0x40012300
 8001e94:	40012000 	.word	0x40012000
 8001e98:	40012100 	.word	0x40012100
 8001e9c:	40012200 	.word	0x40012200

08001ea0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1c>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e113      	b.n	8002100 <HAL_ADC_ConfigChannel+0x244>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b09      	cmp	r3, #9
 8001ee6:	d925      	bls.n	8001f34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68d9      	ldr	r1, [r3, #12]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1e      	subs	r3, #30
 8001efe:	2207      	movs	r2, #7
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43da      	mvns	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68d9      	ldr	r1, [r3, #12]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	4603      	mov	r3, r0
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4403      	add	r3, r0
 8001f26:	3b1e      	subs	r3, #30
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	e022      	b.n	8001f7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	2207      	movs	r2, #7
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	400a      	ands	r2, r1
 8001f56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4403      	add	r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d824      	bhi.n	8001fcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	3b05      	subs	r3, #5
 8001f94:	221f      	movs	r2, #31
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b05      	subs	r3, #5
 8001fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fca:	e04c      	b.n	8002066 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d824      	bhi.n	800201e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b23      	subs	r3, #35	; 0x23
 8001fe6:	221f      	movs	r2, #31
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43da      	mvns	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	3b23      	subs	r3, #35	; 0x23
 8002010:	fa00 f203 	lsl.w	r2, r0, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
 800201c:	e023      	b.n	8002066 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b41      	subs	r3, #65	; 0x41
 8002030:	221f      	movs	r2, #31
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b41      	subs	r3, #65	; 0x41
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_ADC_ConfigChannel+0x250>)
 8002068:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a28      	ldr	r2, [pc, #160]	; (8002110 <HAL_ADC_ConfigChannel+0x254>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10f      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1d8>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b12      	cmp	r3, #18
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_ADC_ConfigChannel+0x254>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12b      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x23a>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_ADC_ConfigChannel+0x258>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0x1f4>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b11      	cmp	r3, #17
 80020ae:	d122      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_ADC_ConfigChannel+0x258>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d111      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_ADC_ConfigChannel+0x25c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_ADC_ConfigChannel+0x260>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	0c9a      	lsrs	r2, r3, #18
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020e8:	e002      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f9      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40012300 	.word	0x40012300
 8002110:	40012000 	.word	0x40012000
 8002114:	10000012 	.word	0x10000012
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002128:	4b79      	ldr	r3, [pc, #484]	; (8002310 <ADC_Init+0x1f0>)
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	021a      	lsls	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	4a58      	ldr	r2, [pc, #352]	; (8002314 <ADC_Init+0x1f4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	e00f      	b.n	800221e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800221c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0202 	bic.w	r2, r2, #2
 800222c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e1b      	ldrb	r3, [r3, #24]
 8002238:	005a      	lsls	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800226a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	3b01      	subs	r3, #1
 8002278:	035a      	lsls	r2, r3, #13
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	e007      	b.n	8002294 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	051a      	lsls	r2, r3, #20
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022d6:	025a      	lsls	r2, r3, #9
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	029a      	lsls	r2, r3, #10
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40012300 	.word	0x40012300
 8002314:	0f000001 	.word	0x0f000001

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	; (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	; (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002448:	d301      	bcc.n	800244e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <SysTick_Config+0x40>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002456:	210f      	movs	r1, #15
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f7ff ff8e 	bl	800237c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <SysTick_Config+0x40>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SysTick_Config+0x40>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	e000e010 	.word	0xe000e010

0800247c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff47 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a4:	f7ff ff5c 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6978      	ldr	r0, [r7, #20]
 80024b0:	f7ff ff8e 	bl	80023d0 <NVIC_EncodePriority>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff5d 	bl	800237c <__NVIC_SetPriority>
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffb0 	bl	8002438 <SysTick_Config>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e014      	b.n	800251e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	791b      	ldrb	r3, [r3, #4]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe fe41 	bl	800118c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	795b      	ldrb	r3, [r3, #5]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_DAC_Start+0x16>
 8002538:	2302      	movs	r3, #2
 800253a:	e040      	b.n	80025be <HAL_DAC_Start+0x98>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2201      	movs	r2, #1
 8002556:	409a      	lsls	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002570:	2b3c      	cmp	r3, #60	; 0x3c
 8002572:	d11d      	bne.n	80025b0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	e014      	b.n	80025b0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	213c      	movs	r1, #60	; 0x3c
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	429a      	cmp	r2, r3
 800259e:	d107      	bne.n	80025b0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0202 	orr.w	r2, r2, #2
 80025ae:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b087      	sub	sp, #28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	3308      	adds	r3, #8
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e004      	b.n	80025fe <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	3314      	adds	r3, #20
 80025fc:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	795b      	ldrb	r3, [r3, #5]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_DAC_ConfigChannel+0x18>
 8002628:	2302      	movs	r3, #2
 800262a:	e03c      	b.n	80026a6 <HAL_DAC_ConfigChannel+0x92>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2202      	movs	r2, #2
 8002636:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	f640 72fe 	movw	r2, #4094	; 0xffe
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4013      	ands	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	22c0      	movs	r2, #192	; 0xc0
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e177      	b.n	80029c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	f040 8166 	bne.w	80029ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d005      	beq.n	8002706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	2b02      	cmp	r3, #2
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	69b9      	ldr	r1, [r7, #24]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80c0 	beq.w	80029ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_GPIO_Init+0x324>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_GPIO_Init+0x324>)
 8002844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_GPIO_Init+0x324>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002856:	4a61      	ldr	r2, [pc, #388]	; (80029dc <HAL_GPIO_Init+0x328>)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	220f      	movs	r2, #15
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_GPIO_Init+0x32c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d037      	beq.n	80028f2 <HAL_GPIO_Init+0x23e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <HAL_GPIO_Init+0x330>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d031      	beq.n	80028ee <HAL_GPIO_Init+0x23a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a56      	ldr	r2, [pc, #344]	; (80029e8 <HAL_GPIO_Init+0x334>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02b      	beq.n	80028ea <HAL_GPIO_Init+0x236>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a55      	ldr	r2, [pc, #340]	; (80029ec <HAL_GPIO_Init+0x338>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d025      	beq.n	80028e6 <HAL_GPIO_Init+0x232>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a54      	ldr	r2, [pc, #336]	; (80029f0 <HAL_GPIO_Init+0x33c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_GPIO_Init+0x22e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a53      	ldr	r2, [pc, #332]	; (80029f4 <HAL_GPIO_Init+0x340>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_Init+0x22a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x344>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_GPIO_Init+0x348>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_GPIO_Init+0x34c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x350>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_Init+0x21a>
 80028ca:	2309      	movs	r3, #9
 80028cc:	e012      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028ce:	230a      	movs	r3, #10
 80028d0:	e010      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028d2:	2308      	movs	r3, #8
 80028d4:	e00e      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028d6:	2307      	movs	r3, #7
 80028d8:	e00c      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028da:	2306      	movs	r3, #6
 80028dc:	e00a      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028de:	2305      	movs	r3, #5
 80028e0:	e008      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028e2:	2304      	movs	r3, #4
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e004      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_GPIO_Init+0x240>
 80028f2:	2300      	movs	r3, #0
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	f002 0203 	and.w	r2, r2, #3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4093      	lsls	r3, r2
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002904:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_GPIO_Init+0x328>)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002936:	4a34      	ldr	r2, [pc, #208]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_GPIO_Init+0x354>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002960:	4a29      	ldr	r2, [pc, #164]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800298a:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <HAL_GPIO_Init+0x354>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_GPIO_Init+0x354>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_GPIO_Init+0x354>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3301      	adds	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b0f      	cmp	r3, #15
 80029c4:	f67f ae84 	bls.w	80026d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40021400 	.word	0x40021400
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40021c00 	.word	0x40021c00
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40022400 	.word	0x40022400
 8002a08:	40013c00 	.word	0x40013c00

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a28:	e003      	b.n	8002a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	619a      	str	r2, [r3, #24]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e267      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d075      	beq.n	8002b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5e:	4b88      	ldr	r3, [pc, #544]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d00c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6a:	4b85      	ldr	r3, [pc, #532]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d112      	bne.n	8002a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a76:	4b82      	ldr	r3, [pc, #520]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a82:	d10b      	bne.n	8002a9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	4b7e      	ldr	r3, [pc, #504]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d05b      	beq.n	8002b48 <HAL_RCC_OscConfig+0x108>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d157      	bne.n	8002b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e242      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d106      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x74>
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e01d      	b.n	8002af0 <HAL_RCC_OscConfig+0xb0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x98>
 8002abe:	4b70      	ldr	r3, [pc, #448]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6f      	ldr	r2, [pc, #444]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b6d      	ldr	r3, [pc, #436]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6c      	ldr	r2, [pc, #432]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xb0>
 8002ad8:	4b69      	ldr	r3, [pc, #420]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a68      	ldr	r2, [pc, #416]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff f8b0 	bl	8001c5c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b00:	f7ff f8ac 	bl	8001c5c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e207      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0xc0>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7ff f89c 	bl	8001c5c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b28:	f7ff f898 	bl	8001c5c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1f3      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0xe8>
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d063      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b56:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x152>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1c7      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4937      	ldr	r1, [pc, #220]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	e03a      	b.n	8002c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb0:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x244>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7ff f851 	bl	8001c5c <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7ff f84d 	bl	8001c5c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e1a8      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4925      	ldr	r1, [pc, #148]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x244>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7ff f830 	bl	8001c5c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c00:	f7ff f82c 	bl	8001c5c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e187      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d036      	beq.n	8002c98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d016      	beq.n	8002c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_RCC_OscConfig+0x248>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7ff f810 	bl	8001c5c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff f80c 	bl	8001c5c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e167      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x240>)
 8002c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x200>
 8002c5e:	e01b      	b.n	8002c98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_OscConfig+0x248>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fff9 	bl	8001c5c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	e00e      	b.n	8002c8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6e:	f7fe fff5 	bl	8001c5c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d907      	bls.n	8002c8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e150      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
 8002c80:	40023800 	.word	0x40023800
 8002c84:	42470000 	.word	0x42470000
 8002c88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ea      	bne.n	8002c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8097 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b81      	ldr	r3, [pc, #516]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a7c      	ldr	r2, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b7a      	ldr	r3, [pc, #488]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd6:	4b77      	ldr	r3, [pc, #476]	; (8002eb4 <HAL_RCC_OscConfig+0x474>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d118      	bne.n	8002d14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce2:	4b74      	ldr	r3, [pc, #464]	; (8002eb4 <HAL_RCC_OscConfig+0x474>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a73      	ldr	r2, [pc, #460]	; (8002eb4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cee:	f7fe ffb5 	bl	8001c5c <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf6:	f7fe ffb1 	bl	8001c5c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e10c      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x474>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d106      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2ea>
 8002d1c:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a63      	ldr	r2, [pc, #396]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
 8002d28:	e01c      	b.n	8002d64 <HAL_RCC_OscConfig+0x324>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x30c>
 8002d32:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a5e      	ldr	r2, [pc, #376]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	4b5c      	ldr	r3, [pc, #368]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a5b      	ldr	r2, [pc, #364]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0x324>
 8002d4c:	4b58      	ldr	r3, [pc, #352]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a57      	ldr	r2, [pc, #348]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a54      	ldr	r2, [pc, #336]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f023 0304 	bic.w	r3, r3, #4
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d015      	beq.n	8002d98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7fe ff76 	bl	8001c5c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe ff72 	bl	8001c5c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0cb      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ee      	beq.n	8002d74 <HAL_RCC_OscConfig+0x334>
 8002d96:	e014      	b.n	8002dc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d98:	f7fe ff60 	bl	8001c5c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe ff5c 	bl	8001c5c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0b5      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ee      	bne.n	8002da0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80a1 	beq.w	8002f20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dde:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d05c      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d141      	bne.n	8002e76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_RCC_OscConfig+0x478>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe ff30 	bl	8001c5c <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe ff2c 	bl	8001c5c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e087      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	019b      	lsls	r3, r3, #6
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	3b01      	subs	r3, #1
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	491b      	ldr	r1, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_RCC_OscConfig+0x478>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4e:	f7fe ff05 	bl	8001c5c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fe ff01 	bl	8001c5c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e05c      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x416>
 8002e74:	e054      	b.n	8002f20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x478>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe feee 	bl	8001c5c <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe feea 	bl	8001c5c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e045      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCC_OscConfig+0x470>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x444>
 8002ea2:	e03d      	b.n	8002f20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e038      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_OscConfig+0x4ec>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d028      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d121      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d11a      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eec:	4013      	ands	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d111      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	3b01      	subs	r3, #1
 8002f06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0cc      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d90c      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d044      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d119      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e06f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e067      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4934      	ldr	r1, [pc, #208]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003020:	f7fe fe1c 	bl	8001c5c <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7fe fe18 	bl	8001c5c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d20c      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fd7c 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023c00 	.word	0x40023c00
 80030ec:	40023800 	.word	0x40023800
 80030f0:	08007d5c 	.word	0x08007d5c
 80030f4:	20000000 	.word	0x20000000
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003100:	b094      	sub	sp, #80	; 0x50
 8003102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
 8003108:	2300      	movs	r3, #0
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800310c:	2300      	movs	r3, #0
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003114:	4b79      	ldr	r3, [pc, #484]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d00d      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x40>
 8003120:	2b08      	cmp	r3, #8
 8003122:	f200 80e1 	bhi.w	80032e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x34>
 800312a:	2b04      	cmp	r3, #4
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x3a>
 800312e:	e0db      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b73      	ldr	r3, [pc, #460]	; (8003300 <HAL_RCC_GetSysClockFreq+0x204>)
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003134:	e0db      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCC_GetSysClockFreq+0x208>)
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313a:	e0d8      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800313c:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d063      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2200      	movs	r2, #0
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
 800315c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
 8003166:	2300      	movs	r3, #0
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
 800316a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800316e:	4622      	mov	r2, r4
 8003170:	462b      	mov	r3, r5
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	0159      	lsls	r1, r3, #5
 800317c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003180:	0150      	lsls	r0, r2, #5
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4621      	mov	r1, r4
 8003188:	1a51      	subs	r1, r2, r1
 800318a:	6139      	str	r1, [r7, #16]
 800318c:	4629      	mov	r1, r5
 800318e:	eb63 0301 	sbc.w	r3, r3, r1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a0:	4659      	mov	r1, fp
 80031a2:	018b      	lsls	r3, r1, #6
 80031a4:	4651      	mov	r1, sl
 80031a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031aa:	4651      	mov	r1, sl
 80031ac:	018a      	lsls	r2, r1, #6
 80031ae:	4651      	mov	r1, sl
 80031b0:	ebb2 0801 	subs.w	r8, r2, r1
 80031b4:	4659      	mov	r1, fp
 80031b6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ce:	4690      	mov	r8, r2
 80031d0:	4699      	mov	r9, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	eb18 0303 	adds.w	r3, r8, r3
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	462b      	mov	r3, r5
 80031dc:	eb49 0303 	adc.w	r3, r9, r3
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ee:	4629      	mov	r1, r5
 80031f0:	024b      	lsls	r3, r1, #9
 80031f2:	4621      	mov	r1, r4
 80031f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031f8:	4621      	mov	r1, r4
 80031fa:	024a      	lsls	r2, r1, #9
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003202:	2200      	movs	r2, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
 8003206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800320c:	f7fd fc5e 	bl	8000acc <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4613      	mov	r3, r2
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003218:	e058      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	2200      	movs	r2, #0
 8003222:	4618      	mov	r0, r3
 8003224:	4611      	mov	r1, r2
 8003226:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
 8003230:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	f04f 0000 	mov.w	r0, #0
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	0159      	lsls	r1, r3, #5
 8003242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003246:	0150      	lsls	r0, r2, #5
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4641      	mov	r1, r8
 800324e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003252:	4649      	mov	r1, r9
 8003254:	eb63 0b01 	sbc.w	fp, r3, r1
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003264:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003268:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800326c:	ebb2 040a 	subs.w	r4, r2, sl
 8003270:	eb63 050b 	sbc.w	r5, r3, fp
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	00eb      	lsls	r3, r5, #3
 800327e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003282:	00e2      	lsls	r2, r4, #3
 8003284:	4614      	mov	r4, r2
 8003286:	461d      	mov	r5, r3
 8003288:	4643      	mov	r3, r8
 800328a:	18e3      	adds	r3, r4, r3
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	464b      	mov	r3, r9
 8003290:	eb45 0303 	adc.w	r3, r5, r3
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032a2:	4629      	mov	r1, r5
 80032a4:	028b      	lsls	r3, r1, #10
 80032a6:	4621      	mov	r1, r4
 80032a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ac:	4621      	mov	r1, r4
 80032ae:	028a      	lsls	r2, r1, #10
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	61fa      	str	r2, [r7, #28]
 80032bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c0:	f7fd fc04 	bl	8000acc <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e6:	e002      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3750      	adds	r7, #80	; 0x50
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	00f42400 	.word	0x00f42400
 8003304:	007a1200 	.word	0x007a1200

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_RCC_GetHCLKFreq+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000000 	.word	0x20000000

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003324:	f7ff fff0 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0a9b      	lsrs	r3, r3, #10
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	08007d6c 	.word	0x08007d6c

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800334c:	f7ff ffdc 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	0b5b      	lsrs	r3, r3, #13
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	08007d6c 	.word	0x08007d6c

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e03f      	b.n	8003402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fb88 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f929 	bl	800360c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b08a      	sub	sp, #40	; 0x28
 800340e:	af02      	add	r7, sp, #8
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b20      	cmp	r3, #32
 8003428:	d17c      	bne.n	8003524 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_UART_Transmit+0x2c>
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e075      	b.n	8003526 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_UART_Transmit+0x3e>
 8003444:	2302      	movs	r3, #2
 8003446:	e06e      	b.n	8003526 <HAL_UART_Transmit+0x11c>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2221      	movs	r2, #33	; 0x21
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800345e:	f7fe fbfd 	bl	8001c5c <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	d108      	bne.n	800348c <HAL_UART_Transmit+0x82>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e003      	b.n	8003494 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800349c:	e02a      	b.n	80034f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f840 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e036      	b.n	8003526 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	3302      	adds	r3, #2
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e007      	b.n	80034e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1cf      	bne.n	800349e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	2140      	movs	r1, #64	; 0x40
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f810 	bl	800352e <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e006      	b.n	8003526 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b090      	sub	sp, #64	; 0x40
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	e050      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d04c      	beq.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <UART_WaitOnFlagUntilTimeout+0x30>
 800354e:	f7fe fb85 	bl	8001c5c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800355a:	429a      	cmp	r2, r3
 800355c:	d241      	bcs.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800357e:	637a      	str	r2, [r7, #52]	; 0x34
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e5      	bne.n	800355e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3314      	adds	r3, #20
 8003598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	613b      	str	r3, [r7, #16]
   return(result);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3314      	adds	r3, #20
 80035b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b2:	623a      	str	r2, [r7, #32]
 80035b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	69f9      	ldr	r1, [r7, #28]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e5      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e00f      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	bf0c      	ite	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	2300      	movne	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d09f      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3740      	adds	r7, #64	; 0x40
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b0c0      	sub	sp, #256	; 0x100
 8003612:	af00      	add	r7, sp, #0
 8003614:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	68d9      	ldr	r1, [r3, #12]
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	ea40 0301 	orr.w	r3, r0, r1
 8003634:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	431a      	orrs	r2, r3
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	431a      	orrs	r2, r3
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003664:	f021 010c 	bic.w	r1, r1, #12
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003672:	430b      	orrs	r3, r1
 8003674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003686:	6999      	ldr	r1, [r3, #24]
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	ea40 0301 	orr.w	r3, r0, r1
 8003692:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b8f      	ldr	r3, [pc, #572]	; (80038d8 <UART_SetConfig+0x2cc>)
 800369c:	429a      	cmp	r2, r3
 800369e:	d005      	beq.n	80036ac <UART_SetConfig+0xa0>
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b8d      	ldr	r3, [pc, #564]	; (80038dc <UART_SetConfig+0x2d0>)
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d104      	bne.n	80036b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036ac:	f7ff fe4c 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 80036b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036b4:	e003      	b.n	80036be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036b6:	f7ff fe33 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 80036ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c8:	f040 810c 	bne.w	80038e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036de:	4622      	mov	r2, r4
 80036e0:	462b      	mov	r3, r5
 80036e2:	1891      	adds	r1, r2, r2
 80036e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80036e6:	415b      	adcs	r3, r3
 80036e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036ee:	4621      	mov	r1, r4
 80036f0:	eb12 0801 	adds.w	r8, r2, r1
 80036f4:	4629      	mov	r1, r5
 80036f6:	eb43 0901 	adc.w	r9, r3, r1
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800370a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800370e:	4690      	mov	r8, r2
 8003710:	4699      	mov	r9, r3
 8003712:	4623      	mov	r3, r4
 8003714:	eb18 0303 	adds.w	r3, r8, r3
 8003718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800371c:	462b      	mov	r3, r5
 800371e:	eb49 0303 	adc.w	r3, r9, r3
 8003722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003732:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800373a:	460b      	mov	r3, r1
 800373c:	18db      	adds	r3, r3, r3
 800373e:	653b      	str	r3, [r7, #80]	; 0x50
 8003740:	4613      	mov	r3, r2
 8003742:	eb42 0303 	adc.w	r3, r2, r3
 8003746:	657b      	str	r3, [r7, #84]	; 0x54
 8003748:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800374c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003750:	f7fd f9bc 	bl	8000acc <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <UART_SetConfig+0x2d4>)
 800375a:	fba3 2302 	umull	r2, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	011c      	lsls	r4, r3, #4
 8003762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003766:	2200      	movs	r2, #0
 8003768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800376c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003770:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003774:	4642      	mov	r2, r8
 8003776:	464b      	mov	r3, r9
 8003778:	1891      	adds	r1, r2, r2
 800377a:	64b9      	str	r1, [r7, #72]	; 0x48
 800377c:	415b      	adcs	r3, r3
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003780:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003784:	4641      	mov	r1, r8
 8003786:	eb12 0a01 	adds.w	sl, r2, r1
 800378a:	4649      	mov	r1, r9
 800378c:	eb43 0b01 	adc.w	fp, r3, r1
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800379c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037a4:	4692      	mov	sl, r2
 80037a6:	469b      	mov	fp, r3
 80037a8:	4643      	mov	r3, r8
 80037aa:	eb1a 0303 	adds.w	r3, sl, r3
 80037ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037b2:	464b      	mov	r3, r9
 80037b4:	eb4b 0303 	adc.w	r3, fp, r3
 80037b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037d0:	460b      	mov	r3, r1
 80037d2:	18db      	adds	r3, r3, r3
 80037d4:	643b      	str	r3, [r7, #64]	; 0x40
 80037d6:	4613      	mov	r3, r2
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
 80037de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037e6:	f7fd f971 	bl	8000acc <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <UART_SetConfig+0x2d4>)
 80037f2:	fba3 2301 	umull	r2, r3, r3, r1
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2264      	movs	r2, #100	; 0x64
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	1acb      	subs	r3, r1, r3
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003806:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <UART_SetConfig+0x2d4>)
 8003808:	fba3 2302 	umull	r2, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003814:	441c      	add	r4, r3
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800381a:	2200      	movs	r2, #0
 800381c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003820:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003824:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003828:	4642      	mov	r2, r8
 800382a:	464b      	mov	r3, r9
 800382c:	1891      	adds	r1, r2, r2
 800382e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003830:	415b      	adcs	r3, r3
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003838:	4641      	mov	r1, r8
 800383a:	1851      	adds	r1, r2, r1
 800383c:	6339      	str	r1, [r7, #48]	; 0x30
 800383e:	4649      	mov	r1, r9
 8003840:	414b      	adcs	r3, r1
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003850:	4659      	mov	r1, fp
 8003852:	00cb      	lsls	r3, r1, #3
 8003854:	4651      	mov	r1, sl
 8003856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800385a:	4651      	mov	r1, sl
 800385c:	00ca      	lsls	r2, r1, #3
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	4603      	mov	r3, r0
 8003864:	4642      	mov	r2, r8
 8003866:	189b      	adds	r3, r3, r2
 8003868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800386c:	464b      	mov	r3, r9
 800386e:	460a      	mov	r2, r1
 8003870:	eb42 0303 	adc.w	r3, r2, r3
 8003874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003884:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003888:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800388c:	460b      	mov	r3, r1
 800388e:	18db      	adds	r3, r3, r3
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
 8003892:	4613      	mov	r3, r2
 8003894:	eb42 0303 	adc.w	r3, r2, r3
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800389e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038a2:	f7fd f913 	bl	8000acc <__aeabi_uldivmod>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <UART_SetConfig+0x2d4>)
 80038ac:	fba3 1302 	umull	r1, r3, r3, r2
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	2164      	movs	r1, #100	; 0x64
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	3332      	adds	r3, #50	; 0x32
 80038be:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <UART_SetConfig+0x2d4>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	f003 0207 	and.w	r2, r3, #7
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4422      	add	r2, r4
 80038d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038d4:	e106      	b.n	8003ae4 <UART_SetConfig+0x4d8>
 80038d6:	bf00      	nop
 80038d8:	40011000 	.word	0x40011000
 80038dc:	40011400 	.word	0x40011400
 80038e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038f6:	4642      	mov	r2, r8
 80038f8:	464b      	mov	r3, r9
 80038fa:	1891      	adds	r1, r2, r2
 80038fc:	6239      	str	r1, [r7, #32]
 80038fe:	415b      	adcs	r3, r3
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003906:	4641      	mov	r1, r8
 8003908:	1854      	adds	r4, r2, r1
 800390a:	4649      	mov	r1, r9
 800390c:	eb43 0501 	adc.w	r5, r3, r1
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	00eb      	lsls	r3, r5, #3
 800391a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391e:	00e2      	lsls	r2, r4, #3
 8003920:	4614      	mov	r4, r2
 8003922:	461d      	mov	r5, r3
 8003924:	4643      	mov	r3, r8
 8003926:	18e3      	adds	r3, r4, r3
 8003928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800392c:	464b      	mov	r3, r9
 800392e:	eb45 0303 	adc.w	r3, r5, r3
 8003932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003942:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003952:	4629      	mov	r1, r5
 8003954:	008b      	lsls	r3, r1, #2
 8003956:	4621      	mov	r1, r4
 8003958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395c:	4621      	mov	r1, r4
 800395e:	008a      	lsls	r2, r1, #2
 8003960:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003964:	f7fd f8b2 	bl	8000acc <__aeabi_uldivmod>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4b60      	ldr	r3, [pc, #384]	; (8003af0 <UART_SetConfig+0x4e4>)
 800396e:	fba3 2302 	umull	r2, r3, r3, r2
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	011c      	lsls	r4, r3, #4
 8003976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003980:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003984:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	1891      	adds	r1, r2, r2
 800398e:	61b9      	str	r1, [r7, #24]
 8003990:	415b      	adcs	r3, r3
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003998:	4641      	mov	r1, r8
 800399a:	1851      	adds	r1, r2, r1
 800399c:	6139      	str	r1, [r7, #16]
 800399e:	4649      	mov	r1, r9
 80039a0:	414b      	adcs	r3, r1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b0:	4659      	mov	r1, fp
 80039b2:	00cb      	lsls	r3, r1, #3
 80039b4:	4651      	mov	r1, sl
 80039b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ba:	4651      	mov	r1, sl
 80039bc:	00ca      	lsls	r2, r1, #3
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	4642      	mov	r2, r8
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039cc:	464b      	mov	r3, r9
 80039ce:	460a      	mov	r2, r1
 80039d0:	eb42 0303 	adc.w	r3, r2, r3
 80039d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80039e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039f0:	4649      	mov	r1, r9
 80039f2:	008b      	lsls	r3, r1, #2
 80039f4:	4641      	mov	r1, r8
 80039f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039fa:	4641      	mov	r1, r8
 80039fc:	008a      	lsls	r2, r1, #2
 80039fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a02:	f7fd f863 	bl	8000acc <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <UART_SetConfig+0x4e4>)
 8003a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2264      	movs	r2, #100	; 0x64
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	1acb      	subs	r3, r1, r3
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	3332      	adds	r3, #50	; 0x32
 8003a20:	4a33      	ldr	r2, [pc, #204]	; (8003af0 <UART_SetConfig+0x4e4>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	441c      	add	r4, r3
 8003a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a32:	2200      	movs	r2, #0
 8003a34:	673b      	str	r3, [r7, #112]	; 0x70
 8003a36:	677a      	str	r2, [r7, #116]	; 0x74
 8003a38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	415b      	adcs	r3, r3
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	1851      	adds	r1, r2, r1
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	4649      	mov	r1, r9
 8003a54:	414b      	adcs	r3, r1
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a64:	4659      	mov	r1, fp
 8003a66:	00cb      	lsls	r3, r1, #3
 8003a68:	4651      	mov	r1, sl
 8003a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a6e:	4651      	mov	r1, sl
 8003a70:	00ca      	lsls	r2, r1, #3
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	4642      	mov	r2, r8
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7e:	464b      	mov	r3, r9
 8003a80:	460a      	mov	r2, r1
 8003a82:	eb42 0303 	adc.w	r3, r2, r3
 8003a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
 8003a92:	667a      	str	r2, [r7, #100]	; 0x64
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	008b      	lsls	r3, r1, #2
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aaa:	4641      	mov	r1, r8
 8003aac:	008a      	lsls	r2, r1, #2
 8003aae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ab2:	f7fd f80b 	bl	8000acc <__aeabi_uldivmod>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <UART_SetConfig+0x4e4>)
 8003abc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2164      	movs	r1, #100	; 0x64
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	3332      	adds	r3, #50	; 0x32
 8003ace:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <UART_SetConfig+0x4e4>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	f003 020f 	and.w	r2, r3, #15
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4422      	add	r2, r4
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003aea:	46bd      	mov	sp, r7
 8003aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af0:	51eb851f 	.word	0x51eb851f

08003af4 <__NVIC_SetPriority>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	; (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f06f 0004 	mvn.w	r0, #4
 8003b52:	f7ff ffcf 	bl	8003af4 <__NVIC_SetPriority>
#endif
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b62:	f3ef 8305 	mrs	r3, IPSR
 8003b66:	603b      	str	r3, [r7, #0]
  return(result);
 8003b68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b6e:	f06f 0305 	mvn.w	r3, #5
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	e00c      	b.n	8003b90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <osKernelInitialize+0x44>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d105      	bne.n	8003b8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <osKernelInitialize+0x44>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	e002      	b.n	8003b90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b90:	687b      	ldr	r3, [r7, #4]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000170 	.word	0x20000170

08003ba4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003baa:	f3ef 8305 	mrs	r3, IPSR
 8003bae:	603b      	str	r3, [r7, #0]
  return(result);
 8003bb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bb6:	f06f 0305 	mvn.w	r3, #5
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e010      	b.n	8003be0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <osKernelStart+0x48>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d109      	bne.n	8003bda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bc6:	f7ff ffbf 	bl	8003b48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <osKernelStart+0x48>)
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003bd0:	f001 f8aa 	bl	8004d28 <vTaskStartScheduler>
      stat = osOK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	e002      	b.n	8003be0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003be0:	687b      	ldr	r3, [r7, #4]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000170 	.word	0x20000170

08003bf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08e      	sub	sp, #56	; 0x38
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c00:	f3ef 8305 	mrs	r3, IPSR
 8003c04:	617b      	str	r3, [r7, #20]
  return(result);
 8003c06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d17e      	bne.n	8003d0a <osThreadNew+0x11a>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d07b      	beq.n	8003d0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c16:	2318      	movs	r3, #24
 8003c18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d045      	beq.n	8003cb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <osThreadNew+0x48>
        name = attr->name;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <osThreadNew+0x6e>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b38      	cmp	r3, #56	; 0x38
 8003c50:	d805      	bhi.n	8003c5e <osThreadNew+0x6e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <osThreadNew+0x72>
        return (NULL);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e054      	b.n	8003d0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <osThreadNew+0xa8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2ba7      	cmp	r3, #167	; 0xa7
 8003c80:	d90a      	bls.n	8003c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <osThreadNew+0xa8>
        mem = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e010      	b.n	8003cba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10c      	bne.n	8003cba <osThreadNew+0xca>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d108      	bne.n	8003cba <osThreadNew+0xca>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <osThreadNew+0xca>
          mem = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e001      	b.n	8003cba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d110      	bne.n	8003ce2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cc8:	9202      	str	r2, [sp, #8]
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fdf0 	bl	80048bc <xTaskCreateStatic>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e013      	b.n	8003d0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d110      	bne.n	8003d0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	f107 0310 	add.w	r3, r7, #16
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fe3b 	bl	8004976 <xTaskCreate>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <osThreadNew+0x11a>
            hTask = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d0a:	693b      	ldr	r3, [r7, #16]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3728      	adds	r7, #40	; 0x28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <vApplicationGetIdleTaskMemory+0x30>)
 8003d2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	601a      	str	r2, [r3, #0]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000174 	.word	0x20000174
 8003d44:	2000021c 	.word	0x2000021c

08003d48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <vApplicationGetTimerTaskMemory+0x30>)
 8003d5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d66:	601a      	str	r2, [r3, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	2000041c 	.word	0x2000041c
 8003d78:	200004c4 	.word	0x200004c4

08003d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f103 0208 	add.w	r2, r3, #8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f103 0208 	add.w	r2, r3, #8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f103 0208 	add.w	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d103      	bne.n	8003e3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e00c      	b.n	8003e58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3308      	adds	r3, #8
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e002      	b.n	8003e4c <vListInsert+0x2e>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d2f6      	bcs.n	8003e46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6892      	ldr	r2, [r2, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d103      	bne.n	8003ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	1e5a      	subs	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f0e:	f002 f8c1 	bl	8006094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	441a      	add	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01a      	beq.n	8003fa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3310      	adds	r3, #16
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f973 	bl	800525c <xTaskRemoveFromEventList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <xQueueGenericReset+0xcc>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	e009      	b.n	8003fa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3310      	adds	r3, #16
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fef2 	bl	8003d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3324      	adds	r3, #36	; 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff feed 	bl	8003d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fa2:	f002 f8a7 	bl	80060f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fa6:	2301      	movs	r3, #1
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08e      	sub	sp, #56	; 0x38
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <xQueueGenericCreateStatic+0x52>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <xQueueGenericCreateStatic+0x56>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <xQueueGenericCreateStatic+0x58>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	623b      	str	r3, [r7, #32]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <xQueueGenericCreateStatic+0x7e>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <xQueueGenericCreateStatic+0x82>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <xQueueGenericCreateStatic+0x84>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61fb      	str	r3, [r7, #28]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004052:	2350      	movs	r3, #80	; 0x50
 8004054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b50      	cmp	r3, #80	; 0x50
 800405a:	d00a      	beq.n	8004072 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	61bb      	str	r3, [r7, #24]
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004072:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004086:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f805 	bl	80040a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800409c:	4618      	mov	r0, r3
 800409e:	3730      	adds	r7, #48	; 0x30
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e002      	b.n	80040c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040d2:	2101      	movs	r1, #1
 80040d4:	69b8      	ldr	r0, [r7, #24]
 80040d6:	f7ff ff05 	bl	8003ee4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08e      	sub	sp, #56	; 0x38
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040fa:	2300      	movs	r3, #0
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xQueueGenericSend+0x32>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <xQueueGenericSend+0x40>
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <xQueueGenericSend+0x44>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <xQueueGenericSend+0x46>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <xQueueGenericSend+0x60>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d103      	bne.n	800415a <xQueueGenericSend+0x6e>
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <xQueueGenericSend+0x72>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueGenericSend+0x74>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericSend+0x8e>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	623b      	str	r3, [r7, #32]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800417a:	f001 fa31 	bl	80055e0 <xTaskGetSchedulerState>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <xQueueGenericSend+0x9e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <xQueueGenericSend+0xa2>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <xQueueGenericSend+0xa4>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <xQueueGenericSend+0xbe>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	61fb      	str	r3, [r7, #28]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041aa:	f001 ff73 	bl	8006094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <xQueueGenericSend+0xd4>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d129      	bne.n	8004214 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c6:	f000 fa0b 	bl	80045e0 <prvCopyDataToQueue>
 80041ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	3324      	adds	r3, #36	; 0x24
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f83f 	bl	800525c <xTaskRemoveFromEventList>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041e4:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <xQueueGenericSend+0x1f8>)
 80041e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	e00a      	b.n	800420c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041fc:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <xQueueGenericSend+0x1f8>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800420c:	f001 ff72 	bl	80060f4 <vPortExitCritical>
				return pdPASS;
 8004210:	2301      	movs	r3, #1
 8004212:	e063      	b.n	80042dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800421a:	f001 ff6b 	bl	80060f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800421e:	2300      	movs	r3, #0
 8004220:	e05c      	b.n	80042dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	4618      	mov	r0, r3
 800422e:	f001 f879 	bl	8005324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004232:	2301      	movs	r3, #1
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004236:	f001 ff5d 	bl	80060f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800423a:	f000 fde5 	bl	8004e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800423e:	f001 ff29 	bl	8006094 <vPortEnterCritical>
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004248:	b25b      	sxtb	r3, r3
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d103      	bne.n	8004258 <xQueueGenericSend+0x16c>
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800425e:	b25b      	sxtb	r3, r3
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d103      	bne.n	800426e <xQueueGenericSend+0x182>
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800426e:	f001 ff41 	bl	80060f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004272:	1d3a      	adds	r2, r7, #4
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f868 	bl	8005350 <xTaskCheckForTimeOut>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d124      	bne.n	80042d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004288:	f000 faa2 	bl	80047d0 <prvIsQueueFull>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d018      	beq.n	80042c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	3310      	adds	r3, #16
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 ff8e 	bl	80051bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a2:	f000 fa2d 	bl	8004700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042a6:	f000 fdbd 	bl	8004e24 <xTaskResumeAll>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f47f af7c 	bne.w	80041aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <xQueueGenericSend+0x1f8>)
 80042b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	e772      	b.n	80041aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042c6:	f000 fa1b 	bl	8004700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ca:	f000 fdab 	bl	8004e24 <xTaskResumeAll>
 80042ce:	e76c      	b.n	80041aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d2:	f000 fa15 	bl	8004700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042d6:	f000 fda5 	bl	8004e24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3738      	adds	r7, #56	; 0x38
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	e000ed04 	.word	0xe000ed04

080042e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b090      	sub	sp, #64	; 0x40
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <xQueueGenericSendFromISR+0x3c>
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <xQueueGenericSendFromISR+0x40>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <xQueueGenericSendFromISR+0x42>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004340:	bf00      	nop
 8004342:	e7fe      	b.n	8004342 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d103      	bne.n	8004352 <xQueueGenericSendFromISR+0x6a>
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <xQueueGenericSendFromISR+0x6e>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <xQueueGenericSendFromISR+0x70>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	623b      	str	r3, [r7, #32]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004372:	f001 ff71 	bl	8006258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004376:	f3ef 8211 	mrs	r2, BASEPRI
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61fa      	str	r2, [r7, #28]
 800438c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800438e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <xQueueGenericSendFromISR+0xbc>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d12f      	bne.n	8004404 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043ba:	f000 f911 	bl	80045e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d112      	bne.n	80043ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 ff41 	bl	800525c <xTaskRemoveFromEventList>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043f2:	3301      	adds	r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	b25a      	sxtb	r2, r3
 80043f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043fe:	2301      	movs	r3, #1
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004402:	e001      	b.n	8004408 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004404:	2300      	movs	r3, #0
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004412:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004416:	4618      	mov	r0, r3
 8004418:	3740      	adds	r7, #64	; 0x40
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	; 0x30
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <xQueueReceive+0x30>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	623b      	str	r3, [r7, #32]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <xQueueReceive+0x3e>
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <xQueueReceive+0x42>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <xQueueReceive+0x44>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueReceive+0x5e>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	61fb      	str	r3, [r7, #28]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800447e:	f001 f8af 	bl	80055e0 <xTaskGetSchedulerState>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <xQueueReceive+0x6e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <xQueueReceive+0x72>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <xQueueReceive+0x74>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xQueueReceive+0x8e>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	61bb      	str	r3, [r7, #24]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ae:	f001 fdf1 	bl	8006094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01f      	beq.n	80044fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c2:	f000 f8f7 	bl	80046b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	1e5a      	subs	r2, r3, #1
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00f      	beq.n	80044f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	3310      	adds	r3, #16
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 febe 	bl	800525c <xTaskRemoveFromEventList>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <xQueueReceive+0x1bc>)
 80044e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044f6:	f001 fdfd 	bl	80060f4 <vPortExitCritical>
				return pdPASS;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e069      	b.n	80045d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d103      	bne.n	800450c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004504:	f001 fdf6 	bl	80060f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004508:	2300      	movs	r3, #0
 800450a:	e062      	b.n	80045d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004512:	f107 0310 	add.w	r3, r7, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ff04 	bl	8005324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004520:	f001 fde8 	bl	80060f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004524:	f000 fc70 	bl	8004e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004528:	f001 fdb4 	bl	8006094 <vPortEnterCritical>
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004532:	b25b      	sxtb	r3, r3
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d103      	bne.n	8004542 <xQueueReceive+0x122>
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004548:	b25b      	sxtb	r3, r3
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d103      	bne.n	8004558 <xQueueReceive+0x138>
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004558:	f001 fdcc 	bl	80060f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800455c:	1d3a      	adds	r2, r7, #4
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	4611      	mov	r1, r2
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fef3 	bl	8005350 <xTaskCheckForTimeOut>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d123      	bne.n	80045b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004572:	f000 f917 	bl	80047a4 <prvIsQueueEmpty>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d017      	beq.n	80045ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	3324      	adds	r3, #36	; 0x24
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fe19 	bl	80051bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800458a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458c:	f000 f8b8 	bl	8004700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004590:	f000 fc48 	bl	8004e24 <xTaskResumeAll>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d189      	bne.n	80044ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <xQueueReceive+0x1bc>)
 800459c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	e780      	b.n	80044ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ae:	f000 f8a7 	bl	8004700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045b2:	f000 fc37 	bl	8004e24 <xTaskResumeAll>
 80045b6:	e77a      	b.n	80044ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ba:	f000 f8a1 	bl	8004700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045be:	f000 fc31 	bl	8004e24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c4:	f000 f8ee 	bl	80047a4 <prvIsQueueEmpty>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f43f af6f 	beq.w	80044ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3730      	adds	r7, #48	; 0x30
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10d      	bne.n	800461a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d14d      	bne.n	80046a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f001 f806 	bl	800561c <xTaskPriorityDisinherit>
 8004610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	e043      	b.n	80046a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d119      	bne.n	8004654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6858      	ldr	r0, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	461a      	mov	r2, r3
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	f002 fd8a 	bl	8007144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	d32b      	bcc.n	80046a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e026      	b.n	80046a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68d8      	ldr	r0, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	461a      	mov	r2, r3
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	f002 fd70 	bl	8007144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	425b      	negs	r3, r3
 800466e:	441a      	add	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d207      	bcs.n	8004690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	425b      	negs	r3, r3
 800468a:	441a      	add	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d105      	bne.n	80046a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3b01      	subs	r3, #1
 80046a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046aa:	697b      	ldr	r3, [r7, #20]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	441a      	add	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d303      	bcc.n	80046e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	461a      	mov	r2, r3
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f002 fd26 	bl	8007144 <memcpy>
	}
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004708:	f001 fcc4 	bl	8006094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004714:	e011      	b.n	800473a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3324      	adds	r3, #36	; 0x24
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fd9a 	bl	800525c <xTaskRemoveFromEventList>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800472e:	f000 fe71 	bl	8005414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	3b01      	subs	r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800473a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	dce9      	bgt.n	8004716 <prvUnlockQueue+0x16>
 8004742:	e000      	b.n	8004746 <prvUnlockQueue+0x46>
					break;
 8004744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800474e:	f001 fcd1 	bl	80060f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004752:	f001 fc9f 	bl	8006094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800475c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800475e:	e011      	b.n	8004784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d012      	beq.n	800478e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3310      	adds	r3, #16
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fd75 	bl	800525c <xTaskRemoveFromEventList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004778:	f000 fe4c 	bl	8005414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800477c:	7bbb      	ldrb	r3, [r7, #14]
 800477e:	3b01      	subs	r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004788:	2b00      	cmp	r3, #0
 800478a:	dce9      	bgt.n	8004760 <prvUnlockQueue+0x60>
 800478c:	e000      	b.n	8004790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800478e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	22ff      	movs	r2, #255	; 0xff
 8004794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004798:	f001 fcac 	bl	80060f4 <vPortExitCritical>
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047ac:	f001 fc72 	bl	8006094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e001      	b.n	80047c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047c2:	f001 fc97 	bl	80060f4 <vPortExitCritical>

	return xReturn;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047d8:	f001 fc5c 	bl	8006094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d102      	bne.n	80047ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047e8:	2301      	movs	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e001      	b.n	80047f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047f2:	f001 fc7f 	bl	80060f4 <vPortExitCritical>

	return xReturn;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e014      	b.n	800483a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004810:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <vQueueAddToRegistry+0x50>)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10b      	bne.n	8004834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800481c:	490c      	ldr	r1, [pc, #48]	; (8004850 <vQueueAddToRegistry+0x50>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004826:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <vQueueAddToRegistry+0x50>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004832:	e006      	b.n	8004842 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b07      	cmp	r3, #7
 800483e:	d9e7      	bls.n	8004810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	200008c4 	.word	0x200008c4

08004854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004864:	f001 fc16 	bl	8006094 <vPortEnterCritical>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800486e:	b25b      	sxtb	r3, r3
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d103      	bne.n	800487e <vQueueWaitForMessageRestricted+0x2a>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004884:	b25b      	sxtb	r3, r3
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d103      	bne.n	8004894 <vQueueWaitForMessageRestricted+0x40>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004894:	f001 fc2e 	bl	80060f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	3324      	adds	r3, #36	; 0x24
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fcab 	bl	8005204 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048ae:	6978      	ldr	r0, [r7, #20]
 80048b0:	f7ff ff26 	bl	8004700 <prvUnlockQueue>
	}
 80048b4:	bf00      	nop
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08e      	sub	sp, #56	; 0x38
 80048c0:	af04      	add	r7, sp, #16
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	623b      	str	r3, [r7, #32]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xTaskCreateStatic+0x46>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	61fb      	str	r3, [r7, #28]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004902:	23a8      	movs	r3, #168	; 0xa8
 8004904:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2ba8      	cmp	r3, #168	; 0xa8
 800490a:	d00a      	beq.n	8004922 <xTaskCreateStatic+0x66>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	61bb      	str	r3, [r7, #24]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004922:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01e      	beq.n	8004968 <xTaskCreateStatic+0xac>
 800492a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004938:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	2202      	movs	r2, #2
 800493e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004942:	2300      	movs	r3, #0
 8004944:	9303      	str	r3, [sp, #12]
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	f107 0314 	add.w	r3, r7, #20
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f850 	bl	8004a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004962:	f000 f8f3 	bl	8004b4c <prvAddNewTaskToReadyList>
 8004966:	e001      	b.n	800496c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800496c:	697b      	ldr	r3, [r7, #20]
	}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	; 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08c      	sub	sp, #48	; 0x30
 800497a:	af04      	add	r7, sp, #16
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4618      	mov	r0, r3
 800498c:	f001 fca4 	bl	80062d8 <pvPortMalloc>
 8004990:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004998:	20a8      	movs	r0, #168	; 0xa8
 800499a:	f001 fc9d 	bl	80062d8 <pvPortMalloc>
 800499e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
 80049ac:	e005      	b.n	80049ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049ae:	6978      	ldr	r0, [r7, #20]
 80049b0:	f001 fd5e 	bl	8006470 <vPortFree>
 80049b4:	e001      	b.n	80049ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d017      	beq.n	80049f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9303      	str	r3, [sp, #12]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	9302      	str	r3, [sp, #8]
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f80e 	bl	8004a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049e4:	69f8      	ldr	r0, [r7, #28]
 80049e6:	f000 f8b1 	bl	8004b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	e002      	b.n	80049f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295
 80049f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049f6:	69bb      	ldr	r3, [r7, #24]
	}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	461a      	mov	r2, r3
 8004a18:	21a5      	movs	r1, #165	; 0xa5
 8004a1a:	f002 fac2 	bl	8006fa2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	617b      	str	r3, [r7, #20]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01f      	beq.n	8004a9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	e012      	b.n	8004a8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	7819      	ldrb	r1, [r3, #0]
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	3334      	adds	r3, #52	; 0x34
 8004a74:	460a      	mov	r2, r1
 8004a76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3301      	adds	r3, #1
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	2b0f      	cmp	r3, #15
 8004a8e:	d9e9      	bls.n	8004a64 <prvInitialiseNewTask+0x64>
 8004a90:	e000      	b.n	8004a94 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a9c:	e003      	b.n	8004aa6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2b37      	cmp	r3, #55	; 0x37
 8004aaa:	d901      	bls.n	8004ab0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004aac:	2337      	movs	r3, #55	; 0x37
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	2200      	movs	r2, #0
 8004ac0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f978 	bl	8003dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	3318      	adds	r3, #24
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff f973 	bl	8003dbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ada:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	3354      	adds	r3, #84	; 0x54
 8004b00:	224c      	movs	r2, #76	; 0x4c
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f002 fa4c 	bl	8006fa2 <memset>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <prvInitialiseNewTask+0x140>)
 8004b0e:	659a      	str	r2, [r3, #88]	; 0x58
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <prvInitialiseNewTask+0x144>)
 8004b14:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <prvInitialiseNewTask+0x148>)
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	69b8      	ldr	r0, [r7, #24]
 8004b22:	f001 f98b 	bl	8005e3c <pxPortInitialiseStack>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b38:	bf00      	nop
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20004b58 	.word	0x20004b58
 8004b44:	20004bc0 	.word	0x20004bc0
 8004b48:	20004c28 	.word	0x20004c28

08004b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b54:	f001 fa9e 	bl	8006094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b58:	4b2d      	ldr	r3, [pc, #180]	; (8004c10 <prvAddNewTaskToReadyList+0xc4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <prvAddNewTaskToReadyList+0xc4>)
 8004b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b62:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <prvAddNewTaskToReadyList+0xc8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b6a:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <prvAddNewTaskToReadyList+0xc8>)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <prvAddNewTaskToReadyList+0xc4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d110      	bne.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b78:	f000 fc70 	bl	800545c <prvInitialiseTaskLists>
 8004b7c:	e00d      	b.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b7e:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <prvAddNewTaskToReadyList+0xcc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b86:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <prvAddNewTaskToReadyList+0xc8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d802      	bhi.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b94:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <prvAddNewTaskToReadyList+0xc8>)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <prvAddNewTaskToReadyList+0xd0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <prvAddNewTaskToReadyList+0xd0>)
 8004ba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <prvAddNewTaskToReadyList+0xd0>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <prvAddNewTaskToReadyList+0xd4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d903      	bls.n	8004bc0 <prvAddNewTaskToReadyList+0x74>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <prvAddNewTaskToReadyList+0xd4>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <prvAddNewTaskToReadyList+0xd8>)
 8004bce:	441a      	add	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7ff f8fd 	bl	8003dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bdc:	f001 fa8a 	bl	80060f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <prvAddNewTaskToReadyList+0xcc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <prvAddNewTaskToReadyList+0xc8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d207      	bcs.n	8004c06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <prvAddNewTaskToReadyList+0xdc>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000dd8 	.word	0x20000dd8
 8004c14:	20000904 	.word	0x20000904
 8004c18:	20000de4 	.word	0x20000de4
 8004c1c:	20000df4 	.word	0x20000df4
 8004c20:	20000de0 	.word	0x20000de0
 8004c24:	20000908 	.word	0x20000908
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	617b      	str	r3, [r7, #20]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <vTaskDelayUntil+0x46>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	613b      	str	r3, [r7, #16]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <vTaskDelayUntil+0xf0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <vTaskDelayUntil+0x64>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60fb      	str	r3, [r7, #12]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004c90:	f000 f8ba 	bl	8004e08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004c94:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <vTaskDelayUntil+0xf4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d20b      	bcs.n	8004cc6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d211      	bcs.n	8004cdc <vTaskDelayUntil+0xb0>
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d90d      	bls.n	8004cdc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	e00a      	b.n	8004cdc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d303      	bcc.n	8004cd8 <vTaskDelayUntil+0xac>
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d901      	bls.n	8004cdc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d006      	beq.n	8004cf6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fd01 	bl	80056f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004cf6:	f000 f895 	bl	8004e24 <xTaskResumeAll>
 8004cfa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d107      	bne.n	8004d12 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <vTaskDelayUntil+0xf8>)
 8004d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d12:	bf00      	nop
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000e00 	.word	0x20000e00
 8004d20:	20000ddc 	.word	0x20000ddc
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d36:	463a      	mov	r2, r7
 8004d38:	1d39      	adds	r1, r7, #4
 8004d3a:	f107 0308 	add.w	r3, r7, #8
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe ffe8 	bl	8003d14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	9202      	str	r2, [sp, #8]
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2300      	movs	r3, #0
 8004d54:	460a      	mov	r2, r1
 8004d56:	4924      	ldr	r1, [pc, #144]	; (8004de8 <vTaskStartScheduler+0xc0>)
 8004d58:	4824      	ldr	r0, [pc, #144]	; (8004dec <vTaskStartScheduler+0xc4>)
 8004d5a:	f7ff fdaf 	bl	80048bc <xTaskCreateStatic>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4a23      	ldr	r2, [pc, #140]	; (8004df0 <vTaskStartScheduler+0xc8>)
 8004d62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d64:	4b22      	ldr	r3, [pc, #136]	; (8004df0 <vTaskStartScheduler+0xc8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e001      	b.n	8004d76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d102      	bne.n	8004d82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d7c:	f000 fd10 	bl	80057a0 <xTimerCreateTimerTask>
 8004d80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d11b      	bne.n	8004dc0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	613b      	str	r3, [r7, #16]
}
 8004d9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d9c:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <vTaskStartScheduler+0xcc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3354      	adds	r3, #84	; 0x54
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <vTaskStartScheduler+0xd0>)
 8004da4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <vTaskStartScheduler+0xd4>)
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <vTaskStartScheduler+0xd8>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <vTaskStartScheduler+0xdc>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dba:	f001 f8c9 	bl	8005f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dbe:	e00e      	b.n	8004dde <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d10a      	bne.n	8004dde <vTaskStartScheduler+0xb6>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60fb      	str	r3, [r7, #12]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <vTaskStartScheduler+0xb4>
}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08007d20 	.word	0x08007d20
 8004dec:	0800542d 	.word	0x0800542d
 8004df0:	20000dfc 	.word	0x20000dfc
 8004df4:	20000904 	.word	0x20000904
 8004df8:	20000068 	.word	0x20000068
 8004dfc:	20000df8 	.word	0x20000df8
 8004e00:	20000de4 	.word	0x20000de4
 8004e04:	20000ddc 	.word	0x20000ddc

08004e08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <vTaskSuspendAll+0x18>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	4a03      	ldr	r2, [pc, #12]	; (8004e20 <vTaskSuspendAll+0x18>)
 8004e14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e16:	bf00      	nop
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000e00 	.word	0x20000e00

08004e24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e32:	4b42      	ldr	r3, [pc, #264]	; (8004f3c <xTaskResumeAll+0x118>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	603b      	str	r3, [r7, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e50:	f001 f920 	bl	8006094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e54:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <xTaskResumeAll+0x118>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4a38      	ldr	r2, [pc, #224]	; (8004f3c <xTaskResumeAll+0x118>)
 8004e5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e5e:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <xTaskResumeAll+0x118>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d162      	bne.n	8004f2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e66:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <xTaskResumeAll+0x11c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d05e      	beq.n	8004f2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e6e:	e02f      	b.n	8004ed0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e70:	4b34      	ldr	r3, [pc, #208]	; (8004f44 <xTaskResumeAll+0x120>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3318      	adds	r3, #24
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff f807 	bl	8003e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff f802 	bl	8003e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <xTaskResumeAll+0x124>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d903      	bls.n	8004ea0 <xTaskResumeAll+0x7c>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <xTaskResumeAll+0x124>)
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <xTaskResumeAll+0x128>)
 8004eae:	441a      	add	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7fe ff8d 	bl	8003dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <xTaskResumeAll+0x12c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <xTaskResumeAll+0x130>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ed0:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <xTaskResumeAll+0x120>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1cb      	bne.n	8004e70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ede:	f000 fb5f 	bl	80055a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <xTaskResumeAll+0x134>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d010      	beq.n	8004f10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004eee:	f000 f847 	bl	8004f80 <xTaskIncrementTick>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ef8:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <xTaskResumeAll+0x130>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f1      	bne.n	8004eee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <xTaskResumeAll+0x134>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f10:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <xTaskResumeAll+0x130>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <xTaskResumeAll+0x138>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f2c:	f001 f8e2 	bl	80060f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004f30:	68bb      	ldr	r3, [r7, #8]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000e00 	.word	0x20000e00
 8004f40:	20000dd8 	.word	0x20000dd8
 8004f44:	20000d98 	.word	0x20000d98
 8004f48:	20000de0 	.word	0x20000de0
 8004f4c:	20000908 	.word	0x20000908
 8004f50:	20000904 	.word	0x20000904
 8004f54:	20000dec 	.word	0x20000dec
 8004f58:	20000de8 	.word	0x20000de8
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <xTaskGetTickCount+0x1c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f6c:	687b      	ldr	r3, [r7, #4]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000ddc 	.word	0x20000ddc

08004f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8a:	4b4f      	ldr	r3, [pc, #316]	; (80050c8 <xTaskIncrementTick+0x148>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 808f 	bne.w	80050b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f94:	4b4d      	ldr	r3, [pc, #308]	; (80050cc <xTaskIncrementTick+0x14c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f9c:	4a4b      	ldr	r2, [pc, #300]	; (80050cc <xTaskIncrementTick+0x14c>)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d120      	bne.n	8004fea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fa8:	4b49      	ldr	r3, [pc, #292]	; (80050d0 <xTaskIncrementTick+0x150>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	603b      	str	r3, [r7, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xTaskIncrementTick+0x46>
 8004fc8:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <xTaskIncrementTick+0x150>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <xTaskIncrementTick+0x154>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a3f      	ldr	r2, [pc, #252]	; (80050d0 <xTaskIncrementTick+0x150>)
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	4a3f      	ldr	r2, [pc, #252]	; (80050d4 <xTaskIncrementTick+0x154>)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b3e      	ldr	r3, [pc, #248]	; (80050d8 <xTaskIncrementTick+0x158>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a3d      	ldr	r2, [pc, #244]	; (80050d8 <xTaskIncrementTick+0x158>)
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	f000 fadb 	bl	80055a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fea:	4b3c      	ldr	r3, [pc, #240]	; (80050dc <xTaskIncrementTick+0x15c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d349      	bcc.n	8005088 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff4:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <xTaskIncrementTick+0x150>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffe:	4b37      	ldr	r3, [pc, #220]	; (80050dc <xTaskIncrementTick+0x15c>)
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	601a      	str	r2, [r3, #0]
					break;
 8005006:	e03f      	b.n	8005088 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005008:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <xTaskIncrementTick+0x150>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d203      	bcs.n	8005028 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005020:	4a2e      	ldr	r2, [pc, #184]	; (80050dc <xTaskIncrementTick+0x15c>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005026:	e02f      	b.n	8005088 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3304      	adds	r3, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe ff2f 	bl	8003e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3318      	adds	r3, #24
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe ff26 	bl	8003e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <xTaskIncrementTick+0x160>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d903      	bls.n	8005058 <xTaskIncrementTick+0xd8>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a22      	ldr	r2, [pc, #136]	; (80050e0 <xTaskIncrementTick+0x160>)
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <xTaskIncrementTick+0x164>)
 8005066:	441a      	add	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7fe feb1 	bl	8003dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <xTaskIncrementTick+0x168>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	429a      	cmp	r2, r3
 8005080:	d3b8      	bcc.n	8004ff4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005082:	2301      	movs	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005086:	e7b5      	b.n	8004ff4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <xTaskIncrementTick+0x168>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	4915      	ldr	r1, [pc, #84]	; (80050e4 <xTaskIncrementTick+0x164>)
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d901      	bls.n	80050a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050a0:	2301      	movs	r3, #1
 80050a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050a4:	4b11      	ldr	r3, [pc, #68]	; (80050ec <xTaskIncrementTick+0x16c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80050ac:	2301      	movs	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e004      	b.n	80050bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <xTaskIncrementTick+0x170>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3301      	adds	r3, #1
 80050b8:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <xTaskIncrementTick+0x170>)
 80050ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050bc:	697b      	ldr	r3, [r7, #20]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000e00 	.word	0x20000e00
 80050cc:	20000ddc 	.word	0x20000ddc
 80050d0:	20000d90 	.word	0x20000d90
 80050d4:	20000d94 	.word	0x20000d94
 80050d8:	20000df0 	.word	0x20000df0
 80050dc:	20000df8 	.word	0x20000df8
 80050e0:	20000de0 	.word	0x20000de0
 80050e4:	20000908 	.word	0x20000908
 80050e8:	20000904 	.word	0x20000904
 80050ec:	20000dec 	.word	0x20000dec
 80050f0:	20000de8 	.word	0x20000de8

080050f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050fa:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <vTaskSwitchContext+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005102:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <vTaskSwitchContext+0xb4>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005108:	e046      	b.n	8005198 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <vTaskSwitchContext+0xb4>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005110:	4b26      	ldr	r3, [pc, #152]	; (80051ac <vTaskSwitchContext+0xb8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	e010      	b.n	800513a <vTaskSwitchContext+0x46>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10a      	bne.n	8005134 <vTaskSwitchContext+0x40>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <vTaskSwitchContext+0x3e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3b01      	subs	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	491d      	ldr	r1, [pc, #116]	; (80051b0 <vTaskSwitchContext+0xbc>)
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0e4      	beq.n	8005118 <vTaskSwitchContext+0x24>
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <vTaskSwitchContext+0xbc>)
 800515a:	4413      	add	r3, r2
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	3308      	adds	r3, #8
 8005170:	429a      	cmp	r2, r3
 8005172:	d104      	bne.n	800517e <vTaskSwitchContext+0x8a>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <vTaskSwitchContext+0xc0>)
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4a08      	ldr	r2, [pc, #32]	; (80051ac <vTaskSwitchContext+0xb8>)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <vTaskSwitchContext+0xc0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3354      	adds	r3, #84	; 0x54
 8005194:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <vTaskSwitchContext+0xc4>)
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	20000e00 	.word	0x20000e00
 80051a8:	20000dec 	.word	0x20000dec
 80051ac:	20000de0 	.word	0x20000de0
 80051b0:	20000908 	.word	0x20000908
 80051b4:	20000904 	.word	0x20000904
 80051b8:	20000068 	.word	0x20000068

080051bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60fb      	str	r3, [r7, #12]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <vTaskPlaceOnEventList+0x44>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3318      	adds	r3, #24
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fe fe17 	bl	8003e1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051f0:	2101      	movs	r1, #1
 80051f2:	6838      	ldr	r0, [r7, #0]
 80051f4:	f000 fa80 	bl	80056f8 <prvAddCurrentTaskToDelayedList>
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000904 	.word	0x20000904

08005204 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	617b      	str	r3, [r7, #20]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <vTaskPlaceOnEventListRestricted+0x54>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3318      	adds	r3, #24
 8005232:	4619      	mov	r1, r3
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7fe fdce 	bl	8003dd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	68b8      	ldr	r0, [r7, #8]
 800524a:	f000 fa55 	bl	80056f8 <prvAddCurrentTaskToDelayedList>
	}
 800524e:	bf00      	nop
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000904 	.word	0x20000904

0800525c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	60fb      	str	r3, [r7, #12]
}
 8005284:	bf00      	nop
 8005286:	e7fe      	b.n	8005286 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	3318      	adds	r3, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe fdff 	bl	8003e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005292:	4b1e      	ldr	r3, [pc, #120]	; (800530c <xTaskRemoveFromEventList+0xb0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11d      	bne.n	80052d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3304      	adds	r3, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fdf6 	bl	8003e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <xTaskRemoveFromEventList+0xb4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d903      	bls.n	80052b8 <xTaskRemoveFromEventList+0x5c>
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <xTaskRemoveFromEventList+0xb4>)
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4a13      	ldr	r2, [pc, #76]	; (8005314 <xTaskRemoveFromEventList+0xb8>)
 80052c6:	441a      	add	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f7fe fd81 	bl	8003dd6 <vListInsertEnd>
 80052d4:	e005      	b.n	80052e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3318      	adds	r3, #24
 80052da:	4619      	mov	r1, r3
 80052dc:	480e      	ldr	r0, [pc, #56]	; (8005318 <xTaskRemoveFromEventList+0xbc>)
 80052de:	f7fe fd7a 	bl	8003dd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <xTaskRemoveFromEventList+0xc0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d905      	bls.n	80052fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <xTaskRemoveFromEventList+0xc4>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e001      	b.n	8005300 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005300:	697b      	ldr	r3, [r7, #20]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000e00 	.word	0x20000e00
 8005310:	20000de0 	.word	0x20000de0
 8005314:	20000908 	.word	0x20000908
 8005318:	20000d98 	.word	0x20000d98
 800531c:	20000904 	.word	0x20000904
 8005320:	20000dec 	.word	0x20000dec

08005324 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <vTaskInternalSetTimeOutState+0x24>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <vTaskInternalSetTimeOutState+0x28>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	605a      	str	r2, [r3, #4]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	20000df0 	.word	0x20000df0
 800534c:	20000ddc 	.word	0x20000ddc

08005350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60fb      	str	r3, [r7, #12]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005392:	f000 fe7f 	bl	8006094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005396:	4b1d      	ldr	r3, [pc, #116]	; (800540c <xTaskCheckForTimeOut+0xbc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d102      	bne.n	80053b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	e023      	b.n	80053fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <xTaskCheckForTimeOut+0xc0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d007      	beq.n	80053d2 <xTaskCheckForTimeOut+0x82>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e015      	b.n	80053fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d20b      	bcs.n	80053f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ff9b 	bl	8005324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e004      	b.n	80053fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053fe:	f000 fe79 	bl	80060f4 <vPortExitCritical>

	return xReturn;
 8005402:	69fb      	ldr	r3, [r7, #28]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000ddc 	.word	0x20000ddc
 8005410:	20000df0 	.word	0x20000df0

08005414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <vTaskMissedYield+0x14>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]
}
 800541e:	bf00      	nop
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20000dec 	.word	0x20000dec

0800542c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005434:	f000 f852 	bl	80054dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <prvIdleTask+0x28>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d9f9      	bls.n	8005434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <prvIdleTask+0x2c>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005450:	e7f0      	b.n	8005434 <prvIdleTask+0x8>
 8005452:	bf00      	nop
 8005454:	20000908 	.word	0x20000908
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
 8005466:	e00c      	b.n	8005482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4a12      	ldr	r2, [pc, #72]	; (80054bc <prvInitialiseTaskLists+0x60>)
 8005474:	4413      	add	r3, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fc80 	bl	8003d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3301      	adds	r3, #1
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b37      	cmp	r3, #55	; 0x37
 8005486:	d9ef      	bls.n	8005468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005488:	480d      	ldr	r0, [pc, #52]	; (80054c0 <prvInitialiseTaskLists+0x64>)
 800548a:	f7fe fc77 	bl	8003d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800548e:	480d      	ldr	r0, [pc, #52]	; (80054c4 <prvInitialiseTaskLists+0x68>)
 8005490:	f7fe fc74 	bl	8003d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005494:	480c      	ldr	r0, [pc, #48]	; (80054c8 <prvInitialiseTaskLists+0x6c>)
 8005496:	f7fe fc71 	bl	8003d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800549a:	480c      	ldr	r0, [pc, #48]	; (80054cc <prvInitialiseTaskLists+0x70>)
 800549c:	f7fe fc6e 	bl	8003d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054a0:	480b      	ldr	r0, [pc, #44]	; (80054d0 <prvInitialiseTaskLists+0x74>)
 80054a2:	f7fe fc6b 	bl	8003d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <prvInitialiseTaskLists+0x78>)
 80054a8:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <prvInitialiseTaskLists+0x64>)
 80054aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <prvInitialiseTaskLists+0x7c>)
 80054ae:	4a05      	ldr	r2, [pc, #20]	; (80054c4 <prvInitialiseTaskLists+0x68>)
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000908 	.word	0x20000908
 80054c0:	20000d68 	.word	0x20000d68
 80054c4:	20000d7c 	.word	0x20000d7c
 80054c8:	20000d98 	.word	0x20000d98
 80054cc:	20000dac 	.word	0x20000dac
 80054d0:	20000dc4 	.word	0x20000dc4
 80054d4:	20000d90 	.word	0x20000d90
 80054d8:	20000d94 	.word	0x20000d94

080054dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e2:	e019      	b.n	8005518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054e4:	f000 fdd6 	bl	8006094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <prvCheckTasksWaitingTermination+0x50>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fccb 	bl	8003e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <prvCheckTasksWaitingTermination+0x54>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3b01      	subs	r3, #1
 8005500:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <prvCheckTasksWaitingTermination+0x54>)
 8005502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3b01      	subs	r3, #1
 800550a:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 800550c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800550e:	f000 fdf1 	bl	80060f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f810 	bl	8005538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e1      	bne.n	80054e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000dac 	.word	0x20000dac
 8005530:	20000dd8 	.word	0x20000dd8
 8005534:	20000dc0 	.word	0x20000dc0

08005538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3354      	adds	r3, #84	; 0x54
 8005544:	4618      	mov	r0, r3
 8005546:	f001 fd45 	bl	8006fd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005550:	2b00      	cmp	r3, #0
 8005552:	d108      	bne.n	8005566 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4618      	mov	r0, r3
 800555a:	f000 ff89 	bl	8006470 <vPortFree>
				vPortFree( pxTCB );
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 ff86 	bl	8006470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005564:	e018      	b.n	8005598 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800556c:	2b01      	cmp	r3, #1
 800556e:	d103      	bne.n	8005578 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 ff7d 	bl	8006470 <vPortFree>
	}
 8005576:	e00f      	b.n	8005598 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800557e:	2b02      	cmp	r3, #2
 8005580:	d00a      	beq.n	8005598 <prvDeleteTCB+0x60>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <prvDeleteTCB+0x5e>
	}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <prvResetNextTaskUnblockTime+0x38>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <prvResetNextTaskUnblockTime+0x3c>)
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055b8:	e008      	b.n	80055cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <prvResetNextTaskUnblockTime+0x38>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a04      	ldr	r2, [pc, #16]	; (80055dc <prvResetNextTaskUnblockTime+0x3c>)
 80055ca:	6013      	str	r3, [r2, #0]
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	20000d90 	.word	0x20000d90
 80055dc:	20000df8 	.word	0x20000df8

080055e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <xTaskGetSchedulerState+0x34>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055ee:	2301      	movs	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	e008      	b.n	8005606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f4:	4b08      	ldr	r3, [pc, #32]	; (8005618 <xTaskGetSchedulerState+0x38>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055fc:	2302      	movs	r3, #2
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	e001      	b.n	8005606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005606:	687b      	ldr	r3, [r7, #4]
	}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	20000de4 	.word	0x20000de4
 8005618:	20000e00 	.word	0x20000e00

0800561c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d056      	beq.n	80056e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005632:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <xTaskPriorityDisinherit+0xd0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	429a      	cmp	r2, r3
 800563a:	d00a      	beq.n	8005652 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	60fb      	str	r3, [r7, #12]
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	1e5a      	subs	r2, r3, #1
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005682:	429a      	cmp	r2, r3
 8005684:	d02c      	beq.n	80056e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568a:	2b00      	cmp	r3, #0
 800568c:	d128      	bne.n	80056e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	3304      	adds	r3, #4
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fbfc 	bl	8003e90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <xTaskPriorityDisinherit+0xd4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d903      	bls.n	80056c0 <xTaskPriorityDisinherit+0xa4>
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <xTaskPriorityDisinherit+0xd4>)
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <xTaskPriorityDisinherit+0xd8>)
 80056ce:	441a      	add	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f7fe fb7d 	bl	8003dd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056e0:	697b      	ldr	r3, [r7, #20]
	}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000904 	.word	0x20000904
 80056f0:	20000de0 	.word	0x20000de0
 80056f4:	20000908 	.word	0x20000908

080056f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005702:	4b21      	ldr	r3, [pc, #132]	; (8005788 <prvAddCurrentTaskToDelayedList+0x90>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005708:	4b20      	ldr	r3, [pc, #128]	; (800578c <prvAddCurrentTaskToDelayedList+0x94>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3304      	adds	r3, #4
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fbbe 	bl	8003e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d10a      	bne.n	8005732 <prvAddCurrentTaskToDelayedList+0x3a>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <prvAddCurrentTaskToDelayedList+0x94>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4819      	ldr	r0, [pc, #100]	; (8005790 <prvAddCurrentTaskToDelayedList+0x98>)
 800572c:	f7fe fb53 	bl	8003dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005730:	e026      	b.n	8005780 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <prvAddCurrentTaskToDelayedList+0x94>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	429a      	cmp	r2, r3
 8005748:	d209      	bcs.n	800575e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <prvAddCurrentTaskToDelayedList+0x9c>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <prvAddCurrentTaskToDelayedList+0x94>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fe fb61 	bl	8003e1e <vListInsert>
}
 800575c:	e010      	b.n	8005780 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800575e:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <prvAddCurrentTaskToDelayedList+0x94>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f7fe fb57 	bl	8003e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	d202      	bcs.n	8005780 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800577a:	4a08      	ldr	r2, [pc, #32]	; (800579c <prvAddCurrentTaskToDelayedList+0xa4>)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	6013      	str	r3, [r2, #0]
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000ddc 	.word	0x20000ddc
 800578c:	20000904 	.word	0x20000904
 8005790:	20000dc4 	.word	0x20000dc4
 8005794:	20000d94 	.word	0x20000d94
 8005798:	20000d90 	.word	0x20000d90
 800579c:	20000df8 	.word	0x20000df8

080057a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057aa:	f000 fb07 	bl	8005dbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057ae:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <xTimerCreateTimerTask+0x80>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d021      	beq.n	80057fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057be:	1d3a      	adds	r2, r7, #4
 80057c0:	f107 0108 	add.w	r1, r7, #8
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe fabd 	bl	8003d48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	9202      	str	r2, [sp, #8]
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	2302      	movs	r3, #2
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	460a      	mov	r2, r1
 80057e0:	4910      	ldr	r1, [pc, #64]	; (8005824 <xTimerCreateTimerTask+0x84>)
 80057e2:	4811      	ldr	r0, [pc, #68]	; (8005828 <xTimerCreateTimerTask+0x88>)
 80057e4:	f7ff f86a 	bl	80048bc <xTaskCreateStatic>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4a10      	ldr	r2, [pc, #64]	; (800582c <xTimerCreateTimerTask+0x8c>)
 80057ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <xTimerCreateTimerTask+0x8c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057f6:	2301      	movs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	613b      	str	r3, [r7, #16]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005816:	697b      	ldr	r3, [r7, #20]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000e34 	.word	0x20000e34
 8005824:	08007d28 	.word	0x08007d28
 8005828:	08005965 	.word	0x08005965
 800582c:	20000e38 	.word	0x20000e38

08005830 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08a      	sub	sp, #40	; 0x28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800583e:	2300      	movs	r3, #0
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	623b      	str	r3, [r7, #32]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800585e:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <xTimerGenericCommand+0x98>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02a      	beq.n	80058bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b05      	cmp	r3, #5
 8005876:	dc18      	bgt.n	80058aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005878:	f7ff feb2 	bl	80055e0 <xTaskGetSchedulerState>
 800587c:	4603      	mov	r3, r0
 800587e:	2b02      	cmp	r3, #2
 8005880:	d109      	bne.n	8005896 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <xTimerGenericCommand+0x98>)
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	f107 0110 	add.w	r1, r7, #16
 800588a:	2300      	movs	r3, #0
 800588c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588e:	f7fe fc2d 	bl	80040ec <xQueueGenericSend>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24
 8005894:	e012      	b.n	80058bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <xTimerGenericCommand+0x98>)
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	f107 0110 	add.w	r1, r7, #16
 800589e:	2300      	movs	r3, #0
 80058a0:	2200      	movs	r2, #0
 80058a2:	f7fe fc23 	bl	80040ec <xQueueGenericSend>
 80058a6:	6278      	str	r0, [r7, #36]	; 0x24
 80058a8:	e008      	b.n	80058bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058aa:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <xTimerGenericCommand+0x98>)
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	f107 0110 	add.w	r1, r7, #16
 80058b2:	2300      	movs	r3, #0
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	f7fe fd17 	bl	80042e8 <xQueueGenericSendFromISR>
 80058ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000e34 	.word	0x20000e34

080058cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <prvProcessExpiredTimer+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fe fad3 	bl	8003e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d022      	beq.n	800593e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	18d1      	adds	r1, r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	6978      	ldr	r0, [r7, #20]
 8005906:	f000 f8d1 	bl	8005aac <prvInsertTimerInActiveList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01f      	beq.n	8005950 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005910:	2300      	movs	r3, #0
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2300      	movs	r3, #0
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	2100      	movs	r1, #0
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f7ff ff88 	bl	8005830 <xTimerGenericCommand>
 8005920:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d113      	bne.n	8005950 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	60fb      	str	r3, [r7, #12]
}
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	6978      	ldr	r0, [r7, #20]
 8005956:	4798      	blx	r3
}
 8005958:	bf00      	nop
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20000e2c 	.word	0x20000e2c

08005964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800596c:	f107 0308 	add.w	r3, r7, #8
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f857 	bl	8005a24 <prvGetNextExpireTime>
 8005976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4619      	mov	r1, r3
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f803 	bl	8005988 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005982:	f000 f8d5 	bl	8005b30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005986:	e7f1      	b.n	800596c <prvTimerTask+0x8>

08005988 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005992:	f7ff fa39 	bl	8004e08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005996:	f107 0308 	add.w	r3, r7, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f866 	bl	8005a6c <prvSampleTimeNow>
 80059a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d130      	bne.n	8005a0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <prvProcessTimerOrBlockTask+0x3c>
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d806      	bhi.n	80059c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059b6:	f7ff fa35 	bl	8004e24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ff85 	bl	80058cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059c2:	e024      	b.n	8005a0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <prvProcessTimerOrBlockTask+0x90>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <prvProcessTimerOrBlockTask+0x50>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <prvProcessTimerOrBlockTask+0x52>
 80059d8:	2300      	movs	r3, #0
 80059da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059dc:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <prvProcessTimerOrBlockTask+0x94>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	4619      	mov	r1, r3
 80059ea:	f7fe ff33 	bl	8004854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059ee:	f7ff fa19 	bl	8004e24 <xTaskResumeAll>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <prvProcessTimerOrBlockTask+0x98>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
}
 8005a08:	e001      	b.n	8005a0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a0a:	f7ff fa0b 	bl	8004e24 <xTaskResumeAll>
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000e30 	.word	0x20000e30
 8005a1c:	20000e34 	.word	0x20000e34
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a2c:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <prvGetNextExpireTime+0x44>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <prvGetNextExpireTime+0x16>
 8005a36:	2201      	movs	r2, #1
 8005a38:	e000      	b.n	8005a3c <prvGetNextExpireTime+0x18>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a48:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <prvGetNextExpireTime+0x44>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e001      	b.n	8005a58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a58:	68fb      	ldr	r3, [r7, #12]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	20000e2c 	.word	0x20000e2c

08005a6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a74:	f7ff fa74 	bl	8004f60 <xTaskGetTickCount>
 8005a78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <prvSampleTimeNow+0x3c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d205      	bcs.n	8005a90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a84:	f000 f936 	bl	8005cf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a96:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <prvSampleTimeNow+0x3c>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000e3c 	.word	0x20000e3c

08005aac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d812      	bhi.n	8005af8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e01b      	b.n	8005b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <prvInsertTimerInActiveList+0x7c>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe f994 	bl	8003e1e <vListInsert>
 8005af6:	e012      	b.n	8005b1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d206      	bcs.n	8005b0e <prvInsertTimerInActiveList+0x62>
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e007      	b.n	8005b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvInsertTimerInActiveList+0x80>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7fe f980 	bl	8003e1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b1e:	697b      	ldr	r3, [r7, #20]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000e30 	.word	0x20000e30
 8005b2c:	20000e2c 	.word	0x20000e2c

08005b30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08e      	sub	sp, #56	; 0x38
 8005b34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b36:	e0ca      	b.n	8005cce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da18      	bge.n	8005b70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	3304      	adds	r3, #4
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	61fb      	str	r3, [r7, #28]
}
 8005b5c:	bf00      	nop
 8005b5e:	e7fe      	b.n	8005b5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b66:	6850      	ldr	r0, [r2, #4]
 8005b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6a:	6892      	ldr	r2, [r2, #8]
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f2c0 80ab 	blt.w	8005cce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	3304      	adds	r3, #4
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe f981 	bl	8003e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b8e:	463b      	mov	r3, r7
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff ff6b 	bl	8005a6c <prvSampleTimeNow>
 8005b96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b09      	cmp	r3, #9
 8005b9c:	f200 8096 	bhi.w	8005ccc <prvProcessReceivedCommands+0x19c>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <prvProcessReceivedCommands+0x78>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd1 	.word	0x08005bd1
 8005bb4:	08005c45 	.word	0x08005c45
 8005bb8:	08005c59 	.word	0x08005c59
 8005bbc:	08005ca3 	.word	0x08005ca3
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005bd1 	.word	0x08005bd1
 8005bc8:	08005c45 	.word	0x08005c45
 8005bcc:	08005c59 	.word	0x08005c59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	18d1      	adds	r1, r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf0:	f7ff ff5c 	bl	8005aac <prvInsertTimerInActiveList>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d069      	beq.n	8005cce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d05e      	beq.n	8005cce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	441a      	add	r2, r3
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c22:	f7ff fe05 	bl	8005830 <xTimerGenericCommand>
 8005c26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d14f      	bne.n	8005cce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61bb      	str	r3, [r7, #24]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c56:	e03a      	b.n	8005cce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	617b      	str	r3, [r7, #20]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	18d1      	adds	r1, r2, r3
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9c:	f7ff ff06 	bl	8005aac <prvInsertTimerInActiveList>
					break;
 8005ca0:	e015      	b.n	8005cce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d103      	bne.n	8005cb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb2:	f000 fbdd 	bl	8006470 <vPortFree>
 8005cb6:	e00a      	b.n	8005cce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cca:	e000      	b.n	8005cce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005ccc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <prvProcessReceivedCommands+0x1c0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1d39      	adds	r1, r7, #4
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fba2 	bl	8004420 <xQueueReceive>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f47f af2a 	bne.w	8005b38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3730      	adds	r7, #48	; 0x30
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000e34 	.word	0x20000e34

08005cf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cfa:	e048      	b.n	8005d8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cfc:	4b2d      	ldr	r3, [pc, #180]	; (8005db4 <prvSwitchTimerLists+0xc0>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d06:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <prvSwitchTimerLists+0xc0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe f8bb 	bl	8003e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02e      	beq.n	8005d8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d90e      	bls.n	8005d60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d4e:	4b19      	ldr	r3, [pc, #100]	; (8005db4 <prvSwitchTimerLists+0xc0>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f7fe f860 	bl	8003e1e <vListInsert>
 8005d5e:	e016      	b.n	8005d8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d60:	2300      	movs	r3, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	2300      	movs	r3, #0
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fd60 	bl	8005830 <xTimerGenericCommand>
 8005d70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	603b      	str	r3, [r7, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <prvSwitchTimerLists+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1b1      	bne.n	8005cfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <prvSwitchTimerLists+0xc0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <prvSwitchTimerLists+0xc4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <prvSwitchTimerLists+0xc0>)
 8005da4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005da6:	4a04      	ldr	r2, [pc, #16]	; (8005db8 <prvSwitchTimerLists+0xc4>)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000e2c 	.word	0x20000e2c
 8005db8:	20000e30 	.word	0x20000e30

08005dbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dc2:	f000 f967 	bl	8006094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d120      	bne.n	8005e10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dce:	4814      	ldr	r0, [pc, #80]	; (8005e20 <prvCheckForValidListAndQueue+0x64>)
 8005dd0:	f7fd ffd4 	bl	8003d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dd4:	4813      	ldr	r0, [pc, #76]	; (8005e24 <prvCheckForValidListAndQueue+0x68>)
 8005dd6:	f7fd ffd1 	bl	8003d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <prvCheckForValidListAndQueue+0x6c>)
 8005ddc:	4a10      	ldr	r2, [pc, #64]	; (8005e20 <prvCheckForValidListAndQueue+0x64>)
 8005dde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <prvCheckForValidListAndQueue+0x70>)
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <prvCheckForValidListAndQueue+0x68>)
 8005de4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005de6:	2300      	movs	r3, #0
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <prvCheckForValidListAndQueue+0x74>)
 8005dec:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <prvCheckForValidListAndQueue+0x78>)
 8005dee:	2110      	movs	r1, #16
 8005df0:	200a      	movs	r0, #10
 8005df2:	f7fe f8df 	bl	8003fb4 <xQueueGenericCreateStatic>
 8005df6:	4603      	mov	r3, r0
 8005df8:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005dfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	490b      	ldr	r1, [pc, #44]	; (8005e38 <prvCheckForValidListAndQueue+0x7c>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fcf8 	bl	8004800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e10:	f000 f970 	bl	80060f4 <vPortExitCritical>
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000e34 	.word	0x20000e34
 8005e20:	20000e04 	.word	0x20000e04
 8005e24:	20000e18 	.word	0x20000e18
 8005e28:	20000e2c 	.word	0x20000e2c
 8005e2c:	20000e30 	.word	0x20000e30
 8005e30:	20000ee0 	.word	0x20000ee0
 8005e34:	20000e40 	.word	0x20000e40
 8005e38:	08007d30 	.word	0x08007d30

08005e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3b04      	subs	r3, #4
 8005e4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b04      	subs	r3, #4
 8005e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f023 0201 	bic.w	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b04      	subs	r3, #4
 8005e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <pxPortInitialiseStack+0x64>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b14      	subs	r3, #20
 8005e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f06f 0202 	mvn.w	r2, #2
 8005e8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b20      	subs	r3, #32
 8005e90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e92:	68fb      	ldr	r3, [r7, #12]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	08005ea5 	.word	0x08005ea5

08005ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <prvTaskExitError+0x54>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d00a      	beq.n	8005ece <prvTaskExitError+0x2a>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <prvTaskExitError+0x28>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	60bb      	str	r3, [r7, #8]
}
 8005ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ee2:	bf00      	nop
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0fc      	beq.n	8005ee4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	2000000c 	.word	0x2000000c
 8005efc:	00000000 	.word	0x00000000

08005f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f00:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <pxCurrentTCBConst2>)
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	6808      	ldr	r0, [r1, #0]
 8005f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	f380 8809 	msr	PSP, r0
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f380 8811 	msr	BASEPRI, r0
 8005f1a:	4770      	bx	lr
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst2>:
 8005f20:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f28:	4808      	ldr	r0, [pc, #32]	; (8005f4c <prvPortStartFirstTask+0x24>)
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f380 8808 	msr	MSP, r0
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8814 	msr	CONTROL, r0
 8005f3a:	b662      	cpsie	i
 8005f3c:	b661      	cpsie	f
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	df00      	svc	0
 8005f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f4a:	bf00      	nop
 8005f4c:	e000ed08 	.word	0xe000ed08

08005f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f56:	4b46      	ldr	r3, [pc, #280]	; (8006070 <xPortStartScheduler+0x120>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a46      	ldr	r2, [pc, #280]	; (8006074 <xPortStartScheduler+0x124>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10a      	bne.n	8005f76 <xPortStartScheduler+0x26>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	613b      	str	r3, [r7, #16]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f76:	4b3e      	ldr	r3, [pc, #248]	; (8006070 <xPortStartScheduler+0x120>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a3f      	ldr	r2, [pc, #252]	; (8006078 <xPortStartScheduler+0x128>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10a      	bne.n	8005f96 <xPortStartScheduler+0x46>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60fb      	str	r3, [r7, #12]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f96:	4b39      	ldr	r3, [pc, #228]	; (800607c <xPortStartScheduler+0x12c>)
 8005f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	4b31      	ldr	r3, [pc, #196]	; (8006080 <xPortStartScheduler+0x130>)
 8005fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fbe:	4b31      	ldr	r3, [pc, #196]	; (8006084 <xPortStartScheduler+0x134>)
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fc4:	e009      	b.n	8005fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fc6:	4b2f      	ldr	r3, [pc, #188]	; (8006084 <xPortStartScheduler+0x134>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <xPortStartScheduler+0x134>)
 8005fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d0ef      	beq.n	8005fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fe6:	4b27      	ldr	r3, [pc, #156]	; (8006084 <xPortStartScheduler+0x134>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f1c3 0307 	rsb	r3, r3, #7
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d00a      	beq.n	8006008 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60bb      	str	r3, [r7, #8]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006008:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <xPortStartScheduler+0x134>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <xPortStartScheduler+0x134>)
 8006010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <xPortStartScheduler+0x134>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800601a:	4a1a      	ldr	r2, [pc, #104]	; (8006084 <xPortStartScheduler+0x134>)
 800601c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <xPortStartScheduler+0x138>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <xPortStartScheduler+0x138>)
 800602c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <xPortStartScheduler+0x138>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a14      	ldr	r2, [pc, #80]	; (8006088 <xPortStartScheduler+0x138>)
 8006038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800603c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800603e:	f000 f8dd 	bl	80061fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <xPortStartScheduler+0x13c>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006048:	f000 f8fc 	bl	8006244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800604c:	4b10      	ldr	r3, [pc, #64]	; (8006090 <xPortStartScheduler+0x140>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0f      	ldr	r2, [pc, #60]	; (8006090 <xPortStartScheduler+0x140>)
 8006052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006058:	f7ff ff66 	bl	8005f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800605c:	f7ff f84a 	bl	80050f4 <vTaskSwitchContext>
	prvTaskExitError();
 8006060:	f7ff ff20 	bl	8005ea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	e000ed00 	.word	0xe000ed00
 8006074:	410fc271 	.word	0x410fc271
 8006078:	410fc270 	.word	0x410fc270
 800607c:	e000e400 	.word	0xe000e400
 8006080:	20000f30 	.word	0x20000f30
 8006084:	20000f34 	.word	0x20000f34
 8006088:	e000ed20 	.word	0xe000ed20
 800608c:	2000000c 	.word	0x2000000c
 8006090:	e000ef34 	.word	0xe000ef34

08006094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	607b      	str	r3, [r7, #4]
}
 80060ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <vPortEnterCritical+0x58>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <vPortEnterCritical+0x58>)
 80060b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060b8:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <vPortEnterCritical+0x58>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10f      	bne.n	80060e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <vPortEnterCritical+0x5c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	603b      	str	r3, [r7, #0]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <vPortEnterCritical+0x4a>
	}
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	2000000c 	.word	0x2000000c
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <vPortExitCritical+0x50>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <vPortExitCritical+0x24>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	607b      	str	r3, [r7, #4]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <vPortExitCritical+0x50>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3b01      	subs	r3, #1
 800611e:	4a09      	ldr	r2, [pc, #36]	; (8006144 <vPortExitCritical+0x50>)
 8006120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006122:	4b08      	ldr	r3, [pc, #32]	; (8006144 <vPortExitCritical+0x50>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <vPortExitCritical+0x42>
 800612a:	2300      	movs	r3, #0
 800612c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f383 8811 	msr	BASEPRI, r3
}
 8006134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	2000000c 	.word	0x2000000c
	...

08006150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006150:	f3ef 8009 	mrs	r0, PSP
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <pxCurrentTCBConst>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	f01e 0f10 	tst.w	lr, #16
 8006160:	bf08      	it	eq
 8006162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616a:	6010      	str	r0, [r2, #0]
 800616c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006174:	f380 8811 	msr	BASEPRI, r0
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f7fe ffb8 	bl	80050f4 <vTaskSwitchContext>
 8006184:	f04f 0000 	mov.w	r0, #0
 8006188:	f380 8811 	msr	BASEPRI, r0
 800618c:	bc09      	pop	{r0, r3}
 800618e:	6819      	ldr	r1, [r3, #0]
 8006190:	6808      	ldr	r0, [r1, #0]
 8006192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006196:	f01e 0f10 	tst.w	lr, #16
 800619a:	bf08      	it	eq
 800619c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061a0:	f380 8809 	msr	PSP, r0
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	f3af 8000 	nop.w

080061b0 <pxCurrentTCBConst>:
 80061b0:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop

080061b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	607b      	str	r3, [r7, #4]
}
 80061d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061d2:	f7fe fed5 	bl	8004f80 <xTaskIncrementTick>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <xPortSysTickHandler+0x40>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	2300      	movs	r3, #0
 80061e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f383 8811 	msr	BASEPRI, r3
}
 80061ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <vPortSetupTimerInterrupt+0x34>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <vPortSetupTimerInterrupt+0x38>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <vPortSetupTimerInterrupt+0x3c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a0a      	ldr	r2, [pc, #40]	; (800623c <vPortSetupTimerInterrupt+0x40>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	4a09      	ldr	r2, [pc, #36]	; (8006240 <vPortSetupTimerInterrupt+0x44>)
 800621a:	3b01      	subs	r3, #1
 800621c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800621e:	4b04      	ldr	r3, [pc, #16]	; (8006230 <vPortSetupTimerInterrupt+0x34>)
 8006220:	2207      	movs	r2, #7
 8006222:	601a      	str	r2, [r3, #0]
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	e000e010 	.word	0xe000e010
 8006234:	e000e018 	.word	0xe000e018
 8006238:	20000000 	.word	0x20000000
 800623c:	10624dd3 	.word	0x10624dd3
 8006240:	e000e014 	.word	0xe000e014

08006244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006254 <vPortEnableVFP+0x10>
 8006248:	6801      	ldr	r1, [r0, #0]
 800624a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800624e:	6001      	str	r1, [r0, #0]
 8006250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006252:	bf00      	nop
 8006254:	e000ed88 	.word	0xe000ed88

08006258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800625e:	f3ef 8305 	mrs	r3, IPSR
 8006262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	d914      	bls.n	8006294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800626a:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <vPortValidateInterruptPriority+0x70>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <vPortValidateInterruptPriority+0x74>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	7afa      	ldrb	r2, [r7, #11]
 800627a:	429a      	cmp	r2, r3
 800627c:	d20a      	bcs.n	8006294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	607b      	str	r3, [r7, #4]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <vPortValidateInterruptPriority+0x78>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <vPortValidateInterruptPriority+0x7c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d90a      	bls.n	80062ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	603b      	str	r3, [r7, #0]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <vPortValidateInterruptPriority+0x60>
	}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	e000e3f0 	.word	0xe000e3f0
 80062cc:	20000f30 	.word	0x20000f30
 80062d0:	e000ed0c 	.word	0xe000ed0c
 80062d4:	20000f34 	.word	0x20000f34

080062d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	; 0x28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062e4:	f7fe fd90 	bl	8004e08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062e8:	4b5b      	ldr	r3, [pc, #364]	; (8006458 <pvPortMalloc+0x180>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062f0:	f000 f920 	bl	8006534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062f4:	4b59      	ldr	r3, [pc, #356]	; (800645c <pvPortMalloc+0x184>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 8093 	bne.w	8006428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01d      	beq.n	8006344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006308:	2208      	movs	r2, #8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4413      	add	r3, r2
 800630e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	2b00      	cmp	r3, #0
 8006318:	d014      	beq.n	8006344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f023 0307 	bic.w	r3, r3, #7
 8006320:	3308      	adds	r3, #8
 8006322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <pvPortMalloc+0x6c>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	617b      	str	r3, [r7, #20]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d06e      	beq.n	8006428 <pvPortMalloc+0x150>
 800634a:	4b45      	ldr	r3, [pc, #276]	; (8006460 <pvPortMalloc+0x188>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d869      	bhi.n	8006428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006354:	4b43      	ldr	r3, [pc, #268]	; (8006464 <pvPortMalloc+0x18c>)
 8006356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006358:	4b42      	ldr	r3, [pc, #264]	; (8006464 <pvPortMalloc+0x18c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800635e:	e004      	b.n	800636a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d903      	bls.n	800637c <pvPortMalloc+0xa4>
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f1      	bne.n	8006360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800637c:	4b36      	ldr	r3, [pc, #216]	; (8006458 <pvPortMalloc+0x180>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	429a      	cmp	r2, r3
 8006384:	d050      	beq.n	8006428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2208      	movs	r2, #8
 800638c:	4413      	add	r3, r2
 800638e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	1ad2      	subs	r2, r2, r3
 80063a0:	2308      	movs	r3, #8
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d91f      	bls.n	80063e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <pvPortMalloc+0xf8>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	613b      	str	r3, [r7, #16]
}
 80063cc:	bf00      	nop
 80063ce:	e7fe      	b.n	80063ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063e2:	69b8      	ldr	r0, [r7, #24]
 80063e4:	f000 f908 	bl	80065f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <pvPortMalloc+0x188>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1b      	ldr	r2, [pc, #108]	; (8006460 <pvPortMalloc+0x188>)
 80063f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <pvPortMalloc+0x188>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <pvPortMalloc+0x190>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d203      	bcs.n	800640a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006402:	4b17      	ldr	r3, [pc, #92]	; (8006460 <pvPortMalloc+0x188>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a18      	ldr	r2, [pc, #96]	; (8006468 <pvPortMalloc+0x190>)
 8006408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <pvPortMalloc+0x184>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	431a      	orrs	r2, r3
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <pvPortMalloc+0x194>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a11      	ldr	r2, [pc, #68]	; (800646c <pvPortMalloc+0x194>)
 8006426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006428:	f7fe fcfc 	bl	8004e24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <pvPortMalloc+0x174>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	60fb      	str	r3, [r7, #12]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <pvPortMalloc+0x172>
	return pvReturn;
 800644c:	69fb      	ldr	r3, [r7, #28]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3728      	adds	r7, #40	; 0x28
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20004b40 	.word	0x20004b40
 800645c:	20004b54 	.word	0x20004b54
 8006460:	20004b44 	.word	0x20004b44
 8006464:	20004b38 	.word	0x20004b38
 8006468:	20004b48 	.word	0x20004b48
 800646c:	20004b4c 	.word	0x20004b4c

08006470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d04d      	beq.n	800651e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006482:	2308      	movs	r3, #8
 8006484:	425b      	negs	r3, r3
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4413      	add	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4b24      	ldr	r3, [pc, #144]	; (8006528 <vPortFree+0xb8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <vPortFree+0x44>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <vPortFree+0x62>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60bb      	str	r3, [r7, #8]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	4b14      	ldr	r3, [pc, #80]	; (8006528 <vPortFree+0xb8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01e      	beq.n	800651e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11a      	bne.n	800651e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <vPortFree+0xb8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	401a      	ands	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064f8:	f7fe fc86 	bl	8004e08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <vPortFree+0xbc>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4413      	add	r3, r2
 8006506:	4a09      	ldr	r2, [pc, #36]	; (800652c <vPortFree+0xbc>)
 8006508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800650a:	6938      	ldr	r0, [r7, #16]
 800650c:	f000 f874 	bl	80065f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <vPortFree+0xc0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	4a06      	ldr	r2, [pc, #24]	; (8006530 <vPortFree+0xc0>)
 8006518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800651a:	f7fe fc83 	bl	8004e24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20004b54 	.word	0x20004b54
 800652c:	20004b44 	.word	0x20004b44
 8006530:	20004b50 	.word	0x20004b50

08006534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800653a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800653e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006540:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <prvHeapInit+0xac>)
 8006542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3307      	adds	r3, #7
 8006552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0307 	bic.w	r3, r3, #7
 800655a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <prvHeapInit+0xac>)
 8006564:	4413      	add	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <prvHeapInit+0xb0>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <prvHeapInit+0xb0>)
 8006574:	2200      	movs	r2, #0
 8006576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006580:	2208      	movs	r2, #8
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <prvHeapInit+0xb4>)
 8006594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <prvHeapInit+0xb4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <prvHeapInit+0xb4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <prvHeapInit+0xb4>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <prvHeapInit+0xb8>)
 80065c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <prvHeapInit+0xbc>)
 80065ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <prvHeapInit+0xc0>)
 80065ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000f38 	.word	0x20000f38
 80065e4:	20004b38 	.word	0x20004b38
 80065e8:	20004b40 	.word	0x20004b40
 80065ec:	20004b48 	.word	0x20004b48
 80065f0:	20004b44 	.word	0x20004b44
 80065f4:	20004b54 	.word	0x20004b54

080065f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <prvInsertBlockIntoFreeList+0xac>)
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e002      	b.n	800660c <prvInsertBlockIntoFreeList+0x14>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d8f7      	bhi.n	8006606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4413      	add	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d108      	bne.n	800663a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	441a      	add	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d118      	bne.n	8006680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d00d      	beq.n	8006676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e008      	b.n	8006688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e003      	b.n	8006688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d002      	beq.n	8006696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20004b38 	.word	0x20004b38
 80066a8:	20004b40 	.word	0x20004b40

080066ac <arm_mat_trans_f32>:
 80066ac:	f8b0 c000 	ldrh.w	ip, [r0]
 80066b0:	884a      	ldrh	r2, [r1, #2]
 80066b2:	8843      	ldrh	r3, [r0, #2]
 80066b4:	4562      	cmp	r2, ip
 80066b6:	d164      	bne.n	8006782 <arm_mat_trans_f32+0xd6>
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	f8b1 e000 	ldrh.w	lr, [r1]
 80066c0:	459e      	cmp	lr, r3
 80066c2:	b083      	sub	sp, #12
 80066c4:	d160      	bne.n	8006788 <arm_mat_trans_f32+0xdc>
 80066c6:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80066ca:	f00e 0303 	and.w	r3, lr, #3
 80066ce:	461a      	mov	r2, r3
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3a01      	subs	r2, #1
 80066da:	f103 0902 	add.w	r9, r3, #2
 80066de:	b292      	uxth	r2, r2
 80066e0:	3301      	adds	r3, #1
 80066e2:	ea4f 170c 	mov.w	r7, ip, lsl #4
 80066e6:	fb03 f707 	mul.w	r7, r3, r7
 80066ea:	3201      	adds	r2, #1
 80066ec:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 80066f0:	6844      	ldr	r4, [r0, #4]
 80066f2:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80066f6:	4643      	mov	r3, r8
 80066f8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80066fc:	46b8      	mov	r8, r7
 80066fe:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8006702:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8006706:	2600      	movs	r6, #0
 8006708:	461f      	mov	r7, r3
 800670a:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 800670e:	b3b7      	cbz	r7, 800677e <arm_mat_trans_f32+0xd2>
 8006710:	f104 0210 	add.w	r2, r4, #16
 8006714:	eb04 0509 	add.w	r5, r4, r9
 8006718:	4603      	mov	r3, r0
 800671a:	ed52 7a04 	vldr	s15, [r2, #-16]
 800671e:	edc3 7a00 	vstr	s15, [r3]
 8006722:	ed52 7a03 	vldr	s15, [r2, #-12]
 8006726:	440b      	add	r3, r1
 8006728:	edc3 7a00 	vstr	s15, [r3]
 800672c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8006730:	440b      	add	r3, r1
 8006732:	edc3 7a00 	vstr	s15, [r3]
 8006736:	ed52 7a01 	vldr	s15, [r2, #-4]
 800673a:	3210      	adds	r2, #16
 800673c:	440b      	add	r3, r1
 800673e:	42aa      	cmp	r2, r5
 8006740:	edc3 7a00 	vstr	s15, [r3]
 8006744:	440b      	add	r3, r1
 8006746:	d1e8      	bne.n	800671a <arm_mat_trans_f32+0x6e>
 8006748:	eb04 030b 	add.w	r3, r4, fp
 800674c:	4440      	add	r0, r8
 800674e:	9a01      	ldr	r2, [sp, #4]
 8006750:	b17a      	cbz	r2, 8006772 <arm_mat_trans_f32+0xc6>
 8006752:	eb03 040e 	add.w	r4, r3, lr
 8006756:	f853 2b04 	ldr.w	r2, [r3], #4
 800675a:	6002      	str	r2, [r0, #0]
 800675c:	42a3      	cmp	r3, r4
 800675e:	4408      	add	r0, r1
 8006760:	d1f9      	bne.n	8006756 <arm_mat_trans_f32+0xaa>
 8006762:	3601      	adds	r6, #1
 8006764:	b2b6      	uxth	r6, r6
 8006766:	45b4      	cmp	ip, r6
 8006768:	d1cf      	bne.n	800670a <arm_mat_trans_f32+0x5e>
 800676a:	2000      	movs	r0, #0
 800676c:	b003      	add	sp, #12
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	3601      	adds	r6, #1
 8006774:	b2b6      	uxth	r6, r6
 8006776:	45b4      	cmp	ip, r6
 8006778:	461c      	mov	r4, r3
 800677a:	d1c6      	bne.n	800670a <arm_mat_trans_f32+0x5e>
 800677c:	e7f5      	b.n	800676a <arm_mat_trans_f32+0xbe>
 800677e:	4623      	mov	r3, r4
 8006780:	e7e5      	b.n	800674e <arm_mat_trans_f32+0xa2>
 8006782:	f06f 0002 	mvn.w	r0, #2
 8006786:	4770      	bx	lr
 8006788:	f06f 0002 	mvn.w	r0, #2
 800678c:	b003      	add	sp, #12
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006792:	bf00      	nop

08006794 <arm_mat_mult_f32>:
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	8843      	ldrh	r3, [r0, #2]
 800679a:	880d      	ldrh	r5, [r1, #0]
 800679c:	8804      	ldrh	r4, [r0, #0]
 800679e:	b087      	sub	sp, #28
 80067a0:	429d      	cmp	r5, r3
 80067a2:	9403      	str	r4, [sp, #12]
 80067a4:	f040 8094 	bne.w	80068d0 <arm_mat_mult_f32+0x13c>
 80067a8:	8813      	ldrh	r3, [r2, #0]
 80067aa:	4626      	mov	r6, r4
 80067ac:	42b3      	cmp	r3, r6
 80067ae:	4614      	mov	r4, r2
 80067b0:	f040 808e 	bne.w	80068d0 <arm_mat_mult_f32+0x13c>
 80067b4:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 80067b8:	8863      	ldrh	r3, [r4, #2]
 80067ba:	4543      	cmp	r3, r8
 80067bc:	f040 8088 	bne.w	80068d0 <arm_mat_mult_f32+0x13c>
 80067c0:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 80067c4:	f005 0303 	and.w	r3, r5, #3
 80067c8:	461a      	mov	r2, r3
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80067d4:	6860      	ldr	r0, [r4, #4]
 80067d6:	9004      	str	r0, [sp, #16]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3301      	adds	r3, #1
 80067dc:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80067e0:	3a01      	subs	r2, #1
 80067e2:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 80067e6:	fb03 fb0b 	mul.w	fp, r3, fp
 80067ea:	00ab      	lsls	r3, r5, #2
 80067ec:	b292      	uxth	r2, r2
 80067ee:	9305      	str	r3, [sp, #20]
 80067f0:	2300      	movs	r3, #0
 80067f2:	3201      	adds	r2, #1
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	460b      	mov	r3, r1
 80067f8:	684c      	ldr	r4, [r1, #4]
 80067fa:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80067fe:	4651      	mov	r1, sl
 8006800:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8006804:	469a      	mov	sl, r3
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	9a02      	ldr	r2, [sp, #8]
 800680a:	2600      	movs	r6, #0
 800680c:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8006810:	f10c 0510 	add.w	r5, ip, #16
 8006814:	eddf 7a31 	vldr	s15, [pc, #196]	; 80068dc <arm_mat_mult_f32+0x148>
 8006818:	2900      	cmp	r1, #0
 800681a:	d057      	beq.n	80068cc <arm_mat_mult_f32+0x138>
 800681c:	f10e 0210 	add.w	r2, lr, #16
 8006820:	4623      	mov	r3, r4
 8006822:	ed93 5a00 	vldr	s10, [r3]
 8006826:	ed52 5a04 	vldr	s11, [r2, #-16]
 800682a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800682e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006832:	ed12 6a01 	vldr	s12, [r2, #-4]
 8006836:	4403      	add	r3, r0
 8006838:	ee65 5a25 	vmul.f32	s11, s10, s11
 800683c:	ed93 5a00 	vldr	s10, [r3]
 8006840:	4403      	add	r3, r0
 8006842:	ee27 7a05 	vmul.f32	s14, s14, s10
 8006846:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800684a:	ed93 5a00 	vldr	s10, [r3]
 800684e:	4403      	add	r3, r0
 8006850:	ee77 5a27 	vadd.f32	s11, s14, s15
 8006854:	ee65 7a26 	vmul.f32	s15, s10, s13
 8006858:	edd3 6a00 	vldr	s13, [r3]
 800685c:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8006860:	3210      	adds	r2, #16
 8006862:	ee66 7a26 	vmul.f32	s15, s12, s13
 8006866:	42aa      	cmp	r2, r5
 8006868:	4403      	add	r3, r0
 800686a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800686e:	d1d8      	bne.n	8006822 <arm_mat_mult_f32+0x8e>
 8006870:	445c      	add	r4, fp
 8006872:	4663      	mov	r3, ip
 8006874:	9a01      	ldr	r2, [sp, #4]
 8006876:	b162      	cbz	r2, 8006892 <arm_mat_mult_f32+0xfe>
 8006878:	eb03 0209 	add.w	r2, r3, r9
 800687c:	ecf3 6a01 	vldmia	r3!, {s13}
 8006880:	ed94 7a00 	vldr	s14, [r4]
 8006884:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006888:	4293      	cmp	r3, r2
 800688a:	4404      	add	r4, r0
 800688c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006890:	d1f4      	bne.n	800687c <arm_mat_mult_f32+0xe8>
 8006892:	ece7 7a01 	vstmia	r7!, {s15}
 8006896:	3601      	adds	r6, #1
 8006898:	b2b6      	uxth	r6, r6
 800689a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800689e:	45b0      	cmp	r8, r6
 80068a0:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80068a4:	d1b6      	bne.n	8006814 <arm_mat_mult_f32+0x80>
 80068a6:	9a03      	ldr	r2, [sp, #12]
 80068a8:	9c05      	ldr	r4, [sp, #20]
 80068aa:	3a01      	subs	r2, #1
 80068ac:	b292      	uxth	r2, r2
 80068ae:	4615      	mov	r5, r2
 80068b0:	9203      	str	r2, [sp, #12]
 80068b2:	9a02      	ldr	r2, [sp, #8]
 80068b4:	4442      	add	r2, r8
 80068b6:	b292      	uxth	r2, r2
 80068b8:	44a6      	add	lr, r4
 80068ba:	44a4      	add	ip, r4
 80068bc:	9202      	str	r2, [sp, #8]
 80068be:	461c      	mov	r4, r3
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	d1a0      	bne.n	8006806 <arm_mat_mult_f32+0x72>
 80068c4:	4628      	mov	r0, r5
 80068c6:	b007      	add	sp, #28
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	4673      	mov	r3, lr
 80068ce:	e7d1      	b.n	8006874 <arm_mat_mult_f32+0xe0>
 80068d0:	f06f 0002 	mvn.w	r0, #2
 80068d4:	b007      	add	sp, #28
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	bf00      	nop
 80068dc:	00000000 	.word	0x00000000

080068e0 <arm_mat_inverse_f32>:
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	8804      	ldrh	r4, [r0, #0]
 80068e6:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80068ea:	454c      	cmp	r4, r9
 80068ec:	b08b      	sub	sp, #44	; 0x2c
 80068ee:	f040 8118 	bne.w	8006b22 <arm_mat_inverse_f32+0x242>
 80068f2:	880a      	ldrh	r2, [r1, #0]
 80068f4:	884b      	ldrh	r3, [r1, #2]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	f040 8113 	bne.w	8006b22 <arm_mat_inverse_f32+0x242>
 80068fc:	429c      	cmp	r4, r3
 80068fe:	f040 8110 	bne.w	8006b22 <arm_mat_inverse_f32+0x242>
 8006902:	684b      	ldr	r3, [r1, #4]
 8006904:	9307      	str	r3, [sp, #28]
 8006906:	6843      	ldr	r3, [r0, #4]
 8006908:	9009      	str	r0, [sp, #36]	; 0x24
 800690a:	9302      	str	r3, [sp, #8]
 800690c:	b32c      	cbz	r4, 800695a <arm_mat_inverse_f32+0x7a>
 800690e:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
 8006912:	3e01      	subs	r6, #1
 8006914:	2700      	movs	r7, #0
 8006916:	f104 38ff 	add.w	r8, r4, #4294967295
 800691a:	46a3      	mov	fp, r4
 800691c:	00b6      	lsls	r6, r6, #2
 800691e:	9d07      	ldr	r5, [sp, #28]
 8006920:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8006924:	463c      	mov	r4, r7
 8006926:	e004      	b.n	8006932 <arm_mat_inverse_f32+0x52>
 8006928:	f000 fb3b 	bl	8006fa2 <memset>
 800692c:	4435      	add	r5, r6
 800692e:	3401      	adds	r4, #1
 8006930:	3e04      	subs	r6, #4
 8006932:	463a      	mov	r2, r7
 8006934:	2100      	movs	r1, #0
 8006936:	4628      	mov	r0, r5
 8006938:	b114      	cbz	r4, 8006940 <arm_mat_inverse_f32+0x60>
 800693a:	f000 fb32 	bl	8006fa2 <memset>
 800693e:	443d      	add	r5, r7
 8006940:	f8c5 a000 	str.w	sl, [r5]
 8006944:	45a0      	cmp	r8, r4
 8006946:	f105 0504 	add.w	r5, r5, #4
 800694a:	f107 0704 	add.w	r7, r7, #4
 800694e:	4632      	mov	r2, r6
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	4628      	mov	r0, r5
 8006956:	d1e7      	bne.n	8006928 <arm_mat_inverse_f32+0x48>
 8006958:	465c      	mov	r4, fp
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	f000 80d7 	beq.w	8006b10 <arm_mat_inverse_f32+0x230>
 8006962:	00a3      	lsls	r3, r4, #2
 8006964:	ea4f 0889 	mov.w	r8, r9, lsl #2
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	2700      	movs	r7, #0
 800696c:	f108 0204 	add.w	r2, r8, #4
 8006970:	469c      	mov	ip, r3
 8006972:	9e02      	ldr	r6, [sp, #8]
 8006974:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006978:	9208      	str	r2, [sp, #32]
 800697a:	1e63      	subs	r3, r4, #1
 800697c:	9706      	str	r7, [sp, #24]
 800697e:	9303      	str	r3, [sp, #12]
 8006980:	464d      	mov	r5, r9
 8006982:	42bc      	cmp	r4, r7
 8006984:	edd6 6a00 	vldr	s13, [r6]
 8006988:	f000 80c2 	beq.w	8006b10 <arm_mat_inverse_f32+0x230>
 800698c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8006b7c <arm_mat_inverse_f32+0x29c>
 8006990:	463a      	mov	r2, r7
 8006992:	4633      	mov	r3, r6
 8006994:	edd3 7a00 	vldr	s15, [r3]
 8006998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800699c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a0:	bfd8      	it	le
 80069a2:	eef1 7a67 	vnegle.f32	s15, s15
 80069a6:	eef4 7a47 	vcmp.f32	s15, s14
 80069aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ae:	f102 0201 	add.w	r2, r2, #1
 80069b2:	bfc8      	it	gt
 80069b4:	eeb0 7a67 	vmovgt.f32	s14, s15
 80069b8:	4294      	cmp	r4, r2
 80069ba:	4443      	add	r3, r8
 80069bc:	d1ea      	bne.n	8006994 <arm_mat_inverse_f32+0xb4>
 80069be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80069c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c6:	f000 80a3 	beq.w	8006b10 <arm_mat_inverse_f32+0x230>
 80069ca:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	bfd4      	ite	le
 80069d4:	eef1 7a66 	vnegle.f32	s15, s13
 80069d8:	eef0 7a66 	vmovgt.f32	s15, s13
 80069dc:	eeb4 7a67 	vcmp.f32	s14, s15
 80069e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e4:	d010      	beq.n	8006a08 <arm_mat_inverse_f32+0x128>
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	b173      	cbz	r3, 8006a08 <arm_mat_inverse_f32+0x128>
 80069ea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80069ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f2:	eef1 7a66 	vneg.f32	s15, s13
 80069f6:	bfc8      	it	gt
 80069f8:	eef0 7a66 	vmovgt.f32	s15, s13
 80069fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8006a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a04:	f000 8092 	beq.w	8006b2c <arm_mat_inverse_f32+0x24c>
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	b933      	cbnz	r3, 8006a1a <arm_mat_inverse_f32+0x13a>
 8006a0c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a14:	d07c      	beq.n	8006b10 <arm_mat_inverse_f32+0x230>
 8006a16:	2300      	movs	r3, #0
 8006a18:	9306      	str	r3, [sp, #24]
 8006a1a:	eb0e 0308 	add.w	r3, lr, r8
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4633      	mov	r3, r6
 8006a24:	ed93 7a00 	vldr	s14, [r3]
 8006a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a2c:	3a01      	subs	r2, #1
 8006a2e:	ece3 7a01 	vstmia	r3!, {s15}
 8006a32:	d1f7      	bne.n	8006a24 <arm_mat_inverse_f32+0x144>
 8006a34:	4649      	mov	r1, r9
 8006a36:	4673      	mov	r3, lr
 8006a38:	ed93 7a00 	vldr	s14, [r3]
 8006a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a40:	3901      	subs	r1, #1
 8006a42:	ece3 7a01 	vstmia	r3!, {s15}
 8006a46:	d1f7      	bne.n	8006a38 <arm_mat_inverse_f32+0x158>
 8006a48:	00bb      	lsls	r3, r7, #2
 8006a4a:	9807      	ldr	r0, [sp, #28]
 8006a4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a50:	f8cd 8014 	str.w	r8, [sp, #20]
 8006a54:	4698      	mov	r8, r3
 8006a56:	42b9      	cmp	r1, r7
 8006a58:	f000 808c 	beq.w	8006b74 <arm_mat_inverse_f32+0x294>
 8006a5c:	eddb 6a00 	vldr	s13, [fp]
 8006a60:	462a      	mov	r2, r5
 8006a62:	46b2      	mov	sl, r6
 8006a64:	465b      	mov	r3, fp
 8006a66:	ecfa 7a01 	vldmia	sl!, {s15}
 8006a6a:	ed93 7a00 	vldr	s14, [r3]
 8006a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a72:	3a01      	subs	r2, #1
 8006a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a78:	ece3 7a01 	vstmia	r3!, {s15}
 8006a7c:	d1f3      	bne.n	8006a66 <arm_mat_inverse_f32+0x186>
 8006a7e:	44e3      	add	fp, ip
 8006a80:	464a      	mov	r2, r9
 8006a82:	46f2      	mov	sl, lr
 8006a84:	4603      	mov	r3, r0
 8006a86:	ecfa 7a01 	vldmia	sl!, {s15}
 8006a8a:	ed93 7a00 	vldr	s14, [r3]
 8006a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a92:	3a01      	subs	r2, #1
 8006a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a98:	ece3 7a01 	vstmia	r3!, {s15}
 8006a9c:	d1f3      	bne.n	8006a86 <arm_mat_inverse_f32+0x1a6>
 8006a9e:	9b01      	ldr	r3, [sp, #4]
 8006aa0:	4418      	add	r0, r3
 8006aa2:	3101      	adds	r1, #1
 8006aa4:	428c      	cmp	r4, r1
 8006aa6:	44c3      	add	fp, r8
 8006aa8:	d1d5      	bne.n	8006a56 <arm_mat_inverse_f32+0x176>
 8006aaa:	9b02      	ldr	r3, [sp, #8]
 8006aac:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006ab0:	f8dd e010 	ldr.w	lr, [sp, #16]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	9302      	str	r3, [sp, #8]
 8006ab8:	9b08      	ldr	r3, [sp, #32]
 8006aba:	441e      	add	r6, r3
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	3d01      	subs	r5, #1
 8006ac0:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ac4:	f107 0701 	add.w	r7, r7, #1
 8006ac8:	9303      	str	r3, [sp, #12]
 8006aca:	f1ac 0c04 	sub.w	ip, ip, #4
 8006ace:	f47f af58 	bne.w	8006982 <arm_mat_inverse_f32+0xa2>
 8006ad2:	9b06      	ldr	r3, [sp, #24]
 8006ad4:	bb0b      	cbnz	r3, 8006b1a <arm_mat_inverse_f32+0x23a>
 8006ad6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	d11c      	bne.n	8006b1a <arm_mat_inverse_f32+0x23a>
 8006ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	edd3 7a00 	vldr	s15, [r3]
 8006ae8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	fb09 f404 	mul.w	r4, r9, r4
 8006af4:	bf08      	it	eq
 8006af6:	3304      	addeq	r3, #4
 8006af8:	d007      	beq.n	8006b0a <arm_mat_inverse_f32+0x22a>
 8006afa:	e00e      	b.n	8006b1a <arm_mat_inverse_f32+0x23a>
 8006afc:	ecf3 7a01 	vldmia	r3!, {s15}
 8006b00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b08:	d130      	bne.n	8006b6c <arm_mat_inverse_f32+0x28c>
 8006b0a:	3501      	adds	r5, #1
 8006b0c:	42a5      	cmp	r5, r4
 8006b0e:	d1f5      	bne.n	8006afc <arm_mat_inverse_f32+0x21c>
 8006b10:	f06f 0004 	mvn.w	r0, #4
 8006b14:	b00b      	add	sp, #44	; 0x2c
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	b00b      	add	sp, #44	; 0x2c
 8006b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b22:	f06f 0002 	mvn.w	r0, #2
 8006b26:	b00b      	add	sp, #44	; 0x2c
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4632      	mov	r2, r6
 8006b32:	6810      	ldr	r0, [r2, #0]
 8006b34:	f8d3 a000 	ldr.w	sl, [r3]
 8006b38:	f842 ab04 	str.w	sl, [r2], #4
 8006b3c:	3901      	subs	r1, #1
 8006b3e:	f843 0b04 	str.w	r0, [r3], #4
 8006b42:	d1f6      	bne.n	8006b32 <arm_mat_inverse_f32+0x252>
 8006b44:	eb08 030e 	add.w	r3, r8, lr
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	464a      	mov	r2, r9
 8006b4e:	4673      	mov	r3, lr
 8006b50:	6808      	ldr	r0, [r1, #0]
 8006b52:	f8d3 a000 	ldr.w	sl, [r3]
 8006b56:	f841 ab04 	str.w	sl, [r1], #4
 8006b5a:	3a01      	subs	r2, #1
 8006b5c:	f843 0b04 	str.w	r0, [r3], #4
 8006b60:	d1f6      	bne.n	8006b50 <arm_mat_inverse_f32+0x270>
 8006b62:	2301      	movs	r3, #1
 8006b64:	edd6 6a00 	vldr	s13, [r6]
 8006b68:	9306      	str	r3, [sp, #24]
 8006b6a:	e759      	b.n	8006a20 <arm_mat_inverse_f32+0x140>
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	b00b      	add	sp, #44	; 0x2c
 8006b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	44e3      	add	fp, ip
 8006b78:	4418      	add	r0, r3
 8006b7a:	e792      	b.n	8006aa2 <arm_mat_inverse_f32+0x1c2>
 8006b7c:	00000000 	.word	0x00000000

08006b80 <arm_mat_init_f32>:
 8006b80:	8001      	strh	r1, [r0, #0]
 8006b82:	8042      	strh	r2, [r0, #2]
 8006b84:	6043      	str	r3, [r0, #4]
 8006b86:	4770      	bx	lr

08006b88 <rand>:
 8006b88:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <rand+0x5c>)
 8006b8a:	b510      	push	{r4, lr}
 8006b8c:	681c      	ldr	r4, [r3, #0]
 8006b8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b90:	b9b3      	cbnz	r3, 8006bc0 <rand+0x38>
 8006b92:	2018      	movs	r0, #24
 8006b94:	f000 fb4e 	bl	8007234 <malloc>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6320      	str	r0, [r4, #48]	; 0x30
 8006b9c:	b920      	cbnz	r0, 8006ba8 <rand+0x20>
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <rand+0x60>)
 8006ba0:	4812      	ldr	r0, [pc, #72]	; (8006bec <rand+0x64>)
 8006ba2:	2152      	movs	r1, #82	; 0x52
 8006ba4:	f000 fadc 	bl	8007160 <__assert_func>
 8006ba8:	4911      	ldr	r1, [pc, #68]	; (8006bf0 <rand+0x68>)
 8006baa:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <rand+0x6c>)
 8006bac:	e9c0 1300 	strd	r1, r3, [r0]
 8006bb0:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <rand+0x70>)
 8006bb2:	6083      	str	r3, [r0, #8]
 8006bb4:	230b      	movs	r3, #11
 8006bb6:	8183      	strh	r3, [r0, #12]
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2001      	movs	r0, #1
 8006bbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006bc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006bc2:	480e      	ldr	r0, [pc, #56]	; (8006bfc <rand+0x74>)
 8006bc4:	690b      	ldr	r3, [r1, #16]
 8006bc6:	694c      	ldr	r4, [r1, #20]
 8006bc8:	4a0d      	ldr	r2, [pc, #52]	; (8006c00 <rand+0x78>)
 8006bca:	4358      	muls	r0, r3
 8006bcc:	fb02 0004 	mla	r0, r2, r4, r0
 8006bd0:	fba3 3202 	umull	r3, r2, r3, r2
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	eb40 0002 	adc.w	r0, r0, r2
 8006bda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006bde:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006be2:	bd10      	pop	{r4, pc}
 8006be4:	20000068 	.word	0x20000068
 8006be8:	08007d74 	.word	0x08007d74
 8006bec:	08007d8b 	.word	0x08007d8b
 8006bf0:	abcd330e 	.word	0xabcd330e
 8006bf4:	e66d1234 	.word	0xe66d1234
 8006bf8:	0005deec 	.word	0x0005deec
 8006bfc:	5851f42d 	.word	0x5851f42d
 8006c00:	4c957f2d 	.word	0x4c957f2d

08006c04 <__sflush_r>:
 8006c04:	898a      	ldrh	r2, [r1, #12]
 8006c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	0710      	lsls	r0, r2, #28
 8006c0e:	460c      	mov	r4, r1
 8006c10:	d458      	bmi.n	8006cc4 <__sflush_r+0xc0>
 8006c12:	684b      	ldr	r3, [r1, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dc05      	bgt.n	8006c24 <__sflush_r+0x20>
 8006c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dc02      	bgt.n	8006c24 <__sflush_r+0x20>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	d0f9      	beq.n	8006c1e <__sflush_r+0x1a>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c30:	682f      	ldr	r7, [r5, #0]
 8006c32:	6a21      	ldr	r1, [r4, #32]
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	d032      	beq.n	8006c9e <__sflush_r+0x9a>
 8006c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	075a      	lsls	r2, r3, #29
 8006c3e:	d505      	bpl.n	8006c4c <__sflush_r+0x48>
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	1ac0      	subs	r0, r0, r3
 8006c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c46:	b10b      	cbz	r3, 8006c4c <__sflush_r+0x48>
 8006c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c4a:	1ac0      	subs	r0, r0, r3
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4602      	mov	r2, r0
 8006c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c52:	6a21      	ldr	r1, [r4, #32]
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	d106      	bne.n	8006c6c <__sflush_r+0x68>
 8006c5e:	6829      	ldr	r1, [r5, #0]
 8006c60:	291d      	cmp	r1, #29
 8006c62:	d82b      	bhi.n	8006cbc <__sflush_r+0xb8>
 8006c64:	4a29      	ldr	r2, [pc, #164]	; (8006d0c <__sflush_r+0x108>)
 8006c66:	410a      	asrs	r2, r1
 8006c68:	07d6      	lsls	r6, r2, #31
 8006c6a:	d427      	bmi.n	8006cbc <__sflush_r+0xb8>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	6062      	str	r2, [r4, #4]
 8006c70:	04d9      	lsls	r1, r3, #19
 8006c72:	6922      	ldr	r2, [r4, #16]
 8006c74:	6022      	str	r2, [r4, #0]
 8006c76:	d504      	bpl.n	8006c82 <__sflush_r+0x7e>
 8006c78:	1c42      	adds	r2, r0, #1
 8006c7a:	d101      	bne.n	8006c80 <__sflush_r+0x7c>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b903      	cbnz	r3, 8006c82 <__sflush_r+0x7e>
 8006c80:	6560      	str	r0, [r4, #84]	; 0x54
 8006c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c84:	602f      	str	r7, [r5, #0]
 8006c86:	2900      	cmp	r1, #0
 8006c88:	d0c9      	beq.n	8006c1e <__sflush_r+0x1a>
 8006c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c8e:	4299      	cmp	r1, r3
 8006c90:	d002      	beq.n	8006c98 <__sflush_r+0x94>
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 fa82 	bl	800719c <_free_r>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8006c9c:	e7c0      	b.n	8006c20 <__sflush_r+0x1c>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b0      	blx	r6
 8006ca4:	1c41      	adds	r1, r0, #1
 8006ca6:	d1c8      	bne.n	8006c3a <__sflush_r+0x36>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0c5      	beq.n	8006c3a <__sflush_r+0x36>
 8006cae:	2b1d      	cmp	r3, #29
 8006cb0:	d001      	beq.n	8006cb6 <__sflush_r+0xb2>
 8006cb2:	2b16      	cmp	r3, #22
 8006cb4:	d101      	bne.n	8006cba <__sflush_r+0xb6>
 8006cb6:	602f      	str	r7, [r5, #0]
 8006cb8:	e7b1      	b.n	8006c1e <__sflush_r+0x1a>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	e7ad      	b.n	8006c20 <__sflush_r+0x1c>
 8006cc4:	690f      	ldr	r7, [r1, #16]
 8006cc6:	2f00      	cmp	r7, #0
 8006cc8:	d0a9      	beq.n	8006c1e <__sflush_r+0x1a>
 8006cca:	0793      	lsls	r3, r2, #30
 8006ccc:	680e      	ldr	r6, [r1, #0]
 8006cce:	bf08      	it	eq
 8006cd0:	694b      	ldreq	r3, [r1, #20]
 8006cd2:	600f      	str	r7, [r1, #0]
 8006cd4:	bf18      	it	ne
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	eba6 0807 	sub.w	r8, r6, r7
 8006cdc:	608b      	str	r3, [r1, #8]
 8006cde:	f1b8 0f00 	cmp.w	r8, #0
 8006ce2:	dd9c      	ble.n	8006c1e <__sflush_r+0x1a>
 8006ce4:	6a21      	ldr	r1, [r4, #32]
 8006ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ce8:	4643      	mov	r3, r8
 8006cea:	463a      	mov	r2, r7
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b0      	blx	r6
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dc06      	bgt.n	8006d02 <__sflush_r+0xfe>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	e78e      	b.n	8006c20 <__sflush_r+0x1c>
 8006d02:	4407      	add	r7, r0
 8006d04:	eba8 0800 	sub.w	r8, r8, r0
 8006d08:	e7e9      	b.n	8006cde <__sflush_r+0xda>
 8006d0a:	bf00      	nop
 8006d0c:	dfbffffe 	.word	0xdfbffffe

08006d10 <_fflush_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	690b      	ldr	r3, [r1, #16]
 8006d14:	4605      	mov	r5, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	b913      	cbnz	r3, 8006d20 <_fflush_r+0x10>
 8006d1a:	2500      	movs	r5, #0
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	b118      	cbz	r0, 8006d2a <_fflush_r+0x1a>
 8006d22:	6a03      	ldr	r3, [r0, #32]
 8006d24:	b90b      	cbnz	r3, 8006d2a <_fflush_r+0x1a>
 8006d26:	f000 f8a9 	bl	8006e7c <__sinit>
 8006d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f3      	beq.n	8006d1a <_fflush_r+0xa>
 8006d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d34:	07d0      	lsls	r0, r2, #31
 8006d36:	d404      	bmi.n	8006d42 <_fflush_r+0x32>
 8006d38:	0599      	lsls	r1, r3, #22
 8006d3a:	d402      	bmi.n	8006d42 <_fflush_r+0x32>
 8006d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3e:	f000 f9ff 	bl	8007140 <__retarget_lock_acquire_recursive>
 8006d42:	4628      	mov	r0, r5
 8006d44:	4621      	mov	r1, r4
 8006d46:	f7ff ff5d 	bl	8006c04 <__sflush_r>
 8006d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d4c:	07da      	lsls	r2, r3, #31
 8006d4e:	4605      	mov	r5, r0
 8006d50:	d4e4      	bmi.n	8006d1c <_fflush_r+0xc>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	059b      	lsls	r3, r3, #22
 8006d56:	d4e1      	bmi.n	8006d1c <_fflush_r+0xc>
 8006d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5a:	f000 f9f2 	bl	8007142 <__retarget_lock_release_recursive>
 8006d5e:	e7dd      	b.n	8006d1c <_fflush_r+0xc>

08006d60 <fflush>:
 8006d60:	4601      	mov	r1, r0
 8006d62:	b920      	cbnz	r0, 8006d6e <fflush+0xe>
 8006d64:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <fflush+0x18>)
 8006d66:	4905      	ldr	r1, [pc, #20]	; (8006d7c <fflush+0x1c>)
 8006d68:	4805      	ldr	r0, [pc, #20]	; (8006d80 <fflush+0x20>)
 8006d6a:	f000 b89f 	b.w	8006eac <_fwalk_sglue>
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <fflush+0x24>)
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	f7ff bfcd 	b.w	8006d10 <_fflush_r>
 8006d76:	bf00      	nop
 8006d78:	20000010 	.word	0x20000010
 8006d7c:	08006d11 	.word	0x08006d11
 8006d80:	2000001c 	.word	0x2000001c
 8006d84:	20000068 	.word	0x20000068

08006d88 <std>:
 8006d88:	2300      	movs	r3, #0
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d96:	6083      	str	r3, [r0, #8]
 8006d98:	8181      	strh	r1, [r0, #12]
 8006d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d9c:	81c2      	strh	r2, [r0, #14]
 8006d9e:	6183      	str	r3, [r0, #24]
 8006da0:	4619      	mov	r1, r3
 8006da2:	2208      	movs	r2, #8
 8006da4:	305c      	adds	r0, #92	; 0x5c
 8006da6:	f000 f8fc 	bl	8006fa2 <memset>
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <std+0x38>)
 8006dac:	6263      	str	r3, [r4, #36]	; 0x24
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <std+0x3c>)
 8006db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <std+0x40>)
 8006db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <std+0x44>)
 8006db8:	6224      	str	r4, [r4, #32]
 8006dba:	6323      	str	r3, [r4, #48]	; 0x30
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	08006f1d 	.word	0x08006f1d
 8006dc4:	08006f3f 	.word	0x08006f3f
 8006dc8:	08006f77 	.word	0x08006f77
 8006dcc:	08006f9b 	.word	0x08006f9b

08006dd0 <stdio_exit_handler>:
 8006dd0:	4a02      	ldr	r2, [pc, #8]	; (8006ddc <stdio_exit_handler+0xc>)
 8006dd2:	4903      	ldr	r1, [pc, #12]	; (8006de0 <stdio_exit_handler+0x10>)
 8006dd4:	4803      	ldr	r0, [pc, #12]	; (8006de4 <stdio_exit_handler+0x14>)
 8006dd6:	f000 b869 	b.w	8006eac <_fwalk_sglue>
 8006dda:	bf00      	nop
 8006ddc:	20000010 	.word	0x20000010
 8006de0:	08006d11 	.word	0x08006d11
 8006de4:	2000001c 	.word	0x2000001c

08006de8 <cleanup_stdio>:
 8006de8:	6841      	ldr	r1, [r0, #4]
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <cleanup_stdio+0x34>)
 8006dec:	4299      	cmp	r1, r3
 8006dee:	b510      	push	{r4, lr}
 8006df0:	4604      	mov	r4, r0
 8006df2:	d001      	beq.n	8006df8 <cleanup_stdio+0x10>
 8006df4:	f7ff ff8c 	bl	8006d10 <_fflush_r>
 8006df8:	68a1      	ldr	r1, [r4, #8]
 8006dfa:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <cleanup_stdio+0x38>)
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	d002      	beq.n	8006e06 <cleanup_stdio+0x1e>
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7ff ff85 	bl	8006d10 <_fflush_r>
 8006e06:	68e1      	ldr	r1, [r4, #12]
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <cleanup_stdio+0x3c>)
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	d004      	beq.n	8006e18 <cleanup_stdio+0x30>
 8006e0e:	4620      	mov	r0, r4
 8006e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e14:	f7ff bf7c 	b.w	8006d10 <_fflush_r>
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20004b58 	.word	0x20004b58
 8006e20:	20004bc0 	.word	0x20004bc0
 8006e24:	20004c28 	.word	0x20004c28

08006e28 <global_stdio_init.part.0>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <global_stdio_init.part.0+0x30>)
 8006e2c:	4c0b      	ldr	r4, [pc, #44]	; (8006e5c <global_stdio_init.part.0+0x34>)
 8006e2e:	4a0c      	ldr	r2, [pc, #48]	; (8006e60 <global_stdio_init.part.0+0x38>)
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	4620      	mov	r0, r4
 8006e34:	2200      	movs	r2, #0
 8006e36:	2104      	movs	r1, #4
 8006e38:	f7ff ffa6 	bl	8006d88 <std>
 8006e3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e40:	2201      	movs	r2, #1
 8006e42:	2109      	movs	r1, #9
 8006e44:	f7ff ffa0 	bl	8006d88 <std>
 8006e48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e52:	2112      	movs	r1, #18
 8006e54:	f7ff bf98 	b.w	8006d88 <std>
 8006e58:	20004c90 	.word	0x20004c90
 8006e5c:	20004b58 	.word	0x20004b58
 8006e60:	08006dd1 	.word	0x08006dd1

08006e64 <__sfp_lock_acquire>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__sfp_lock_acquire+0x8>)
 8006e66:	f000 b96b 	b.w	8007140 <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20004c99 	.word	0x20004c99

08006e70 <__sfp_lock_release>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__sfp_lock_release+0x8>)
 8006e72:	f000 b966 	b.w	8007142 <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	20004c99 	.word	0x20004c99

08006e7c <__sinit>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	4604      	mov	r4, r0
 8006e80:	f7ff fff0 	bl	8006e64 <__sfp_lock_acquire>
 8006e84:	6a23      	ldr	r3, [r4, #32]
 8006e86:	b11b      	cbz	r3, 8006e90 <__sinit+0x14>
 8006e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8c:	f7ff bff0 	b.w	8006e70 <__sfp_lock_release>
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <__sinit+0x28>)
 8006e92:	6223      	str	r3, [r4, #32]
 8006e94:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <__sinit+0x2c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f5      	bne.n	8006e88 <__sinit+0xc>
 8006e9c:	f7ff ffc4 	bl	8006e28 <global_stdio_init.part.0>
 8006ea0:	e7f2      	b.n	8006e88 <__sinit+0xc>
 8006ea2:	bf00      	nop
 8006ea4:	08006de9 	.word	0x08006de9
 8006ea8:	20004c90 	.word	0x20004c90

08006eac <_fwalk_sglue>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	4688      	mov	r8, r1
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ebc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ec0:	d505      	bpl.n	8006ece <_fwalk_sglue+0x22>
 8006ec2:	6824      	ldr	r4, [r4, #0]
 8006ec4:	2c00      	cmp	r4, #0
 8006ec6:	d1f7      	bne.n	8006eb8 <_fwalk_sglue+0xc>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d907      	bls.n	8006ee4 <_fwalk_sglue+0x38>
 8006ed4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	d003      	beq.n	8006ee4 <_fwalk_sglue+0x38>
 8006edc:	4629      	mov	r1, r5
 8006ede:	4638      	mov	r0, r7
 8006ee0:	47c0      	blx	r8
 8006ee2:	4306      	orrs	r6, r0
 8006ee4:	3568      	adds	r5, #104	; 0x68
 8006ee6:	e7e9      	b.n	8006ebc <_fwalk_sglue+0x10>

08006ee8 <iprintf>:
 8006ee8:	b40f      	push	{r0, r1, r2, r3}
 8006eea:	b507      	push	{r0, r1, r2, lr}
 8006eec:	4906      	ldr	r1, [pc, #24]	; (8006f08 <iprintf+0x20>)
 8006eee:	ab04      	add	r3, sp, #16
 8006ef0:	6808      	ldr	r0, [r1, #0]
 8006ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef6:	6881      	ldr	r1, [r0, #8]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f000 fa79 	bl	80073f0 <_vfiprintf_r>
 8006efe:	b003      	add	sp, #12
 8006f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f04:	b004      	add	sp, #16
 8006f06:	4770      	bx	lr
 8006f08:	20000068 	.word	0x20000068

08006f0c <putchar>:
 8006f0c:	4b02      	ldr	r3, [pc, #8]	; (8006f18 <putchar+0xc>)
 8006f0e:	4601      	mov	r1, r0
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	6882      	ldr	r2, [r0, #8]
 8006f14:	f000 bd28 	b.w	8007968 <_putc_r>
 8006f18:	20000068 	.word	0x20000068

08006f1c <__sread>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	460c      	mov	r4, r1
 8006f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f24:	f000 f8be 	bl	80070a4 <_read_r>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	bfab      	itete	ge
 8006f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f30:	181b      	addge	r3, r3, r0
 8006f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f36:	bfac      	ite	ge
 8006f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f3a:	81a3      	strhlt	r3, [r4, #12]
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <__swrite>:
 8006f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	461f      	mov	r7, r3
 8006f44:	898b      	ldrh	r3, [r1, #12]
 8006f46:	05db      	lsls	r3, r3, #23
 8006f48:	4605      	mov	r5, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	d505      	bpl.n	8006f5c <__swrite+0x1e>
 8006f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f54:	2302      	movs	r3, #2
 8006f56:	2200      	movs	r2, #0
 8006f58:	f000 f892 	bl	8007080 <_lseek_r>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	4632      	mov	r2, r6
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	f000 b8a9 	b.w	80070c8 <_write_r>

08006f76 <__sseek>:
 8006f76:	b510      	push	{r4, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7e:	f000 f87f 	bl	8007080 <_lseek_r>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	bf15      	itete	ne
 8006f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f92:	81a3      	strheq	r3, [r4, #12]
 8006f94:	bf18      	it	ne
 8006f96:	81a3      	strhne	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__sclose>:
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 b809 	b.w	8006fb4 <_close_r>

08006fa2 <memset>:
 8006fa2:	4402      	add	r2, r0
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d100      	bne.n	8006fac <memset+0xa>
 8006faa:	4770      	bx	lr
 8006fac:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb0:	e7f9      	b.n	8006fa6 <memset+0x4>
	...

08006fb4 <_close_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d06      	ldr	r5, [pc, #24]	; (8006fd0 <_close_r+0x1c>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	602b      	str	r3, [r5, #0]
 8006fc0:	f7fa fca8 	bl	8001914 <_close>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_close_r+0x1a>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_close_r+0x1a>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	20004c94 	.word	0x20004c94

08006fd4 <_reclaim_reent>:
 8006fd4:	4b29      	ldr	r3, [pc, #164]	; (800707c <_reclaim_reent+0xa8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4283      	cmp	r3, r0
 8006fda:	b570      	push	{r4, r5, r6, lr}
 8006fdc:	4604      	mov	r4, r0
 8006fde:	d04b      	beq.n	8007078 <_reclaim_reent+0xa4>
 8006fe0:	69c3      	ldr	r3, [r0, #28]
 8006fe2:	b143      	cbz	r3, 8006ff6 <_reclaim_reent+0x22>
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d144      	bne.n	8007074 <_reclaim_reent+0xa0>
 8006fea:	69e3      	ldr	r3, [r4, #28]
 8006fec:	6819      	ldr	r1, [r3, #0]
 8006fee:	b111      	cbz	r1, 8006ff6 <_reclaim_reent+0x22>
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 f8d3 	bl	800719c <_free_r>
 8006ff6:	6961      	ldr	r1, [r4, #20]
 8006ff8:	b111      	cbz	r1, 8007000 <_reclaim_reent+0x2c>
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 f8ce 	bl	800719c <_free_r>
 8007000:	69e1      	ldr	r1, [r4, #28]
 8007002:	b111      	cbz	r1, 800700a <_reclaim_reent+0x36>
 8007004:	4620      	mov	r0, r4
 8007006:	f000 f8c9 	bl	800719c <_free_r>
 800700a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800700c:	b111      	cbz	r1, 8007014 <_reclaim_reent+0x40>
 800700e:	4620      	mov	r0, r4
 8007010:	f000 f8c4 	bl	800719c <_free_r>
 8007014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007016:	b111      	cbz	r1, 800701e <_reclaim_reent+0x4a>
 8007018:	4620      	mov	r0, r4
 800701a:	f000 f8bf 	bl	800719c <_free_r>
 800701e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007020:	b111      	cbz	r1, 8007028 <_reclaim_reent+0x54>
 8007022:	4620      	mov	r0, r4
 8007024:	f000 f8ba 	bl	800719c <_free_r>
 8007028:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800702a:	b111      	cbz	r1, 8007032 <_reclaim_reent+0x5e>
 800702c:	4620      	mov	r0, r4
 800702e:	f000 f8b5 	bl	800719c <_free_r>
 8007032:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007034:	b111      	cbz	r1, 800703c <_reclaim_reent+0x68>
 8007036:	4620      	mov	r0, r4
 8007038:	f000 f8b0 	bl	800719c <_free_r>
 800703c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800703e:	b111      	cbz	r1, 8007046 <_reclaim_reent+0x72>
 8007040:	4620      	mov	r0, r4
 8007042:	f000 f8ab 	bl	800719c <_free_r>
 8007046:	6a23      	ldr	r3, [r4, #32]
 8007048:	b1b3      	cbz	r3, 8007078 <_reclaim_reent+0xa4>
 800704a:	4620      	mov	r0, r4
 800704c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007050:	4718      	bx	r3
 8007052:	5949      	ldr	r1, [r1, r5]
 8007054:	b941      	cbnz	r1, 8007068 <_reclaim_reent+0x94>
 8007056:	3504      	adds	r5, #4
 8007058:	69e3      	ldr	r3, [r4, #28]
 800705a:	2d80      	cmp	r5, #128	; 0x80
 800705c:	68d9      	ldr	r1, [r3, #12]
 800705e:	d1f8      	bne.n	8007052 <_reclaim_reent+0x7e>
 8007060:	4620      	mov	r0, r4
 8007062:	f000 f89b 	bl	800719c <_free_r>
 8007066:	e7c0      	b.n	8006fea <_reclaim_reent+0x16>
 8007068:	680e      	ldr	r6, [r1, #0]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f896 	bl	800719c <_free_r>
 8007070:	4631      	mov	r1, r6
 8007072:	e7ef      	b.n	8007054 <_reclaim_reent+0x80>
 8007074:	2500      	movs	r5, #0
 8007076:	e7ef      	b.n	8007058 <_reclaim_reent+0x84>
 8007078:	bd70      	pop	{r4, r5, r6, pc}
 800707a:	bf00      	nop
 800707c:	20000068 	.word	0x20000068

08007080 <_lseek_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d07      	ldr	r5, [pc, #28]	; (80070a0 <_lseek_r+0x20>)
 8007084:	4604      	mov	r4, r0
 8007086:	4608      	mov	r0, r1
 8007088:	4611      	mov	r1, r2
 800708a:	2200      	movs	r2, #0
 800708c:	602a      	str	r2, [r5, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	f7fa fc67 	bl	8001962 <_lseek>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_lseek_r+0x1e>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_lseek_r+0x1e>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	20004c94 	.word	0x20004c94

080070a4 <_read_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d07      	ldr	r5, [pc, #28]	; (80070c4 <_read_r+0x20>)
 80070a8:	4604      	mov	r4, r0
 80070aa:	4608      	mov	r0, r1
 80070ac:	4611      	mov	r1, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7fa fbf5 	bl	80018a2 <_read>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_read_r+0x1e>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_read_r+0x1e>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20004c94 	.word	0x20004c94

080070c8 <_write_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	; (80070e8 <_write_r+0x20>)
 80070cc:	4604      	mov	r4, r0
 80070ce:	4608      	mov	r0, r1
 80070d0:	4611      	mov	r1, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	602a      	str	r2, [r5, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f7fa fc00 	bl	80018dc <_write>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_write_r+0x1e>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_write_r+0x1e>
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	20004c94 	.word	0x20004c94

080070ec <__errno>:
 80070ec:	4b01      	ldr	r3, [pc, #4]	; (80070f4 <__errno+0x8>)
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000068 	.word	0x20000068

080070f8 <__libc_init_array>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	4d0d      	ldr	r5, [pc, #52]	; (8007130 <__libc_init_array+0x38>)
 80070fc:	4c0d      	ldr	r4, [pc, #52]	; (8007134 <__libc_init_array+0x3c>)
 80070fe:	1b64      	subs	r4, r4, r5
 8007100:	10a4      	asrs	r4, r4, #2
 8007102:	2600      	movs	r6, #0
 8007104:	42a6      	cmp	r6, r4
 8007106:	d109      	bne.n	800711c <__libc_init_array+0x24>
 8007108:	4d0b      	ldr	r5, [pc, #44]	; (8007138 <__libc_init_array+0x40>)
 800710a:	4c0c      	ldr	r4, [pc, #48]	; (800713c <__libc_init_array+0x44>)
 800710c:	f000 fdd6 	bl	8007cbc <_init>
 8007110:	1b64      	subs	r4, r4, r5
 8007112:	10a4      	asrs	r4, r4, #2
 8007114:	2600      	movs	r6, #0
 8007116:	42a6      	cmp	r6, r4
 8007118:	d105      	bne.n	8007126 <__libc_init_array+0x2e>
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007120:	4798      	blx	r3
 8007122:	3601      	adds	r6, #1
 8007124:	e7ee      	b.n	8007104 <__libc_init_array+0xc>
 8007126:	f855 3b04 	ldr.w	r3, [r5], #4
 800712a:	4798      	blx	r3
 800712c:	3601      	adds	r6, #1
 800712e:	e7f2      	b.n	8007116 <__libc_init_array+0x1e>
 8007130:	08007e5c 	.word	0x08007e5c
 8007134:	08007e5c 	.word	0x08007e5c
 8007138:	08007e5c 	.word	0x08007e5c
 800713c:	08007e60 	.word	0x08007e60

08007140 <__retarget_lock_acquire_recursive>:
 8007140:	4770      	bx	lr

08007142 <__retarget_lock_release_recursive>:
 8007142:	4770      	bx	lr

08007144 <memcpy>:
 8007144:	440a      	add	r2, r1
 8007146:	4291      	cmp	r1, r2
 8007148:	f100 33ff 	add.w	r3, r0, #4294967295
 800714c:	d100      	bne.n	8007150 <memcpy+0xc>
 800714e:	4770      	bx	lr
 8007150:	b510      	push	{r4, lr}
 8007152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800715a:	4291      	cmp	r1, r2
 800715c:	d1f9      	bne.n	8007152 <memcpy+0xe>
 800715e:	bd10      	pop	{r4, pc}

08007160 <__assert_func>:
 8007160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007162:	4614      	mov	r4, r2
 8007164:	461a      	mov	r2, r3
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <__assert_func+0x2c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4605      	mov	r5, r0
 800716c:	68d8      	ldr	r0, [r3, #12]
 800716e:	b14c      	cbz	r4, 8007184 <__assert_func+0x24>
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <__assert_func+0x30>)
 8007172:	9100      	str	r1, [sp, #0]
 8007174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007178:	4906      	ldr	r1, [pc, #24]	; (8007194 <__assert_func+0x34>)
 800717a:	462b      	mov	r3, r5
 800717c:	f000 fbe2 	bl	8007944 <fiprintf>
 8007180:	f000 fccc 	bl	8007b1c <abort>
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__assert_func+0x38>)
 8007186:	461c      	mov	r4, r3
 8007188:	e7f3      	b.n	8007172 <__assert_func+0x12>
 800718a:	bf00      	nop
 800718c:	20000068 	.word	0x20000068
 8007190:	08007de3 	.word	0x08007de3
 8007194:	08007df0 	.word	0x08007df0
 8007198:	08007e1e 	.word	0x08007e1e

0800719c <_free_r>:
 800719c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800719e:	2900      	cmp	r1, #0
 80071a0:	d044      	beq.n	800722c <_free_r+0x90>
 80071a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a6:	9001      	str	r0, [sp, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f1a1 0404 	sub.w	r4, r1, #4
 80071ae:	bfb8      	it	lt
 80071b0:	18e4      	addlt	r4, r4, r3
 80071b2:	f000 f8e7 	bl	8007384 <__malloc_lock>
 80071b6:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <_free_r+0x94>)
 80071b8:	9801      	ldr	r0, [sp, #4]
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	b933      	cbnz	r3, 80071cc <_free_r+0x30>
 80071be:	6063      	str	r3, [r4, #4]
 80071c0:	6014      	str	r4, [r2, #0]
 80071c2:	b003      	add	sp, #12
 80071c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c8:	f000 b8e2 	b.w	8007390 <__malloc_unlock>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d908      	bls.n	80071e2 <_free_r+0x46>
 80071d0:	6825      	ldr	r5, [r4, #0]
 80071d2:	1961      	adds	r1, r4, r5
 80071d4:	428b      	cmp	r3, r1
 80071d6:	bf01      	itttt	eq
 80071d8:	6819      	ldreq	r1, [r3, #0]
 80071da:	685b      	ldreq	r3, [r3, #4]
 80071dc:	1949      	addeq	r1, r1, r5
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	e7ed      	b.n	80071be <_free_r+0x22>
 80071e2:	461a      	mov	r2, r3
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b10b      	cbz	r3, 80071ec <_free_r+0x50>
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d9fa      	bls.n	80071e2 <_free_r+0x46>
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	1855      	adds	r5, r2, r1
 80071f0:	42a5      	cmp	r5, r4
 80071f2:	d10b      	bne.n	800720c <_free_r+0x70>
 80071f4:	6824      	ldr	r4, [r4, #0]
 80071f6:	4421      	add	r1, r4
 80071f8:	1854      	adds	r4, r2, r1
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	6011      	str	r1, [r2, #0]
 80071fe:	d1e0      	bne.n	80071c2 <_free_r+0x26>
 8007200:	681c      	ldr	r4, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6053      	str	r3, [r2, #4]
 8007206:	440c      	add	r4, r1
 8007208:	6014      	str	r4, [r2, #0]
 800720a:	e7da      	b.n	80071c2 <_free_r+0x26>
 800720c:	d902      	bls.n	8007214 <_free_r+0x78>
 800720e:	230c      	movs	r3, #12
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	e7d6      	b.n	80071c2 <_free_r+0x26>
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	1961      	adds	r1, r4, r5
 8007218:	428b      	cmp	r3, r1
 800721a:	bf04      	itt	eq
 800721c:	6819      	ldreq	r1, [r3, #0]
 800721e:	685b      	ldreq	r3, [r3, #4]
 8007220:	6063      	str	r3, [r4, #4]
 8007222:	bf04      	itt	eq
 8007224:	1949      	addeq	r1, r1, r5
 8007226:	6021      	streq	r1, [r4, #0]
 8007228:	6054      	str	r4, [r2, #4]
 800722a:	e7ca      	b.n	80071c2 <_free_r+0x26>
 800722c:	b003      	add	sp, #12
 800722e:	bd30      	pop	{r4, r5, pc}
 8007230:	20004c9c 	.word	0x20004c9c

08007234 <malloc>:
 8007234:	4b02      	ldr	r3, [pc, #8]	; (8007240 <malloc+0xc>)
 8007236:	4601      	mov	r1, r0
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	f000 b823 	b.w	8007284 <_malloc_r>
 800723e:	bf00      	nop
 8007240:	20000068 	.word	0x20000068

08007244 <sbrk_aligned>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	4e0e      	ldr	r6, [pc, #56]	; (8007280 <sbrk_aligned+0x3c>)
 8007248:	460c      	mov	r4, r1
 800724a:	6831      	ldr	r1, [r6, #0]
 800724c:	4605      	mov	r5, r0
 800724e:	b911      	cbnz	r1, 8007256 <sbrk_aligned+0x12>
 8007250:	f000 fc54 	bl	8007afc <_sbrk_r>
 8007254:	6030      	str	r0, [r6, #0]
 8007256:	4621      	mov	r1, r4
 8007258:	4628      	mov	r0, r5
 800725a:	f000 fc4f 	bl	8007afc <_sbrk_r>
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	d00a      	beq.n	8007278 <sbrk_aligned+0x34>
 8007262:	1cc4      	adds	r4, r0, #3
 8007264:	f024 0403 	bic.w	r4, r4, #3
 8007268:	42a0      	cmp	r0, r4
 800726a:	d007      	beq.n	800727c <sbrk_aligned+0x38>
 800726c:	1a21      	subs	r1, r4, r0
 800726e:	4628      	mov	r0, r5
 8007270:	f000 fc44 	bl	8007afc <_sbrk_r>
 8007274:	3001      	adds	r0, #1
 8007276:	d101      	bne.n	800727c <sbrk_aligned+0x38>
 8007278:	f04f 34ff 	mov.w	r4, #4294967295
 800727c:	4620      	mov	r0, r4
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	20004ca0 	.word	0x20004ca0

08007284 <_malloc_r>:
 8007284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007288:	1ccd      	adds	r5, r1, #3
 800728a:	f025 0503 	bic.w	r5, r5, #3
 800728e:	3508      	adds	r5, #8
 8007290:	2d0c      	cmp	r5, #12
 8007292:	bf38      	it	cc
 8007294:	250c      	movcc	r5, #12
 8007296:	2d00      	cmp	r5, #0
 8007298:	4607      	mov	r7, r0
 800729a:	db01      	blt.n	80072a0 <_malloc_r+0x1c>
 800729c:	42a9      	cmp	r1, r5
 800729e:	d905      	bls.n	80072ac <_malloc_r+0x28>
 80072a0:	230c      	movs	r3, #12
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	2600      	movs	r6, #0
 80072a6:	4630      	mov	r0, r6
 80072a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007380 <_malloc_r+0xfc>
 80072b0:	f000 f868 	bl	8007384 <__malloc_lock>
 80072b4:	f8d8 3000 	ldr.w	r3, [r8]
 80072b8:	461c      	mov	r4, r3
 80072ba:	bb5c      	cbnz	r4, 8007314 <_malloc_r+0x90>
 80072bc:	4629      	mov	r1, r5
 80072be:	4638      	mov	r0, r7
 80072c0:	f7ff ffc0 	bl	8007244 <sbrk_aligned>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	4604      	mov	r4, r0
 80072c8:	d155      	bne.n	8007376 <_malloc_r+0xf2>
 80072ca:	f8d8 4000 	ldr.w	r4, [r8]
 80072ce:	4626      	mov	r6, r4
 80072d0:	2e00      	cmp	r6, #0
 80072d2:	d145      	bne.n	8007360 <_malloc_r+0xdc>
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	d048      	beq.n	800736a <_malloc_r+0xe6>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	4631      	mov	r1, r6
 80072dc:	4638      	mov	r0, r7
 80072de:	eb04 0903 	add.w	r9, r4, r3
 80072e2:	f000 fc0b 	bl	8007afc <_sbrk_r>
 80072e6:	4581      	cmp	r9, r0
 80072e8:	d13f      	bne.n	800736a <_malloc_r+0xe6>
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	1a6d      	subs	r5, r5, r1
 80072ee:	4629      	mov	r1, r5
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7ff ffa7 	bl	8007244 <sbrk_aligned>
 80072f6:	3001      	adds	r0, #1
 80072f8:	d037      	beq.n	800736a <_malloc_r+0xe6>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	442b      	add	r3, r5
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	f8d8 3000 	ldr.w	r3, [r8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d038      	beq.n	800737a <_malloc_r+0xf6>
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	42a2      	cmp	r2, r4
 800730c:	d12b      	bne.n	8007366 <_malloc_r+0xe2>
 800730e:	2200      	movs	r2, #0
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	e00f      	b.n	8007334 <_malloc_r+0xb0>
 8007314:	6822      	ldr	r2, [r4, #0]
 8007316:	1b52      	subs	r2, r2, r5
 8007318:	d41f      	bmi.n	800735a <_malloc_r+0xd6>
 800731a:	2a0b      	cmp	r2, #11
 800731c:	d917      	bls.n	800734e <_malloc_r+0xca>
 800731e:	1961      	adds	r1, r4, r5
 8007320:	42a3      	cmp	r3, r4
 8007322:	6025      	str	r5, [r4, #0]
 8007324:	bf18      	it	ne
 8007326:	6059      	strne	r1, [r3, #4]
 8007328:	6863      	ldr	r3, [r4, #4]
 800732a:	bf08      	it	eq
 800732c:	f8c8 1000 	streq.w	r1, [r8]
 8007330:	5162      	str	r2, [r4, r5]
 8007332:	604b      	str	r3, [r1, #4]
 8007334:	4638      	mov	r0, r7
 8007336:	f104 060b 	add.w	r6, r4, #11
 800733a:	f000 f829 	bl	8007390 <__malloc_unlock>
 800733e:	f026 0607 	bic.w	r6, r6, #7
 8007342:	1d23      	adds	r3, r4, #4
 8007344:	1af2      	subs	r2, r6, r3
 8007346:	d0ae      	beq.n	80072a6 <_malloc_r+0x22>
 8007348:	1b9b      	subs	r3, r3, r6
 800734a:	50a3      	str	r3, [r4, r2]
 800734c:	e7ab      	b.n	80072a6 <_malloc_r+0x22>
 800734e:	42a3      	cmp	r3, r4
 8007350:	6862      	ldr	r2, [r4, #4]
 8007352:	d1dd      	bne.n	8007310 <_malloc_r+0x8c>
 8007354:	f8c8 2000 	str.w	r2, [r8]
 8007358:	e7ec      	b.n	8007334 <_malloc_r+0xb0>
 800735a:	4623      	mov	r3, r4
 800735c:	6864      	ldr	r4, [r4, #4]
 800735e:	e7ac      	b.n	80072ba <_malloc_r+0x36>
 8007360:	4634      	mov	r4, r6
 8007362:	6876      	ldr	r6, [r6, #4]
 8007364:	e7b4      	b.n	80072d0 <_malloc_r+0x4c>
 8007366:	4613      	mov	r3, r2
 8007368:	e7cc      	b.n	8007304 <_malloc_r+0x80>
 800736a:	230c      	movs	r3, #12
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	4638      	mov	r0, r7
 8007370:	f000 f80e 	bl	8007390 <__malloc_unlock>
 8007374:	e797      	b.n	80072a6 <_malloc_r+0x22>
 8007376:	6025      	str	r5, [r4, #0]
 8007378:	e7dc      	b.n	8007334 <_malloc_r+0xb0>
 800737a:	605b      	str	r3, [r3, #4]
 800737c:	deff      	udf	#255	; 0xff
 800737e:	bf00      	nop
 8007380:	20004c9c 	.word	0x20004c9c

08007384 <__malloc_lock>:
 8007384:	4801      	ldr	r0, [pc, #4]	; (800738c <__malloc_lock+0x8>)
 8007386:	f7ff bedb 	b.w	8007140 <__retarget_lock_acquire_recursive>
 800738a:	bf00      	nop
 800738c:	20004c98 	.word	0x20004c98

08007390 <__malloc_unlock>:
 8007390:	4801      	ldr	r0, [pc, #4]	; (8007398 <__malloc_unlock+0x8>)
 8007392:	f7ff bed6 	b.w	8007142 <__retarget_lock_release_recursive>
 8007396:	bf00      	nop
 8007398:	20004c98 	.word	0x20004c98

0800739c <__sfputc_r>:
 800739c:	6893      	ldr	r3, [r2, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	b410      	push	{r4}
 80073a4:	6093      	str	r3, [r2, #8]
 80073a6:	da08      	bge.n	80073ba <__sfputc_r+0x1e>
 80073a8:	6994      	ldr	r4, [r2, #24]
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	db01      	blt.n	80073b2 <__sfputc_r+0x16>
 80073ae:	290a      	cmp	r1, #10
 80073b0:	d103      	bne.n	80073ba <__sfputc_r+0x1e>
 80073b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073b6:	f000 bb0b 	b.w	80079d0 <__swbuf_r>
 80073ba:	6813      	ldr	r3, [r2, #0]
 80073bc:	1c58      	adds	r0, r3, #1
 80073be:	6010      	str	r0, [r2, #0]
 80073c0:	7019      	strb	r1, [r3, #0]
 80073c2:	4608      	mov	r0, r1
 80073c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <__sfputs_r>:
 80073ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	4614      	mov	r4, r2
 80073d2:	18d5      	adds	r5, r2, r3
 80073d4:	42ac      	cmp	r4, r5
 80073d6:	d101      	bne.n	80073dc <__sfputs_r+0x12>
 80073d8:	2000      	movs	r0, #0
 80073da:	e007      	b.n	80073ec <__sfputs_r+0x22>
 80073dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e0:	463a      	mov	r2, r7
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff ffda 	bl	800739c <__sfputc_r>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d1f3      	bne.n	80073d4 <__sfputs_r+0xa>
 80073ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073f0 <_vfiprintf_r>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	460d      	mov	r5, r1
 80073f6:	b09d      	sub	sp, #116	; 0x74
 80073f8:	4614      	mov	r4, r2
 80073fa:	4698      	mov	r8, r3
 80073fc:	4606      	mov	r6, r0
 80073fe:	b118      	cbz	r0, 8007408 <_vfiprintf_r+0x18>
 8007400:	6a03      	ldr	r3, [r0, #32]
 8007402:	b90b      	cbnz	r3, 8007408 <_vfiprintf_r+0x18>
 8007404:	f7ff fd3a 	bl	8006e7c <__sinit>
 8007408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800740a:	07d9      	lsls	r1, r3, #31
 800740c:	d405      	bmi.n	800741a <_vfiprintf_r+0x2a>
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	059a      	lsls	r2, r3, #22
 8007412:	d402      	bmi.n	800741a <_vfiprintf_r+0x2a>
 8007414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007416:	f7ff fe93 	bl	8007140 <__retarget_lock_acquire_recursive>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	071b      	lsls	r3, r3, #28
 800741e:	d501      	bpl.n	8007424 <_vfiprintf_r+0x34>
 8007420:	692b      	ldr	r3, [r5, #16]
 8007422:	b99b      	cbnz	r3, 800744c <_vfiprintf_r+0x5c>
 8007424:	4629      	mov	r1, r5
 8007426:	4630      	mov	r0, r6
 8007428:	f000 fb10 	bl	8007a4c <__swsetup_r>
 800742c:	b170      	cbz	r0, 800744c <_vfiprintf_r+0x5c>
 800742e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007430:	07dc      	lsls	r4, r3, #31
 8007432:	d504      	bpl.n	800743e <_vfiprintf_r+0x4e>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	b01d      	add	sp, #116	; 0x74
 800743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	0598      	lsls	r0, r3, #22
 8007442:	d4f7      	bmi.n	8007434 <_vfiprintf_r+0x44>
 8007444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007446:	f7ff fe7c 	bl	8007142 <__retarget_lock_release_recursive>
 800744a:	e7f3      	b.n	8007434 <_vfiprintf_r+0x44>
 800744c:	2300      	movs	r3, #0
 800744e:	9309      	str	r3, [sp, #36]	; 0x24
 8007450:	2320      	movs	r3, #32
 8007452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007456:	f8cd 800c 	str.w	r8, [sp, #12]
 800745a:	2330      	movs	r3, #48	; 0x30
 800745c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007610 <_vfiprintf_r+0x220>
 8007460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007464:	f04f 0901 	mov.w	r9, #1
 8007468:	4623      	mov	r3, r4
 800746a:	469a      	mov	sl, r3
 800746c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007470:	b10a      	cbz	r2, 8007476 <_vfiprintf_r+0x86>
 8007472:	2a25      	cmp	r2, #37	; 0x25
 8007474:	d1f9      	bne.n	800746a <_vfiprintf_r+0x7a>
 8007476:	ebba 0b04 	subs.w	fp, sl, r4
 800747a:	d00b      	beq.n	8007494 <_vfiprintf_r+0xa4>
 800747c:	465b      	mov	r3, fp
 800747e:	4622      	mov	r2, r4
 8007480:	4629      	mov	r1, r5
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ffa1 	bl	80073ca <__sfputs_r>
 8007488:	3001      	adds	r0, #1
 800748a:	f000 80a9 	beq.w	80075e0 <_vfiprintf_r+0x1f0>
 800748e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007490:	445a      	add	r2, fp
 8007492:	9209      	str	r2, [sp, #36]	; 0x24
 8007494:	f89a 3000 	ldrb.w	r3, [sl]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 80a1 	beq.w	80075e0 <_vfiprintf_r+0x1f0>
 800749e:	2300      	movs	r3, #0
 80074a0:	f04f 32ff 	mov.w	r2, #4294967295
 80074a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074a8:	f10a 0a01 	add.w	sl, sl, #1
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	9307      	str	r3, [sp, #28]
 80074b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074b4:	931a      	str	r3, [sp, #104]	; 0x68
 80074b6:	4654      	mov	r4, sl
 80074b8:	2205      	movs	r2, #5
 80074ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074be:	4854      	ldr	r0, [pc, #336]	; (8007610 <_vfiprintf_r+0x220>)
 80074c0:	f7f8 fe96 	bl	80001f0 <memchr>
 80074c4:	9a04      	ldr	r2, [sp, #16]
 80074c6:	b9d8      	cbnz	r0, 8007500 <_vfiprintf_r+0x110>
 80074c8:	06d1      	lsls	r1, r2, #27
 80074ca:	bf44      	itt	mi
 80074cc:	2320      	movmi	r3, #32
 80074ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074d2:	0713      	lsls	r3, r2, #28
 80074d4:	bf44      	itt	mi
 80074d6:	232b      	movmi	r3, #43	; 0x2b
 80074d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074dc:	f89a 3000 	ldrb.w	r3, [sl]
 80074e0:	2b2a      	cmp	r3, #42	; 0x2a
 80074e2:	d015      	beq.n	8007510 <_vfiprintf_r+0x120>
 80074e4:	9a07      	ldr	r2, [sp, #28]
 80074e6:	4654      	mov	r4, sl
 80074e8:	2000      	movs	r0, #0
 80074ea:	f04f 0c0a 	mov.w	ip, #10
 80074ee:	4621      	mov	r1, r4
 80074f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f4:	3b30      	subs	r3, #48	; 0x30
 80074f6:	2b09      	cmp	r3, #9
 80074f8:	d94d      	bls.n	8007596 <_vfiprintf_r+0x1a6>
 80074fa:	b1b0      	cbz	r0, 800752a <_vfiprintf_r+0x13a>
 80074fc:	9207      	str	r2, [sp, #28]
 80074fe:	e014      	b.n	800752a <_vfiprintf_r+0x13a>
 8007500:	eba0 0308 	sub.w	r3, r0, r8
 8007504:	fa09 f303 	lsl.w	r3, r9, r3
 8007508:	4313      	orrs	r3, r2
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	46a2      	mov	sl, r4
 800750e:	e7d2      	b.n	80074b6 <_vfiprintf_r+0xc6>
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	1d19      	adds	r1, r3, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	9103      	str	r1, [sp, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	bfbb      	ittet	lt
 800751c:	425b      	neglt	r3, r3
 800751e:	f042 0202 	orrlt.w	r2, r2, #2
 8007522:	9307      	strge	r3, [sp, #28]
 8007524:	9307      	strlt	r3, [sp, #28]
 8007526:	bfb8      	it	lt
 8007528:	9204      	strlt	r2, [sp, #16]
 800752a:	7823      	ldrb	r3, [r4, #0]
 800752c:	2b2e      	cmp	r3, #46	; 0x2e
 800752e:	d10c      	bne.n	800754a <_vfiprintf_r+0x15a>
 8007530:	7863      	ldrb	r3, [r4, #1]
 8007532:	2b2a      	cmp	r3, #42	; 0x2a
 8007534:	d134      	bne.n	80075a0 <_vfiprintf_r+0x1b0>
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	1d1a      	adds	r2, r3, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	9203      	str	r2, [sp, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	bfb8      	it	lt
 8007542:	f04f 33ff 	movlt.w	r3, #4294967295
 8007546:	3402      	adds	r4, #2
 8007548:	9305      	str	r3, [sp, #20]
 800754a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007620 <_vfiprintf_r+0x230>
 800754e:	7821      	ldrb	r1, [r4, #0]
 8007550:	2203      	movs	r2, #3
 8007552:	4650      	mov	r0, sl
 8007554:	f7f8 fe4c 	bl	80001f0 <memchr>
 8007558:	b138      	cbz	r0, 800756a <_vfiprintf_r+0x17a>
 800755a:	9b04      	ldr	r3, [sp, #16]
 800755c:	eba0 000a 	sub.w	r0, r0, sl
 8007560:	2240      	movs	r2, #64	; 0x40
 8007562:	4082      	lsls	r2, r0
 8007564:	4313      	orrs	r3, r2
 8007566:	3401      	adds	r4, #1
 8007568:	9304      	str	r3, [sp, #16]
 800756a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756e:	4829      	ldr	r0, [pc, #164]	; (8007614 <_vfiprintf_r+0x224>)
 8007570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007574:	2206      	movs	r2, #6
 8007576:	f7f8 fe3b 	bl	80001f0 <memchr>
 800757a:	2800      	cmp	r0, #0
 800757c:	d03f      	beq.n	80075fe <_vfiprintf_r+0x20e>
 800757e:	4b26      	ldr	r3, [pc, #152]	; (8007618 <_vfiprintf_r+0x228>)
 8007580:	bb1b      	cbnz	r3, 80075ca <_vfiprintf_r+0x1da>
 8007582:	9b03      	ldr	r3, [sp, #12]
 8007584:	3307      	adds	r3, #7
 8007586:	f023 0307 	bic.w	r3, r3, #7
 800758a:	3308      	adds	r3, #8
 800758c:	9303      	str	r3, [sp, #12]
 800758e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007590:	443b      	add	r3, r7
 8007592:	9309      	str	r3, [sp, #36]	; 0x24
 8007594:	e768      	b.n	8007468 <_vfiprintf_r+0x78>
 8007596:	fb0c 3202 	mla	r2, ip, r2, r3
 800759a:	460c      	mov	r4, r1
 800759c:	2001      	movs	r0, #1
 800759e:	e7a6      	b.n	80074ee <_vfiprintf_r+0xfe>
 80075a0:	2300      	movs	r3, #0
 80075a2:	3401      	adds	r4, #1
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	4619      	mov	r1, r3
 80075a8:	f04f 0c0a 	mov.w	ip, #10
 80075ac:	4620      	mov	r0, r4
 80075ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b2:	3a30      	subs	r2, #48	; 0x30
 80075b4:	2a09      	cmp	r2, #9
 80075b6:	d903      	bls.n	80075c0 <_vfiprintf_r+0x1d0>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0c6      	beq.n	800754a <_vfiprintf_r+0x15a>
 80075bc:	9105      	str	r1, [sp, #20]
 80075be:	e7c4      	b.n	800754a <_vfiprintf_r+0x15a>
 80075c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c4:	4604      	mov	r4, r0
 80075c6:	2301      	movs	r3, #1
 80075c8:	e7f0      	b.n	80075ac <_vfiprintf_r+0x1bc>
 80075ca:	ab03      	add	r3, sp, #12
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	462a      	mov	r2, r5
 80075d0:	4b12      	ldr	r3, [pc, #72]	; (800761c <_vfiprintf_r+0x22c>)
 80075d2:	a904      	add	r1, sp, #16
 80075d4:	4630      	mov	r0, r6
 80075d6:	f3af 8000 	nop.w
 80075da:	4607      	mov	r7, r0
 80075dc:	1c78      	adds	r0, r7, #1
 80075de:	d1d6      	bne.n	800758e <_vfiprintf_r+0x19e>
 80075e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075e2:	07d9      	lsls	r1, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_vfiprintf_r+0x202>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	059a      	lsls	r2, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_vfiprintf_r+0x202>
 80075ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ee:	f7ff fda8 	bl	8007142 <__retarget_lock_release_recursive>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	065b      	lsls	r3, r3, #25
 80075f6:	f53f af1d 	bmi.w	8007434 <_vfiprintf_r+0x44>
 80075fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075fc:	e71c      	b.n	8007438 <_vfiprintf_r+0x48>
 80075fe:	ab03      	add	r3, sp, #12
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	462a      	mov	r2, r5
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <_vfiprintf_r+0x22c>)
 8007606:	a904      	add	r1, sp, #16
 8007608:	4630      	mov	r0, r6
 800760a:	f000 f879 	bl	8007700 <_printf_i>
 800760e:	e7e4      	b.n	80075da <_vfiprintf_r+0x1ea>
 8007610:	08007e1f 	.word	0x08007e1f
 8007614:	08007e29 	.word	0x08007e29
 8007618:	00000000 	.word	0x00000000
 800761c:	080073cb 	.word	0x080073cb
 8007620:	08007e25 	.word	0x08007e25

08007624 <_printf_common>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	4616      	mov	r6, r2
 800762a:	4699      	mov	r9, r3
 800762c:	688a      	ldr	r2, [r1, #8]
 800762e:	690b      	ldr	r3, [r1, #16]
 8007630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007634:	4293      	cmp	r3, r2
 8007636:	bfb8      	it	lt
 8007638:	4613      	movlt	r3, r2
 800763a:	6033      	str	r3, [r6, #0]
 800763c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007640:	4607      	mov	r7, r0
 8007642:	460c      	mov	r4, r1
 8007644:	b10a      	cbz	r2, 800764a <_printf_common+0x26>
 8007646:	3301      	adds	r3, #1
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	0699      	lsls	r1, r3, #26
 800764e:	bf42      	ittt	mi
 8007650:	6833      	ldrmi	r3, [r6, #0]
 8007652:	3302      	addmi	r3, #2
 8007654:	6033      	strmi	r3, [r6, #0]
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	f015 0506 	ands.w	r5, r5, #6
 800765c:	d106      	bne.n	800766c <_printf_common+0x48>
 800765e:	f104 0a19 	add.w	sl, r4, #25
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	6832      	ldr	r2, [r6, #0]
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	42ab      	cmp	r3, r5
 800766a:	dc26      	bgt.n	80076ba <_printf_common+0x96>
 800766c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007670:	1e13      	subs	r3, r2, #0
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	bf18      	it	ne
 8007676:	2301      	movne	r3, #1
 8007678:	0692      	lsls	r2, r2, #26
 800767a:	d42b      	bmi.n	80076d4 <_printf_common+0xb0>
 800767c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007680:	4649      	mov	r1, r9
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	3001      	adds	r0, #1
 8007688:	d01e      	beq.n	80076c8 <_printf_common+0xa4>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	f003 0306 	and.w	r3, r3, #6
 8007692:	2b04      	cmp	r3, #4
 8007694:	bf02      	ittt	eq
 8007696:	68e5      	ldreq	r5, [r4, #12]
 8007698:	6833      	ldreq	r3, [r6, #0]
 800769a:	1aed      	subeq	r5, r5, r3
 800769c:	68a3      	ldr	r3, [r4, #8]
 800769e:	bf0c      	ite	eq
 80076a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076a4:	2500      	movne	r5, #0
 80076a6:	4293      	cmp	r3, r2
 80076a8:	bfc4      	itt	gt
 80076aa:	1a9b      	subgt	r3, r3, r2
 80076ac:	18ed      	addgt	r5, r5, r3
 80076ae:	2600      	movs	r6, #0
 80076b0:	341a      	adds	r4, #26
 80076b2:	42b5      	cmp	r5, r6
 80076b4:	d11a      	bne.n	80076ec <_printf_common+0xc8>
 80076b6:	2000      	movs	r0, #0
 80076b8:	e008      	b.n	80076cc <_printf_common+0xa8>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4652      	mov	r2, sl
 80076be:	4649      	mov	r1, r9
 80076c0:	4638      	mov	r0, r7
 80076c2:	47c0      	blx	r8
 80076c4:	3001      	adds	r0, #1
 80076c6:	d103      	bne.n	80076d0 <_printf_common+0xac>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d0:	3501      	adds	r5, #1
 80076d2:	e7c6      	b.n	8007662 <_printf_common+0x3e>
 80076d4:	18e1      	adds	r1, r4, r3
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	2030      	movs	r0, #48	; 0x30
 80076da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076de:	4422      	add	r2, r4
 80076e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076e8:	3302      	adds	r3, #2
 80076ea:	e7c7      	b.n	800767c <_printf_common+0x58>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4622      	mov	r2, r4
 80076f0:	4649      	mov	r1, r9
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c0      	blx	r8
 80076f6:	3001      	adds	r0, #1
 80076f8:	d0e6      	beq.n	80076c8 <_printf_common+0xa4>
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7d9      	b.n	80076b2 <_printf_common+0x8e>
	...

08007700 <_printf_i>:
 8007700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	7e0f      	ldrb	r7, [r1, #24]
 8007706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007708:	2f78      	cmp	r7, #120	; 0x78
 800770a:	4691      	mov	r9, r2
 800770c:	4680      	mov	r8, r0
 800770e:	460c      	mov	r4, r1
 8007710:	469a      	mov	sl, r3
 8007712:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007716:	d807      	bhi.n	8007728 <_printf_i+0x28>
 8007718:	2f62      	cmp	r7, #98	; 0x62
 800771a:	d80a      	bhi.n	8007732 <_printf_i+0x32>
 800771c:	2f00      	cmp	r7, #0
 800771e:	f000 80d4 	beq.w	80078ca <_printf_i+0x1ca>
 8007722:	2f58      	cmp	r7, #88	; 0x58
 8007724:	f000 80c0 	beq.w	80078a8 <_printf_i+0x1a8>
 8007728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800772c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007730:	e03a      	b.n	80077a8 <_printf_i+0xa8>
 8007732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007736:	2b15      	cmp	r3, #21
 8007738:	d8f6      	bhi.n	8007728 <_printf_i+0x28>
 800773a:	a101      	add	r1, pc, #4	; (adr r1, 8007740 <_printf_i+0x40>)
 800773c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007740:	08007799 	.word	0x08007799
 8007744:	080077ad 	.word	0x080077ad
 8007748:	08007729 	.word	0x08007729
 800774c:	08007729 	.word	0x08007729
 8007750:	08007729 	.word	0x08007729
 8007754:	08007729 	.word	0x08007729
 8007758:	080077ad 	.word	0x080077ad
 800775c:	08007729 	.word	0x08007729
 8007760:	08007729 	.word	0x08007729
 8007764:	08007729 	.word	0x08007729
 8007768:	08007729 	.word	0x08007729
 800776c:	080078b1 	.word	0x080078b1
 8007770:	080077d9 	.word	0x080077d9
 8007774:	0800786b 	.word	0x0800786b
 8007778:	08007729 	.word	0x08007729
 800777c:	08007729 	.word	0x08007729
 8007780:	080078d3 	.word	0x080078d3
 8007784:	08007729 	.word	0x08007729
 8007788:	080077d9 	.word	0x080077d9
 800778c:	08007729 	.word	0x08007729
 8007790:	08007729 	.word	0x08007729
 8007794:	08007873 	.word	0x08007873
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	602a      	str	r2, [r5, #0]
 80077a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077a8:	2301      	movs	r3, #1
 80077aa:	e09f      	b.n	80078ec <_printf_i+0x1ec>
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	682b      	ldr	r3, [r5, #0]
 80077b0:	0607      	lsls	r7, r0, #24
 80077b2:	f103 0104 	add.w	r1, r3, #4
 80077b6:	6029      	str	r1, [r5, #0]
 80077b8:	d501      	bpl.n	80077be <_printf_i+0xbe>
 80077ba:	681e      	ldr	r6, [r3, #0]
 80077bc:	e003      	b.n	80077c6 <_printf_i+0xc6>
 80077be:	0646      	lsls	r6, r0, #25
 80077c0:	d5fb      	bpl.n	80077ba <_printf_i+0xba>
 80077c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077c6:	2e00      	cmp	r6, #0
 80077c8:	da03      	bge.n	80077d2 <_printf_i+0xd2>
 80077ca:	232d      	movs	r3, #45	; 0x2d
 80077cc:	4276      	negs	r6, r6
 80077ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d2:	485a      	ldr	r0, [pc, #360]	; (800793c <_printf_i+0x23c>)
 80077d4:	230a      	movs	r3, #10
 80077d6:	e012      	b.n	80077fe <_printf_i+0xfe>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	6820      	ldr	r0, [r4, #0]
 80077dc:	1d19      	adds	r1, r3, #4
 80077de:	6029      	str	r1, [r5, #0]
 80077e0:	0605      	lsls	r5, r0, #24
 80077e2:	d501      	bpl.n	80077e8 <_printf_i+0xe8>
 80077e4:	681e      	ldr	r6, [r3, #0]
 80077e6:	e002      	b.n	80077ee <_printf_i+0xee>
 80077e8:	0641      	lsls	r1, r0, #25
 80077ea:	d5fb      	bpl.n	80077e4 <_printf_i+0xe4>
 80077ec:	881e      	ldrh	r6, [r3, #0]
 80077ee:	4853      	ldr	r0, [pc, #332]	; (800793c <_printf_i+0x23c>)
 80077f0:	2f6f      	cmp	r7, #111	; 0x6f
 80077f2:	bf0c      	ite	eq
 80077f4:	2308      	moveq	r3, #8
 80077f6:	230a      	movne	r3, #10
 80077f8:	2100      	movs	r1, #0
 80077fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077fe:	6865      	ldr	r5, [r4, #4]
 8007800:	60a5      	str	r5, [r4, #8]
 8007802:	2d00      	cmp	r5, #0
 8007804:	bfa2      	ittt	ge
 8007806:	6821      	ldrge	r1, [r4, #0]
 8007808:	f021 0104 	bicge.w	r1, r1, #4
 800780c:	6021      	strge	r1, [r4, #0]
 800780e:	b90e      	cbnz	r6, 8007814 <_printf_i+0x114>
 8007810:	2d00      	cmp	r5, #0
 8007812:	d04b      	beq.n	80078ac <_printf_i+0x1ac>
 8007814:	4615      	mov	r5, r2
 8007816:	fbb6 f1f3 	udiv	r1, r6, r3
 800781a:	fb03 6711 	mls	r7, r3, r1, r6
 800781e:	5dc7      	ldrb	r7, [r0, r7]
 8007820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007824:	4637      	mov	r7, r6
 8007826:	42bb      	cmp	r3, r7
 8007828:	460e      	mov	r6, r1
 800782a:	d9f4      	bls.n	8007816 <_printf_i+0x116>
 800782c:	2b08      	cmp	r3, #8
 800782e:	d10b      	bne.n	8007848 <_printf_i+0x148>
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	07de      	lsls	r6, r3, #31
 8007834:	d508      	bpl.n	8007848 <_printf_i+0x148>
 8007836:	6923      	ldr	r3, [r4, #16]
 8007838:	6861      	ldr	r1, [r4, #4]
 800783a:	4299      	cmp	r1, r3
 800783c:	bfde      	ittt	le
 800783e:	2330      	movle	r3, #48	; 0x30
 8007840:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007844:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007848:	1b52      	subs	r2, r2, r5
 800784a:	6122      	str	r2, [r4, #16]
 800784c:	f8cd a000 	str.w	sl, [sp]
 8007850:	464b      	mov	r3, r9
 8007852:	aa03      	add	r2, sp, #12
 8007854:	4621      	mov	r1, r4
 8007856:	4640      	mov	r0, r8
 8007858:	f7ff fee4 	bl	8007624 <_printf_common>
 800785c:	3001      	adds	r0, #1
 800785e:	d14a      	bne.n	80078f6 <_printf_i+0x1f6>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	b004      	add	sp, #16
 8007866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	f043 0320 	orr.w	r3, r3, #32
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	4833      	ldr	r0, [pc, #204]	; (8007940 <_printf_i+0x240>)
 8007874:	2778      	movs	r7, #120	; 0x78
 8007876:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	6829      	ldr	r1, [r5, #0]
 800787e:	061f      	lsls	r7, r3, #24
 8007880:	f851 6b04 	ldr.w	r6, [r1], #4
 8007884:	d402      	bmi.n	800788c <_printf_i+0x18c>
 8007886:	065f      	lsls	r7, r3, #25
 8007888:	bf48      	it	mi
 800788a:	b2b6      	uxthmi	r6, r6
 800788c:	07df      	lsls	r7, r3, #31
 800788e:	bf48      	it	mi
 8007890:	f043 0320 	orrmi.w	r3, r3, #32
 8007894:	6029      	str	r1, [r5, #0]
 8007896:	bf48      	it	mi
 8007898:	6023      	strmi	r3, [r4, #0]
 800789a:	b91e      	cbnz	r6, 80078a4 <_printf_i+0x1a4>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	f023 0320 	bic.w	r3, r3, #32
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	2310      	movs	r3, #16
 80078a6:	e7a7      	b.n	80077f8 <_printf_i+0xf8>
 80078a8:	4824      	ldr	r0, [pc, #144]	; (800793c <_printf_i+0x23c>)
 80078aa:	e7e4      	b.n	8007876 <_printf_i+0x176>
 80078ac:	4615      	mov	r5, r2
 80078ae:	e7bd      	b.n	800782c <_printf_i+0x12c>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	6826      	ldr	r6, [r4, #0]
 80078b4:	6961      	ldr	r1, [r4, #20]
 80078b6:	1d18      	adds	r0, r3, #4
 80078b8:	6028      	str	r0, [r5, #0]
 80078ba:	0635      	lsls	r5, r6, #24
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	d501      	bpl.n	80078c4 <_printf_i+0x1c4>
 80078c0:	6019      	str	r1, [r3, #0]
 80078c2:	e002      	b.n	80078ca <_printf_i+0x1ca>
 80078c4:	0670      	lsls	r0, r6, #25
 80078c6:	d5fb      	bpl.n	80078c0 <_printf_i+0x1c0>
 80078c8:	8019      	strh	r1, [r3, #0]
 80078ca:	2300      	movs	r3, #0
 80078cc:	6123      	str	r3, [r4, #16]
 80078ce:	4615      	mov	r5, r2
 80078d0:	e7bc      	b.n	800784c <_printf_i+0x14c>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	1d1a      	adds	r2, r3, #4
 80078d6:	602a      	str	r2, [r5, #0]
 80078d8:	681d      	ldr	r5, [r3, #0]
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	2100      	movs	r1, #0
 80078de:	4628      	mov	r0, r5
 80078e0:	f7f8 fc86 	bl	80001f0 <memchr>
 80078e4:	b108      	cbz	r0, 80078ea <_printf_i+0x1ea>
 80078e6:	1b40      	subs	r0, r0, r5
 80078e8:	6060      	str	r0, [r4, #4]
 80078ea:	6863      	ldr	r3, [r4, #4]
 80078ec:	6123      	str	r3, [r4, #16]
 80078ee:	2300      	movs	r3, #0
 80078f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f4:	e7aa      	b.n	800784c <_printf_i+0x14c>
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	462a      	mov	r2, r5
 80078fa:	4649      	mov	r1, r9
 80078fc:	4640      	mov	r0, r8
 80078fe:	47d0      	blx	sl
 8007900:	3001      	adds	r0, #1
 8007902:	d0ad      	beq.n	8007860 <_printf_i+0x160>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	079b      	lsls	r3, r3, #30
 8007908:	d413      	bmi.n	8007932 <_printf_i+0x232>
 800790a:	68e0      	ldr	r0, [r4, #12]
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	4298      	cmp	r0, r3
 8007910:	bfb8      	it	lt
 8007912:	4618      	movlt	r0, r3
 8007914:	e7a6      	b.n	8007864 <_printf_i+0x164>
 8007916:	2301      	movs	r3, #1
 8007918:	4632      	mov	r2, r6
 800791a:	4649      	mov	r1, r9
 800791c:	4640      	mov	r0, r8
 800791e:	47d0      	blx	sl
 8007920:	3001      	adds	r0, #1
 8007922:	d09d      	beq.n	8007860 <_printf_i+0x160>
 8007924:	3501      	adds	r5, #1
 8007926:	68e3      	ldr	r3, [r4, #12]
 8007928:	9903      	ldr	r1, [sp, #12]
 800792a:	1a5b      	subs	r3, r3, r1
 800792c:	42ab      	cmp	r3, r5
 800792e:	dcf2      	bgt.n	8007916 <_printf_i+0x216>
 8007930:	e7eb      	b.n	800790a <_printf_i+0x20a>
 8007932:	2500      	movs	r5, #0
 8007934:	f104 0619 	add.w	r6, r4, #25
 8007938:	e7f5      	b.n	8007926 <_printf_i+0x226>
 800793a:	bf00      	nop
 800793c:	08007e30 	.word	0x08007e30
 8007940:	08007e41 	.word	0x08007e41

08007944 <fiprintf>:
 8007944:	b40e      	push	{r1, r2, r3}
 8007946:	b503      	push	{r0, r1, lr}
 8007948:	4601      	mov	r1, r0
 800794a:	ab03      	add	r3, sp, #12
 800794c:	4805      	ldr	r0, [pc, #20]	; (8007964 <fiprintf+0x20>)
 800794e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007952:	6800      	ldr	r0, [r0, #0]
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	f7ff fd4b 	bl	80073f0 <_vfiprintf_r>
 800795a:	b002      	add	sp, #8
 800795c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007960:	b003      	add	sp, #12
 8007962:	4770      	bx	lr
 8007964:	20000068 	.word	0x20000068

08007968 <_putc_r>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	460d      	mov	r5, r1
 800796c:	4614      	mov	r4, r2
 800796e:	4606      	mov	r6, r0
 8007970:	b118      	cbz	r0, 800797a <_putc_r+0x12>
 8007972:	6a03      	ldr	r3, [r0, #32]
 8007974:	b90b      	cbnz	r3, 800797a <_putc_r+0x12>
 8007976:	f7ff fa81 	bl	8006e7c <__sinit>
 800797a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797c:	07d8      	lsls	r0, r3, #31
 800797e:	d405      	bmi.n	800798c <_putc_r+0x24>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	0599      	lsls	r1, r3, #22
 8007984:	d402      	bmi.n	800798c <_putc_r+0x24>
 8007986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007988:	f7ff fbda 	bl	8007140 <__retarget_lock_acquire_recursive>
 800798c:	68a3      	ldr	r3, [r4, #8]
 800798e:	3b01      	subs	r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	60a3      	str	r3, [r4, #8]
 8007994:	da05      	bge.n	80079a2 <_putc_r+0x3a>
 8007996:	69a2      	ldr	r2, [r4, #24]
 8007998:	4293      	cmp	r3, r2
 800799a:	db12      	blt.n	80079c2 <_putc_r+0x5a>
 800799c:	b2eb      	uxtb	r3, r5
 800799e:	2b0a      	cmp	r3, #10
 80079a0:	d00f      	beq.n	80079c2 <_putc_r+0x5a>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	6022      	str	r2, [r4, #0]
 80079a8:	701d      	strb	r5, [r3, #0]
 80079aa:	b2ed      	uxtb	r5, r5
 80079ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ae:	07da      	lsls	r2, r3, #31
 80079b0:	d405      	bmi.n	80079be <_putc_r+0x56>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	059b      	lsls	r3, r3, #22
 80079b6:	d402      	bmi.n	80079be <_putc_r+0x56>
 80079b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ba:	f7ff fbc2 	bl	8007142 <__retarget_lock_release_recursive>
 80079be:	4628      	mov	r0, r5
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	4629      	mov	r1, r5
 80079c4:	4622      	mov	r2, r4
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 f802 	bl	80079d0 <__swbuf_r>
 80079cc:	4605      	mov	r5, r0
 80079ce:	e7ed      	b.n	80079ac <_putc_r+0x44>

080079d0 <__swbuf_r>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	460e      	mov	r6, r1
 80079d4:	4614      	mov	r4, r2
 80079d6:	4605      	mov	r5, r0
 80079d8:	b118      	cbz	r0, 80079e2 <__swbuf_r+0x12>
 80079da:	6a03      	ldr	r3, [r0, #32]
 80079dc:	b90b      	cbnz	r3, 80079e2 <__swbuf_r+0x12>
 80079de:	f7ff fa4d 	bl	8006e7c <__sinit>
 80079e2:	69a3      	ldr	r3, [r4, #24]
 80079e4:	60a3      	str	r3, [r4, #8]
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	071a      	lsls	r2, r3, #28
 80079ea:	d525      	bpl.n	8007a38 <__swbuf_r+0x68>
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	b31b      	cbz	r3, 8007a38 <__swbuf_r+0x68>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	1a98      	subs	r0, r3, r2
 80079f6:	6963      	ldr	r3, [r4, #20]
 80079f8:	b2f6      	uxtb	r6, r6
 80079fa:	4283      	cmp	r3, r0
 80079fc:	4637      	mov	r7, r6
 80079fe:	dc04      	bgt.n	8007a0a <__swbuf_r+0x3a>
 8007a00:	4621      	mov	r1, r4
 8007a02:	4628      	mov	r0, r5
 8007a04:	f7ff f984 	bl	8006d10 <_fflush_r>
 8007a08:	b9e0      	cbnz	r0, 8007a44 <__swbuf_r+0x74>
 8007a0a:	68a3      	ldr	r3, [r4, #8]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	60a3      	str	r3, [r4, #8]
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	6022      	str	r2, [r4, #0]
 8007a16:	701e      	strb	r6, [r3, #0]
 8007a18:	6962      	ldr	r2, [r4, #20]
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d004      	beq.n	8007a2a <__swbuf_r+0x5a>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	07db      	lsls	r3, r3, #31
 8007a24:	d506      	bpl.n	8007a34 <__swbuf_r+0x64>
 8007a26:	2e0a      	cmp	r6, #10
 8007a28:	d104      	bne.n	8007a34 <__swbuf_r+0x64>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f7ff f96f 	bl	8006d10 <_fflush_r>
 8007a32:	b938      	cbnz	r0, 8007a44 <__swbuf_r+0x74>
 8007a34:	4638      	mov	r0, r7
 8007a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 f806 	bl	8007a4c <__swsetup_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d0d5      	beq.n	80079f0 <__swbuf_r+0x20>
 8007a44:	f04f 37ff 	mov.w	r7, #4294967295
 8007a48:	e7f4      	b.n	8007a34 <__swbuf_r+0x64>
	...

08007a4c <__swsetup_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4b2a      	ldr	r3, [pc, #168]	; (8007af8 <__swsetup_r+0xac>)
 8007a50:	4605      	mov	r5, r0
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	460c      	mov	r4, r1
 8007a56:	b118      	cbz	r0, 8007a60 <__swsetup_r+0x14>
 8007a58:	6a03      	ldr	r3, [r0, #32]
 8007a5a:	b90b      	cbnz	r3, 8007a60 <__swsetup_r+0x14>
 8007a5c:	f7ff fa0e 	bl	8006e7c <__sinit>
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a66:	0718      	lsls	r0, r3, #28
 8007a68:	d422      	bmi.n	8007ab0 <__swsetup_r+0x64>
 8007a6a:	06d9      	lsls	r1, r3, #27
 8007a6c:	d407      	bmi.n	8007a7e <__swsetup_r+0x32>
 8007a6e:	2309      	movs	r3, #9
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7c:	e034      	b.n	8007ae8 <__swsetup_r+0x9c>
 8007a7e:	0758      	lsls	r0, r3, #29
 8007a80:	d512      	bpl.n	8007aa8 <__swsetup_r+0x5c>
 8007a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a84:	b141      	cbz	r1, 8007a98 <__swsetup_r+0x4c>
 8007a86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a8a:	4299      	cmp	r1, r3
 8007a8c:	d002      	beq.n	8007a94 <__swsetup_r+0x48>
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f7ff fb84 	bl	800719c <_free_r>
 8007a94:	2300      	movs	r3, #0
 8007a96:	6363      	str	r3, [r4, #52]	; 0x34
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	6063      	str	r3, [r4, #4]
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f043 0308 	orr.w	r3, r3, #8
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	b94b      	cbnz	r3, 8007ac8 <__swsetup_r+0x7c>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007abe:	d003      	beq.n	8007ac8 <__swsetup_r+0x7c>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 f857 	bl	8007b76 <__smakebuf_r>
 8007ac8:	89a0      	ldrh	r0, [r4, #12]
 8007aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ace:	f010 0301 	ands.w	r3, r0, #1
 8007ad2:	d00a      	beq.n	8007aea <__swsetup_r+0x9e>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60a3      	str	r3, [r4, #8]
 8007ad8:	6963      	ldr	r3, [r4, #20]
 8007ada:	425b      	negs	r3, r3
 8007adc:	61a3      	str	r3, [r4, #24]
 8007ade:	6923      	ldr	r3, [r4, #16]
 8007ae0:	b943      	cbnz	r3, 8007af4 <__swsetup_r+0xa8>
 8007ae2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ae6:	d1c4      	bne.n	8007a72 <__swsetup_r+0x26>
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	0781      	lsls	r1, r0, #30
 8007aec:	bf58      	it	pl
 8007aee:	6963      	ldrpl	r3, [r4, #20]
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	e7f4      	b.n	8007ade <__swsetup_r+0x92>
 8007af4:	2000      	movs	r0, #0
 8007af6:	e7f7      	b.n	8007ae8 <__swsetup_r+0x9c>
 8007af8:	20000068 	.word	0x20000068

08007afc <_sbrk_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d06      	ldr	r5, [pc, #24]	; (8007b18 <_sbrk_r+0x1c>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4604      	mov	r4, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	f7f9 ff38 	bl	800197c <_sbrk>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_sbrk_r+0x1a>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_sbrk_r+0x1a>
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	20004c94 	.word	0x20004c94

08007b1c <abort>:
 8007b1c:	b508      	push	{r3, lr}
 8007b1e:	2006      	movs	r0, #6
 8007b20:	f000 f88e 	bl	8007c40 <raise>
 8007b24:	2001      	movs	r0, #1
 8007b26:	f7f9 feb2 	bl	800188e <_exit>

08007b2a <__swhatbuf_r>:
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b32:	2900      	cmp	r1, #0
 8007b34:	b096      	sub	sp, #88	; 0x58
 8007b36:	4615      	mov	r5, r2
 8007b38:	461e      	mov	r6, r3
 8007b3a:	da0d      	bge.n	8007b58 <__swhatbuf_r+0x2e>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b42:	f04f 0100 	mov.w	r1, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b4c:	2340      	movne	r3, #64	; 0x40
 8007b4e:	2000      	movs	r0, #0
 8007b50:	6031      	str	r1, [r6, #0]
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	b016      	add	sp, #88	; 0x58
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	466a      	mov	r2, sp
 8007b5a:	f000 f879 	bl	8007c50 <_fstat_r>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	dbec      	blt.n	8007b3c <__swhatbuf_r+0x12>
 8007b62:	9901      	ldr	r1, [sp, #4]
 8007b64:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b68:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b6c:	4259      	negs	r1, r3
 8007b6e:	4159      	adcs	r1, r3
 8007b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b74:	e7eb      	b.n	8007b4e <__swhatbuf_r+0x24>

08007b76 <__smakebuf_r>:
 8007b76:	898b      	ldrh	r3, [r1, #12]
 8007b78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b7a:	079d      	lsls	r5, r3, #30
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	d507      	bpl.n	8007b92 <__smakebuf_r+0x1c>
 8007b82:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	6163      	str	r3, [r4, #20]
 8007b8e:	b002      	add	sp, #8
 8007b90:	bd70      	pop	{r4, r5, r6, pc}
 8007b92:	ab01      	add	r3, sp, #4
 8007b94:	466a      	mov	r2, sp
 8007b96:	f7ff ffc8 	bl	8007b2a <__swhatbuf_r>
 8007b9a:	9900      	ldr	r1, [sp, #0]
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff fb70 	bl	8007284 <_malloc_r>
 8007ba4:	b948      	cbnz	r0, 8007bba <__smakebuf_r+0x44>
 8007ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007baa:	059a      	lsls	r2, r3, #22
 8007bac:	d4ef      	bmi.n	8007b8e <__smakebuf_r+0x18>
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	f043 0302 	orr.w	r3, r3, #2
 8007bb6:	81a3      	strh	r3, [r4, #12]
 8007bb8:	e7e3      	b.n	8007b82 <__smakebuf_r+0xc>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	6020      	str	r0, [r4, #0]
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	9b00      	ldr	r3, [sp, #0]
 8007bc6:	6163      	str	r3, [r4, #20]
 8007bc8:	9b01      	ldr	r3, [sp, #4]
 8007bca:	6120      	str	r0, [r4, #16]
 8007bcc:	b15b      	cbz	r3, 8007be6 <__smakebuf_r+0x70>
 8007bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f84e 	bl	8007c74 <_isatty_r>
 8007bd8:	b128      	cbz	r0, 8007be6 <__smakebuf_r+0x70>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	f023 0303 	bic.w	r3, r3, #3
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	431d      	orrs	r5, r3
 8007bea:	81a5      	strh	r5, [r4, #12]
 8007bec:	e7cf      	b.n	8007b8e <__smakebuf_r+0x18>

08007bee <_raise_r>:
 8007bee:	291f      	cmp	r1, #31
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	d904      	bls.n	8007c02 <_raise_r+0x14>
 8007bf8:	2316      	movs	r3, #22
 8007bfa:	6003      	str	r3, [r0, #0]
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	bd38      	pop	{r3, r4, r5, pc}
 8007c02:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c04:	b112      	cbz	r2, 8007c0c <_raise_r+0x1e>
 8007c06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c0a:	b94b      	cbnz	r3, 8007c20 <_raise_r+0x32>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 f853 	bl	8007cb8 <_getpid_r>
 8007c12:	462a      	mov	r2, r5
 8007c14:	4601      	mov	r1, r0
 8007c16:	4620      	mov	r0, r4
 8007c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c1c:	f000 b83a 	b.w	8007c94 <_kill_r>
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d00a      	beq.n	8007c3a <_raise_r+0x4c>
 8007c24:	1c59      	adds	r1, r3, #1
 8007c26:	d103      	bne.n	8007c30 <_raise_r+0x42>
 8007c28:	2316      	movs	r3, #22
 8007c2a:	6003      	str	r3, [r0, #0]
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	e7e7      	b.n	8007c00 <_raise_r+0x12>
 8007c30:	2400      	movs	r4, #0
 8007c32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c36:	4628      	mov	r0, r5
 8007c38:	4798      	blx	r3
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e7e0      	b.n	8007c00 <_raise_r+0x12>
	...

08007c40 <raise>:
 8007c40:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <raise+0xc>)
 8007c42:	4601      	mov	r1, r0
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	f7ff bfd2 	b.w	8007bee <_raise_r>
 8007c4a:	bf00      	nop
 8007c4c:	20000068 	.word	0x20000068

08007c50 <_fstat_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	; (8007c70 <_fstat_r+0x20>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	602b      	str	r3, [r5, #0]
 8007c5e:	f7f9 fe65 	bl	800192c <_fstat>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d102      	bne.n	8007c6c <_fstat_r+0x1c>
 8007c66:	682b      	ldr	r3, [r5, #0]
 8007c68:	b103      	cbz	r3, 8007c6c <_fstat_r+0x1c>
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	bf00      	nop
 8007c70:	20004c94 	.word	0x20004c94

08007c74 <_isatty_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d06      	ldr	r5, [pc, #24]	; (8007c90 <_isatty_r+0x1c>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	f7f9 fe64 	bl	800194c <_isatty>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_isatty_r+0x1a>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_isatty_r+0x1a>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20004c94 	.word	0x20004c94

08007c94 <_kill_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d07      	ldr	r5, [pc, #28]	; (8007cb4 <_kill_r+0x20>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	602b      	str	r3, [r5, #0]
 8007ca2:	f7f9 fde4 	bl	800186e <_kill>
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	d102      	bne.n	8007cb0 <_kill_r+0x1c>
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	b103      	cbz	r3, 8007cb0 <_kill_r+0x1c>
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20004c94 	.word	0x20004c94

08007cb8 <_getpid_r>:
 8007cb8:	f7f9 bdd1 	b.w	800185e <_getpid>

08007cbc <_init>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	bf00      	nop
 8007cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc2:	bc08      	pop	{r3}
 8007cc4:	469e      	mov	lr, r3
 8007cc6:	4770      	bx	lr

08007cc8 <_fini>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	bf00      	nop
 8007ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cce:	bc08      	pop	{r3}
 8007cd0:	469e      	mov	lr, r3
 8007cd2:	4770      	bx	lr
